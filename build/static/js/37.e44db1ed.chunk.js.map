{"version":3,"sources":["common/index.js","common/graphs/chartjs/components/ChartJsPressets.js","common/graphs/chartjs/components/ChartJsGraph.js","views/graphs/components/ChartJs.js"],"names":["_layout__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","d","__webpack_exports__","_navigation__WEBPACK_IMPORTED_MODULE_1__","_utils__WEBPACK_IMPORTED_MODULE_2__","_widgets__WEBPACK_IMPORTED_MODULE_3__","pressets","line","scaleShowGridLines","scaleGridLineColor","scaleGridLineWidth","bezierCurve","bezierCurveTension","pointDot","pointDotRadius","pointDotStrokeWidth","pointHitDetectionRadius","datasetStroke","datasetStrokeWidth","datasetFill","responsive","legendTemplate","radar","scaleShowLine","angleShowLineOut","scaleShowLabels","scaleBeginAtZero","angleLineColor","angleLineWidth","pointLabelFontFamily","pointLabelFontStyle","pointLabelFontSize","pointLabelFontColor","polar","scaleShowLabelBackdrop","scaleBackdropColor","scaleBackdropPaddingY","scaleBackdropPaddingX","segmentShowStroke","segmentStrokeColor","segmentStrokeWidth","animationSteps","animationEasing","animateRotate","animateScale","bar","barShowStroke","barStrokeWidth","barValueSpacing","barDatasetSpacing","doughnut","percentageInnerCutout","pie","ChartJsGraph","this","renderChart","props","data","prevProps","JSON","stringify","ctx","refs","canvas","getContext","Chart","type","options","update","react_default","a","createElement","className","ref","React","Component","ChartJs","state","_this2","getJSON","then","setState","id","common","items","icon","editbutton","ChartJsGraph_ChartJsGraph"],"mappings":"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","file":"static/js/37.e44db1ed.chunk.js","sourcesContent":["export * from './layout'\nexport * from './navigation'\nexport * from './utils'\nexport * from './widgets'","const pressets = {\n  line: {\n    ///Boolean - Whether grid lines are shown across the chart\n    scaleShowGridLines: true,\n    //String - Colour of the grid lines\n    scaleGridLineColor: \"rgba(0,0,0,.05)\",\n    //Number - Width of the grid lines\n    scaleGridLineWidth: 1,\n    //Boolean - Whether the line is curved between points\n    bezierCurve: true,\n    //Number - Tension of the bezier curve between points\n    bezierCurveTension: 0.4,\n    //Boolean - Whether to show a dot for each point\n    pointDot: true,\n    //Number - Radius of each point dot in pixels\n    pointDotRadius: 4,\n    //Number - Pixel width of point dot stroke\n    pointDotStrokeWidth: 1,\n    //Number - amount extra to add to the radius to cater for hit detection outside the drawn point\n    pointHitDetectionRadius: 20,\n    //Boolean - Whether to show a stroke for datasets\n    datasetStroke: true,\n    //Number - Pixel width of dataset stroke\n    datasetStrokeWidth: 2,\n    //Boolean - Whether to fill the dataset with a colour\n    datasetFill: true,\n    //Boolean - Re-draw chart on page resize\n    responsive: true,\n    //String - A legend template\n    legendTemplate:\n      '<ul class=\"<%=name.toLowerCase()%>-legend\"><% for (var i=0; i<datasets.length; i++){%><li><span style=\"background-color:<%=datasets[i].lineColor%>\"></span><%if(datasets[i].label){%><%=datasets[i].label%><%}%></li><%}%></ul>'\n  },\n  radar: {\n    //Boolean - Whether to show lines for each scale point\n    scaleShowLine: true,\n    //Boolean - Whether we show the angle lines out of the radar\n    angleShowLineOut: true,\n    //Boolean - Whether to show labels on the scale\n    scaleShowLabels: false,\n    // Boolean - Whether the scale should begin at zero\n    scaleBeginAtZero: true,\n    //String - Colour of the angle line\n    angleLineColor: \"rgba(0,0,0,.1)\",\n    //Number - Pixel width of the angle line\n    angleLineWidth: 1,\n    //String - Point label font declaration\n    pointLabelFontFamily: \"'Arial'\",\n    //String - Point label font weight\n    pointLabelFontStyle: \"normal\",\n    //Number - Point label font size in pixels\n    pointLabelFontSize: 10,\n    //String - Point label font colour\n    pointLabelFontColor: \"#666\",\n    //Boolean - Whether to show a dot for each point\n    pointDot: true,\n    //Number - Radius of each point dot in pixels\n    pointDotRadius: 3,\n    //Number - Pixel width of point dot stroke\n    pointDotStrokeWidth: 1,\n    //Number - amount extra to add to the radius to cater for hit detection outside the drawn point\n    pointHitDetectionRadius: 20,\n    //Boolean - Whether to show a stroke for datasets\n    datasetStroke: true,\n    //Number - Pixel width of dataset stroke\n    datasetStrokeWidth: 2,\n    //Boolean - Whether to fill the dataset with a colour\n    datasetFill: true,\n    //Boolean - Re-draw chart on page resize\n    responsive: true,\n    //String - A legend template\n    legendTemplate:\n      '<ul class=\"<%=name.toLowerCase()%>-legend\"><% for (var i=0; i<datasets.length; i++){%><li><span style=\"background-color:<%=datasets[i].lineColor%>\"></span><%if(datasets[i].label){%><%=datasets[i].label%><%}%></li><%}%></ul>'\n  },\n  polar: {\n    //Boolean - Show a backdrop to the scale label\n    scaleShowLabelBackdrop: true,\n    //String - The colour of the label backdrop\n    scaleBackdropColor: \"rgba(255,255,255,0.75)\",\n    // Boolean - Whether the scale should begin at zero\n    scaleBeginAtZero: true,\n    //Number - The backdrop padding above & below the label in pixels\n    scaleBackdropPaddingY: 2,\n    //Number - The backdrop padding to the side of the label in pixels\n    scaleBackdropPaddingX: 2,\n    //Boolean - Show line for each value in the scale\n    scaleShowLine: true,\n    //Boolean - Stroke a line around each segment in the chart\n    segmentShowStroke: true,\n    //String - The colour of the stroke on each segement.\n    segmentStrokeColor: \"#fff\",\n    //Number - The width of the stroke value in pixels\n    segmentStrokeWidth: 2,\n    //Number - Amount of animation steps\n    animationSteps: 100,\n    //String - Animation easing effect.\n    animationEasing: \"easeOutBounce\",\n    //Boolean - Whether to animate the rotation of the chart\n    animateRotate: true,\n    //Boolean - Whether to animate scaling the chart from the centre\n    animateScale: false,\n    //Boolean - Re-draw chart on page resize\n    responsive: true,\n    //String - A legend template\n    legendTemplate:\n      '<ul class=\"<%=name.toLowerCase()%>-legend\"><% for (var i=0; i<segments.length; i++){%><li><span style=\"background-color:<%=segments[i].fillColor%>\"></span><%if(segments[i].label){%><%=segments[i].label%><%}%></li><%}%></ul>'\n  },\n  bar: {\n    //Boolean - Whether the scale should start at zero, or an order of magnitude down from the lowest value\n    scaleBeginAtZero: true,\n    //Boolean - Whether grid lines are shown across the chart\n    scaleShowGridLines: true,\n    //String - Colour of the grid lines\n    scaleGridLineColor: \"rgba(0,0,0,.05)\",\n    //Number - Width of the grid lines\n    scaleGridLineWidth: 1,\n    //Boolean - If there is a stroke on each bar\n    barShowStroke: true,\n    //Number - Pixel width of the bar stroke\n    barStrokeWidth: 1,\n    //Number - Spacing between each of the X value sets\n    barValueSpacing: 5,\n    //Number - Spacing between data sets within X values\n    barDatasetSpacing: 1,\n    //Boolean - Re-draw chart on page resize\n    responsive: true,\n    //String - A legend template\n    legendTemplate:\n      '<ul class=\"<%=name.toLowerCase()%>-legend\"><% for (var i=0; i<datasets.length; i++){%><li><span style=\"background-color:<%=datasets[i].lineColor%>\"></span><%if(datasets[i].label){%><%=datasets[i].label%><%}%></li><%}%></ul>'\n  },\n  doughnut: {\n    //Boolean - Whether we should show a stroke on each segment\n    segmentShowStroke: true,\n    //String - The colour of each segment stroke\n    segmentStrokeColor: \"#fff\",\n    //Number - The width of each segment stroke\n    segmentStrokeWidth: 2,\n    //Number - The percentage of the chart that we cut out of the middle\n    percentageInnerCutout: 50, // This is 0 for Pie charts\n    //Number - Amount of animation steps\n    animationSteps: 100,\n    //String - Animation easing effect\n    animationEasing: \"easeOutBounce\",\n    //Boolean - Whether we animate the rotation of the Doughnut\n    animateRotate: true,\n    //Boolean - Whether we animate scaling the Doughnut from the centre\n    animateScale: false,\n    //Boolean - Re-draw chart on page resize\n    responsive: true,\n    //String - A legend template\n    legendTemplate:\n      '<ul class=\"<%=name.toLowerCase()%>-legend\"><% for (var i=0; i<segments.length; i++){%><li><span style=\"background-color:<%=segments[i].fillColor%>\"></span><%if(segments[i].label){%><%=segments[i].label%><%}%></li><%}%></ul>'\n  },\n  pie: {\n    //Boolean - Whether we should show a stroke on each segment\n    segmentShowStroke: true,\n    //String - The colour of each segment stroke\n    segmentStrokeColor: \"#fff\",\n    //Number - The width of each segment stroke\n    segmentStrokeWidth: 2,\n    //Number - Amount of animation steps\n    animationSteps: 100,\n    //String - types of animation\n    animationEasing: \"easeOutBounce\",\n    //Boolean - Whether we animate the rotation of the Doughnut\n    animateRotate: true,\n    //Boolean - Whether we animate scaling the Doughnut from the centre\n    animateScale: false,\n    //Boolean - Re-draw chart on page resize\n    responsive: true,\n    //String - A legend template\n    legendTemplate:\n      '<ul class=\"<%=name.toLowerCase()%>-legend\"><% for (var i=0; i<segments.length; i++){%><li><span style=\"background-color:<%=segments[i].fillColor%>\"></span><%if(segments[i].label){%><%=segments[i].label%><%}%></li><%}%></ul>'\n  }\n};\n\nexport default pressets;\n","import React from \"react\";\n\nimport Chart from \"chart.js\";\n\nimport pressets from \"./ChartJsPressets\";\n\nexport default class ChartJsGraph extends React.Component {\n  componentDidMount() {\n    this.renderChart(this.props.data);\n  }\n\n  componentDidUpdate(prevProps) {\n    if (JSON.stringify(prevProps.data) !== JSON.stringify(this.props.data)) {\n      this.renderChart(this.props.data);\n    }\n  }\n\n  renderChart(data) {\n    var ctx = this.refs.canvas.getContext(\"2d\");\n    if (data) {\n      let chart = new Chart(ctx, {\n        type: this.props.type,\n        data: data,\n        options: pressets[this.props.type] || {}\n      });\n      chart.update();\n    }\n  }\n\n  render() {\n    return <canvas className={this.props.className} ref=\"canvas\" />;\n  }\n}\n","import React from \"react\";\n\nimport {\n  Stats,\n  BigBreadcrumbs,\n  WidgetGrid,\n  JarvisWidget,\n  getJSON\n} from \"../../../common\";\n\nimport { ChartJsGraph } from \"../../../common/graphs/chartjs\";\n\nexport default class ChartJs extends React.Component {\n  state = {};\n\n  componentDidMount() {\n    getJSON(\"assets/api/graphs/chartjs.json\").then(data => {\n      this.setState(data);\n    });\n  }\n\n  render() {\n    return (\n      <div id=\"content\">\n        <div className=\"row\">\n          <BigBreadcrumbs\n            items={[\"ChartJs\"]}\n            icon=\"fa fa-fw fa-bar-chart-o\"\n            className=\"col-xs-12 col-sm-7 col-md-7 col-lg-4\"\n          />\n          <Stats />\n        </div>\n\n        <WidgetGrid>\n          <div className=\"row\">\n            <article className=\"col-xs-12 col-sm-6 col-md-6 col-lg-6\">\n              <JarvisWidget id=\"wid-id-0\" editbutton={false}>\n                <header>\n                  <span className=\"widget-icon\">\n                    <i className=\"fa fa-bar-chart-o\" />\n                  </span>\n                  <h2>Line Chart</h2>\n                </header>\n                <div>\n                  <div className=\"widget-body\">\n                    <ChartJsGraph type=\"line\" data={this.state[\"line-chart\"]} />\n                  </div>\n                </div>\n              </JarvisWidget>\n\n              <JarvisWidget id=\"wid-id-1\" editbutton={false}>\n                <header>\n                  <span className=\"widget-icon\">\n                    <i className=\"fa fa-bar-chart-o\" />\n                  </span>\n                  <h2>Radar Chart</h2>\n                </header>\n                <div>\n                  <div className=\"widget-body\">\n                    <ChartJsGraph\n                      type=\"radar\"\n                      data={this.state[\"radar-chart\"]}\n                    />\n                  </div>\n                </div>\n              </JarvisWidget>\n\n              <JarvisWidget id=\"wid-id-2\" editbutton={false}>\n                <header>\n                  <span className=\"widget-icon\">\n                    <i className=\"fa fa-bar-chart-o\" />\n                  </span>\n                  <h2>Polar Chart</h2>\n                </header>\n                <div>\n                  <div className=\"widget-body\">\n                    <ChartJsGraph\n                      type=\"polarArea\"\n                      data={this.state[\"polar-chart\"]}\n                    />\n                  </div>\n                </div>\n              </JarvisWidget>\n            </article>\n\n            <article className=\"col-xs-12 col-sm-6 col-md-6 col-lg-6\">\n              <JarvisWidget id=\"wid-id-3\" editbutton={false}>\n                <header>\n                  <span className=\"widget-icon\">\n                    <i className=\"fa fa-bar-chart-o\" />\n                  </span>\n                  <h2>Bar Chart</h2>\n                </header>\n                <div>\n                  <div className=\"widget-body\">\n                    <ChartJsGraph type=\"bar\" data={this.state[\"bar-chart\"]} />\n                  </div>\n                </div>\n              </JarvisWidget>\n\n              <JarvisWidget id=\"wid-id-4\" editbutton={false}>\n                <header>\n                  <span className=\"widget-icon\">\n                    <i className=\"fa fa-bar-chart-o\" />\n                  </span>\n                  <h2>Doughnut Chart</h2>\n                </header>\n                <div>\n                  <div className=\"widget-body\">\n                    <ChartJsGraph\n                      type=\"doughnut\"\n                      data={this.state[\"doughnut-chart\"]}\n                    />\n                  </div>\n                </div>\n              </JarvisWidget>\n\n              <JarvisWidget id=\"wid-id-5\" editbutton={false}>\n                <header>\n                  <span className=\"widget-icon\">\n                    <i className=\"fa fa-bar-chart-o\" />\n                  </span>\n                  <h2>Pie Chart</h2>\n                </header>\n                <div>\n                  <div className=\"widget-body\">\n                    <ChartJsGraph type=\"pie\" data={this.state[\"pie-chart\"]} />\n                  </div>\n                </div>\n              </JarvisWidget>\n            </article>\n          </div>\n        </WidgetGrid>\n      </div>\n    );\n  }\n}\n"],"sourceRoot":""}