{"version":3,"sources":["../node_modules/datatables.net-buttons/js/buttons.print.js","../node_modules/datatables.net-responsive-bs/js/responsive.bootstrap.js","../node_modules/datatables.net-select-bs/js/select.bootstrap.js","../node_modules/datatables.net/js/jquery.dataTables.js","../node_modules/datatables.net-bs/js/dataTables.bootstrap.js","../node_modules/datatables.net-buttons/js/dataTables.buttons.js","../node_modules/datatables.net-buttons-bs/js/buttons.bootstrap.js","../node_modules/datatables.net-buttons/js/buttons.colVis.js","../node_modules/datatables.net-buttons/js/buttons.flash.js","../node_modules/datatables.net-colreorder-bs/js/colReorder.bootstrap.js","../node_modules/datatables.net-colreorder/js/dataTables.colReorder.js","../node_modules/datatables.net-responsive/js/dataTables.responsive.js","../node_modules/datatables.net-select/js/dataTables.select.js","../node_modules/datatables.net-buttons/js/buttons.html5.js"],"names":["__WEBPACK_AMD_DEFINE_ARRAY__","__WEBPACK_AMD_DEFINE_RESULT__","__webpack_require__","undefined","$","window","document","DataTable","fn","dataTable","_link","createElement","_relToAbs","href","linkHost","host","indexOf","pathname","protocol","search","ext","buttons","print","className","text","dt","i18n","action","e","button","config","data","exportData","extend","decodeEntities","exportOptions","exportInfo","columnClasses","columns","flatten","map","idx","settings","aoColumns","column","index","sClass","toArray","addRow","d","tag","str","i","ien","length","dataOut","html","table","node","header","body","footer","win","open","close","head","title","each","el","clone","nodeName","toLowerCase","outerHTML","_styleToAbs","this","innerHTML","messageTop","messageBottom","addClass","img","setAttribute","getAttribute","customize","autoPrint","navigator","userAgent","match","setTimeout","Buttons","factory","apply","exports","module","_display","Responsive","display","_original","modal","_modal","options","row","update","render","find","detach","empty","append","prepend","appendTo","_ext","_Api2","_api_register","_api_registerPlural","sSelector","oOpts","api","_","rows","traditional","_fnSettingsFromNode","iApiIndex","fnAddData","redraw","isArray","isPlainObject","add","draw","fnAdjustColumnSizing","bRedraw","adjust","scroll","oScroll","sX","sY","_fnScrollDraw","fnClearTable","clear","fnClose","nTr","child","hide","fnDeleteRow","target","callback","aoData","remove","call","fnDestroy","destroy","fnDraw","complete","fnFilter","sInput","iColumn","bRegex","bSmart","bShowGlobal","bCaseInsensitive","fnGetData","src","col","type","cell","fnGetNodes","iRow","nodes","fnGetPosition","toUpperCase","columnVisible","fnIsOpen","isShown","fnOpen","mHtml","show","fnPageChange","mAction","page","fnSetColumnVis","iCol","bShow","visible","fnSettings","fnSort","aaSort","order","fnSortListener","nNode","fnCallback","listener","fnUpdate","mData","mRow","bAction","fnVersionCheck","_that","emptyInit","len","oApi","internal","_fnExternApiFunc","iLen","oInit","_fnExtend","sId","bInitHandedOff","defaults","$this","_fnCompatOpts","_fnCompatCols","_fnCamelToHungarian","allSettings","s","nTable","nTHead","parentNode","nTFoot","bRetrieve","bDestroy","oInstance","_fnLog","sTableId","id","splice","_unique","oSettings","models","sDestroyWidth","style","width","sInstance","push","_fnLanguageCompat","oLanguage","aLengthMenu","iDisplayLength","_fnMap","oFeatures","_fnCallbackReg","fnDrawCallback","fnServerParams","fnStateSaveParams","fnStateLoadParams","fnStateLoaded","fnRowCallback","fnCreatedRow","fnHeaderCallback","fnFooterCallback","fnInitComplete","fnPreDrawCallback","rowIdFn","_fnGetObjectDataFn","rowId","_fnBrowserDetect","oClasses","classes","sTable","iInitDisplayStart","iDisplayStart","_iDisplayStart","iDeferLoading","bDeferLoading","tmp","_iRecordsDisplay","_iRecordsTotal","sUrl","ajax","dataType","url","success","json","_fnInitialise","error","asStripeClasses","sStripeOdd","sStripeEven","stripeClasses","rowOne","children","eq","inArray","hasClass","removeClass","join","asDestroyStripes","slice","aoColumnsInit","anThs","nThead","getElementsByTagName","_fnDetectHeader","aoHeader","_fnGetUniqueThs","_fnAddColumn","_fnApplyColumnDefs","aoColumnDefs","oDef","_fnColumnOptions","a","name","sort","filter","features","loadedInit","aaSorting","sorting","asSorting","_fnSortingClasses","bSort","bSorted","aSort","_fnSortFlatten","sortedColumns","val","dir","_fnCallbackFire","_fnSortAria","_fnDataSource","bDeferRender","captions","_captionSide","css","thead","tbody","nTBody","tfoot","sNoFooter","aoFooter","aaData","_fnAddData","_fnAddTr","aiDisplay","aiDisplayMaster","bInitialised","bStateSave","_fnSaveState","_fnLoadState","_re_dic","_re_new_lines","_re_html","_re_date","_re_escape_regex","RegExp","_re_formatted_numeric","_empty","_intVal","integer","parseInt","isNaN","isFinite","_numToDecimal","num","decimalPoint","_fnEscapeRegex","replace","_isNumber","formatted","strType","parseFloat","_htmlNumeric","_isHtml","_stripHtml","_pluck","prop","prop2","out","_pluck_order","_range","start","end","_removeEmpty","sorted","last","_areAllUnique","j","k","again","_fnHungarianMap","o","newKey","key","_hungarianMap","user","force","hungarianKey","charAt","lang","defaultDecimal","sDecimal","_addNumericSort","zeroRecords","sZeroRecords","sEmptyTable","sLoadingRecords","sInfoThousands","sThousands","decimal","util","throttle","freq","timer","frequency","that","now","Date","args","arguments","clearTimeout","escapeRegex","_fnCompatMap","knew","old","init","sScrollX","scrollX","searchCols","aoSearchCols","oSearch","dataSort","aDataSort","__browser","browser","n","position","top","left","scrollLeft","height","overflow","outer","inner","barWidth","offsetWidth","clientWidth","bScrollOversize","bScrollbarLeft","Math","round","offset","bBounding","getBoundingClientRect","oBrowser","iBarWidth","_fnReduce","inc","value","isSet","hasOwnProperty","nTh","oDefaults","oCol","oColumn","sTitle","aoPreSearchCols","oOptions","th","sWidthOrig","attr","t","mDataProp","sType","_sManualType","iDataSort","mDataSrc","mRender","attrTest","_bAttrSrc","_setter","rowData","meta","innerData","fnSetData","_fnSetObjectDataFn","_rowReadObject","bSortable","sSortableNone","bAsc","bDesc","sSortingClass","sSortableAsc","sSortingClassJUI","sSortJUIAscAllowed","sSortableDesc","sSortJUIDescAllowed","sSortable","sSortJUI","_fnAdjustColumnSizing","bAutoWidth","_fnCalculateColumnWidths","sWidth","_fnVisibleToColumnIndex","iMatch","aiVis","_fnGetColumns","_fnColumnIndexToVisible","iPos","_fnVisbleColumns","vis","bVisible","sParam","_fnColumnTypes","jen","ken","detectedType","cache","types","detect","_fnGetCellData","aoColDefs","aoCols","jLen","kLen","def","aTargets","targets","aDataIn","anTds","oData","oRow","_aData","aIds","_fnCreateTr","trs","_fnGetRowElements","cells","rowIdx","colIdx","iDraw","defaultContent","sDefaultContent","cellData","iDrawError","_fnSetCellData","__reArray","__reFn","_fnSplitObjNotation","mSource","fetchData","arrayNotation","funcNotation","innerSrc","substring","setData","b","aLast","_fnGetDataMaster","_fnClearTable","_fnDeleteIndex","iTarget","iTargetIndex","_fnInvalidate","cellWrite","childNodes","removeChild","firstChild","anCells","_aSortData","_aFilterData","cols","_fnRowAttributes","contents","tds","td","objectRead","setter","cellProcess","trim","nextSibling","rowNode","nTrIn","nTd","_DT_RowIndex","sCellType","_DT_CellIndex","appendChild","fnCreatedCell","tr","DT_RowClass","split","__rowc","concat","DT_RowAttr","DT_RowData","_fnBuildHead","createHeader","iTabIndex","_fnSortAttachListener","_fnRenderer","sHeaderTH","sFooterTH","nTf","_fnDrawHead","aoSource","bIncludeHidden","nLocalTr","iRowspan","iColspan","aoLocal","aApplied","iColumns","_fnDraw","aPreDraw","anRows","iRowCount","iStripes","oLang","aoOpenRows","bServerSide","bDrawing","fnRecordsDisplay","iDisplayEnd","fnDisplayEnd","_fnProcessingDisplay","bDestroying","_fnAjaxUpdate","iStart","iEnd","iDataIndex","nRow","sStripe","_sRowStripe","sZero","fnRecordsTotal","class","valign","colSpan","sRowEmpty","bFiltered","_fnReDraw","holdPosition","bFilter","_fnSort","_fnFilterComplete","oPreviousSearch","_drawHold","_fnAddOptionsHtml","holding","insertBefore","insert","sWrapper","nHolding","nTableWrapper","nTableReinsertBefore","featureNode","cOption","nNewNode","cNext","sAttr","aDom","sDom","sJUIHeader","sJUIFooter","aSplit","substr","parent","bPaginate","bLengthChange","_fnFeatureHtmlLength","_fnFeatureHtmlFilter","bProcessing","_fnFeatureHtmlProcessing","_fnFeatureHtmlTable","bInfo","_fnFeatureHtmlInfo","_fnFeatureHtmlPaginate","feature","aoFeatures","cFeature","fnInit","aanFeatures","replaceWith","aLayout","nCell","l","iColShifted","bUnique","nTrs","fnShiftCol","unique","nHeader","aReturn","bSortCellsTop","_fnBuildAjax","rbracket","ajaxData","instance","jqXHR","newData","baseAjax","sError","sServerMethod","xhr","_error","thrown","ret","readyState","oAjaxData","fnServerData","sAjaxSource","bAjaxDataGet","_fnAjaxParameters","_fnAjaxUpdateDraw","dataProp","columnSearch","columnCount","preSearch","preColSearch","displayStart","displayLength","_iDisplayLength","param","sSearch","regex","sName","searchable","bSearchable","orderable","legacy","compat","modern","_fnAjaxDataSrc","recordsTotal","recordsFiltered","_bInitComplete","_fnInitComplete","dataSrc","sAjaxDataProp","tableId","language","previousSearch","input","sFilterInput","f","sFilter","searchFn","searchDelay","jqFilter","sSearchPlaceholder","on","_fnThrottle","keyCode","ev","activeElement","oInput","iForce","oPrevSearch","aoPrevSearch","fnSaveFilter","oFilter","fnRegex","bEscapeRegex","_fnFilter","_fnFilterColumn","_fnFilterCustom","filters","displayRows","merge","searchStr","smart","caseInsensitive","rpSearch","_fnFilterCreateSearch","test","invalidated","prevSearch","displayMaster","filtered","_fnFilterData","_sFilterRow","word","m","__filter_div","__filter_div_textContent","textContent","filterData","fomatters","wasInvalidated","toString","innerText","_fnSearchToCamel","obj","_fnSearchToHung","tid","sInfo","aoDrawCallback","_fnUpdateInfo","max","total","sInfoEmpty","sInfoFiltered","sInfoPostFix","_fnInfoMacros","fnInfoCallback","formatter","fnFormatNumber","all","ceil","iAjaxStart","deferLoading","_fnStringToCss","aData","_fnLengthChange","_fnLengthOverflow","menu","d2","lengths","select","aria-controls","sLengthSelect","Option","div","sLength","sLengthMenu","sPaginationType","plugin","pager","sPaging","p","visRecords","pages","_fnPageChange","records","floor","changed","r","sProcessing","scrollY","caption","captionSide","headerClone","cloneNode","footerClone","_div","size","scroller","sScrollWrapper","sScrollHead","border","sScrollHeadInner","box-sizing","sXInner","removeAttr","sScrollBody","sScrollFoot","sScrollFootInner","scrollHead","scrollBody","scrollFoot","bCollapse","nScrollHead","nScrollBody","nScrollFoot","headerTrgEls","footerTrgEls","headerSrcEls","footerSrcEls","headerCopy","footerCopy","correction","sanityWidth","scrollXInner","divHeader","divHeaderStyle","divHeaderInner","divHeaderInnerStyle","divHeaderTable","divBodyEl","divBody","divBodyStyle","divFooter","divFooterInner","divFooterTable","tableEl","tableStyle","ie67","dtHeaderCells","headerWidths","footerWidths","headerContent","footerContent","zeroOut","nSizer","paddingTop","paddingBottom","borderTopWidth","borderBottomWidth","scrollBarVis","scrollHeight","clientHeight","prependTo","_fnApplyToChildren","outerWidth","offsetHeight","nToSize","iOuterWidth","bScrolling","padding","scrollTop","an1","an2","nNode1","nNode2","nodeType","__re_html_remove","columnIdx","visibleColumns","headerCells","tableWidthAttr","tableContainer","userInputs","styleWidth","_fnConvertToWidth","tmpTable","margin","_fnGetWidestNode","sContentPadding","holder","right","bounding","_reszEvt","bindResize","_fnGetMaxLenString","maxIdx","srcCol","fixed","aaSortingFixed","fixedObj","nestedSort","pre","post","_idx","sortCol","aiOrig","oExtSort","formatters","_fnSortData","x","y","dataA","dataB","label","nextSort","oAria","removeAttribute","sSortAscending","sSortDescending","_fnSortListener","nextSortIdx","next","bSortMulti","sortIdx","attachTo","_fnBindAction","shiftKey","oldSort","aLastSort","sortClass","sSortColumn","bSortClasses","customData","customSort","sSortDataType","state","time","oSavedState","fnStateSaveCallback","loaded","abStateLoad","duration","iStateDuration","oLoadedState","fnStateLoadCallback","level","msg","tn","console","log","sErrMode","errMode","alert","Error","mappedName","extender","breakRefs","blur","which","preventDefault","sStore","callbackArr","eventName","reverse","Event","trigger","result","renderer","__apiStruct","__arrayProto","Array","prototype","context","ctxSettings","mixed","jq","tables","_toSettings","selector","opts","Api","any","count","ctx","iterator","alwaysNew","items","item","apiInst","_selector_row_indexes","apiSelector","lastIndexOf","pluck","pop","reduce","reduceRight","shift","to$","toJQuery","unshift","scope","__dt_wrapper","struct","methodScoping","struc","methodExt","propExt","register","method","heir","registerPlural","pluralName","singularName","__table_selector","paging","info","recordsDisplay","serverSide","__reload","one","abort","resetPaging","_selector_run","selectFn","res","selectorType","_selector_opts","_selector_first","inst","displayFiltered","displayFilteredMap","sel","selInt","cellIdx","closest","rowObj","__row_selector","hash","thatIdx","loopRow","loopCells","newRows","modRows","__details_remove","_details","_detailsShow","__details_display","insertAfter","__details_events","off","drawEvent","_child_obj","klass","created","__details_add","_child_mth","__re_column_selector","__columnData","r1","r2","names","visColumns","jqResult","__column_selector","calc","__setColumnVis","rowSelector","columnSelector","allCells","fnSelector","__cell_selector","set","caseInsen","versionCheck","version","iThis","iThat","aThis","aThat","isDataTable","fnIsDataTable","get","is","foot","fnTables","camelToHungarian","jqRows","orig","jqTable","jqTbody","jqWrapper","removedMethod","arg1","arg2","arg3","arg4","token","plural","resolved","bScrollCollapse","toFormat","JSON","parse","sessionStorage","localStorage","getItem","location","setItem","stringify","oPaginate","sFirst","sLast","sNext","sPrevious","sScrollXInner","sScrollY","aoRowCallback","aoHeaderCallback","aoFooterCallback","aoRowCreatedCallback","aoPreDrawCallback","aoInitComplete","aoStateSaveParams","aoStateLoadParams","aoStateLoaded","aoStateSave","aoStateLoad","aoServerParams","aoDestroyCallback","paginate","min","oPlugins","builder","pageButton","oJUIClasses","sVersion","afnFiltering","aTypes","ofnSearch","oSort","afnSortData","oStdClasses","oPagination","sPageButton","sPageButtonActive","sPageButtonDisabled","sSortAsc","sSortDesc","sSortJUIAsc","sSortJUIDesc","sSortJUIWrapper","sSortIcon","extPagination","_numbers","numbers","numbers_length","half","DT_el","simple","full","simple_numbers","full_numbers","first_last_numbers","btnDisplay","btnClass","activeEl","aria","counter","attach","container","clickHandler","aria-label","data-dt-idx","tabindex","focus","parsed","string","__numericReplace","decimalPlace","re1","re2","Infinity","num-fmt","html-num","html-num-fmt","date-pre","ts","html-pre","string-pre","string-asc","string-desc","jqueryui","__htmlEscapeEntities","number","thousands","precision","prefix","postfix","negative","flo","toFixed","abs","intPart","floatPart","_fnNodeToDataIndex","_fnNodeToColumnIndex","_fnCalculateEnd","dataTableSettings","dataTableExt","dom","bootstrap","currentTarget","_infoTimer","_instCounter","_buttonCounter","_dtButtons","c","listenKeys","namespace","_constructor","_action","_nodeToButton","conf","active","flag","jqNode","toggleClass","base","_expandButton","_draw","disable","disabled","buttonInsts","enable","_node","processing","_nodeToHost","_removeKey","buttonLiner","collection","linerTag","inCollection","opt","dtSettings","_buttons","character","String","fromCharCode","_keypress","_addKey","inserter","attachPoint","_resolveExtends","built","_buildButton","collectionDom","_collection","buttonDom","linerDom","available","triggerHandler","liner","enabled","titleAttr","buttonContainer","_buttonsHandled","run","click","altKey","ctrlKey","metaKey","recurse","toConfObject","loop","objArray","originalClassName","postfixButtons","prefixButtons","background","fade","insertPoint","fadeIn","fadeOut","instanceSelector","group","v","process","buttonSelector","insts","nodeBuilder","baseIdx","indexes","tabIndex","collectionParent","parents","hostPosition","multiLevel","lastChild","collectionTitle","collectionLayout","outerHeight","tableBottom","listBottom","bottomOverflow","listTop","tableTop","topOverflow","dropup","rightAlignClassName","listRight","tableRight","listOffsetRight","backgroundClassName","back","addBack","autoClose","aria-haspopup","copy","copyHtml5","copyFlash","csv","csvHtml5","csvFlash","excel","excelHtml5","excelFlash","pdf","pdfHtml5","pdfFlash","pageLength","lengthMenu","vals","-1","buttonGroup","_groupSelector","groupSelector","message","_exportData","filename","_filename","_title","_message","extension","_stringOrFunction","option","side","_exportTextarea","inOpts","modifier","orthogonal","stripHtml","stripNewlines","format","strip","customizeData","selected","rowIndexes","selectedCells","cellNodes","cellCounter","colvis","columnText","columnsToggle","columnToggle","columnsVisibility","visibility","columnVisibility","_columnText","curr","details","mapping","colvisRestore","_visOriginal","every","colReorder","transpose","colvisGroup","ZeroClipboard_TableTools","clients","moviePath","nextId","thingy","getElementById","setMoviePath","path","dispatch","client","receiveEvent","getDOMObjectPosition","offsetLeft","offsetTop","offsetParent","Client","elem","handlers","movieId","glue","ready","movie","clipText","fileName","handCursorEnabled","cssEffects","sized","sheetName","domElement","zIndex","box","getHTML","positionElement","flash","flashvars","reposition","clearText","appendText","newText","setText","setFileName","setSheetData","setAction","addEventListener","func","setHandCursor","setCSSEffects","self","recoverActive","hasFlash","fo","ActiveXObject","mimeTypes","enabledPlugin","_setText","parts","_newLine","newline","newLine","boundary","fieldBoundary","separator","fieldSeparator","reBoundary","escapeChar","flashButton","swfPath","_fromFlash","_glue","_flash","createCellPos","ordA","charCodeAt","ordZ","_createNode","doc","tempNode","createTextNode","_excelColWidth","lineSplit","point","_ieExcel","_serialiser","XMLSerializer","serializeToString","xml","excelStrings","_rels/.rels","xl/_rels/workbook.xml.rels","[Content_Types].xml","xl/workbook.xml","xl/worksheets/sheet1.xml","xl/styles.xml","_excelSpecials","fmt","output","1","currentRow","rowPos","rels","parseXML","relsGet","xlsx","_rels",".rels","xl","workbook.xml.rels","workbook.xml","styles.xml","worksheets","sheet1.xml","cellId","createEmptyCells","special","_sheetname","mergeCells","colspan","ref","ie","customWidth","_xlsxToStrings","worksheet","attrs","attributes","attrName","attrValue","nodeValue","createAttribute","setAttributeNode","totalWidth","ratios","colWidth","orientation","pageSize","fnInvertKeyValues","aIn","aRet","fnArraySwitch","aArray","iFrom","iTo","mStore","fnDomSwitch","nParent","anTags","nStore","fnColReorder","drop","invalidateRows","iCols","attrMap","aiMapping","aiInvertMapping","iVisibleIndex","iInsertBeforeIndex","invalidate","from","to","ColReorder","_colReorder","fixedRight","reorderCallback","mouse","startX","startY","offsetX","offsetY","targetIndex","fromIndex","aoTargets","drag","pointer","bEnable","_fnConstruct","fnEnable","fnDisable","fnReset","_fnOrderColumns","fnOrder","fnGetCurrentOrder","original","_ColReorder_iOrigCol","fnTranspose","iFixedColumns","iFixedColumnsLeft","iFixedColumnsRight","fnReorderCallback","_fnMouseListener","oS","_fnStateSave","aiOrder","resort","bDone","_fnSetColumnIndexes","currIndex","oState","iOrigColumn","aSearchCopy","abVisCols","stateColumnsCopy","_fnMouseDown","_fnCursorPosition","_fnRegions","_fnMouseMove","_fnMouseUp","pow","_fnCreateDragNode","bSet","lastToIndex","toIndex","bRealtime","iToPoint","scrolling","origCell","origTr","origThead","origTable","cloneCell","originalEvent","touches","dtInit","oColReorder","sFeature","current","responsive","dtPrivateSettings","oldWindowWidth","_responsive","_resize","_setColumnVis","breakpoints","_classLogic","_resizeAuto","_detailsInit","_timer","_redrawChildren","rowIds","_detailsDisplay","_columnsVisiblity","breakpoint","priority","auto","minWidth","includeIn","requiredWidth","bar","widthAvailable","usedWidth","control","showControl","never","responsivePriority","dataPriority","operator","matched","_find","classNames","brokenPoint","re","_detailsObj","_tabIndexes","targetIdx","hidden","columnIndex","rowIndex","oldVis","columnsVis","collapsedClass","isEmptyObject","_childNodeStore","_childNodesRestore","clonedTable","clonedHeader","clonedBody","clonedFooter","footerCells","inserted","showHide","removeData","childRow","childRowImmediate","hasHidden","stopPropagation","store","parentChildren","listHiddenNodes","ul","found","_childNodes","listHidden","tableAll","tableClass","li","cellRange","columnIndexes","selectColumns","record","selectRows","deselect","disableMouseSelection","_select","enableMouseSelection","matchSelection","getSelection","selection","anchorNode","wrapperClass","event","eventTrigger","isDefaultPrevented","cellIndex","typeSelect","_select_lastCell","blurable","0","exisiting","rowColumnRange","idx1","idx2","isSelected","setStyle","_select_selected","_selected_cells","apiRegister","apiRegisterPlural","namespacedEvents","_eventNamespace","_select_init","ids","cellSelected","_buttonNamespace","limitTo","selectedSingle","selectAll","selectNone","lc","jszip","pdfmake","_jsZip","JSZip","_pdfMake","pdfMake","m_ake","_saveAs","view","get_URL","URL","webkitURL","save_link","createElementNS","can_use_save_link","is_safari","HTMLElement","safari","is_chrome_ios","throw_outside","ex","setImmediate","revoke","file","revokeObjectURL","auto_bom","blob","Blob","FileSaver","no_auto_bom","object_url","filesaver","dispatch_all","event_types","INIT","createObjectURL","download","MouseEvent","dispatchEvent","DONE","FileReader","reader","onloadend","popup","readAsDataURL","opened","fs_error","FS_proto","msSaveOrOpenBlob","WRITING","onwritestart","onprogress","onwrite","onabort","onerror","onwriteend","content","fileSave","_isDuffSafari","hiddenDiv","textarea","queryCommandSupported","successful","execCommand","bom","charset","characterSet","dataStartRow","dataEndRow","getXml","originalContent","xml:space","before","workbook","autoFilter","localSheetId","zip","zipConfig","mimeType","_addToZip","newDir","folder","generateAsync","then","generate","pageOrientation","headerRows","layout","styles","tableHeader","bold","fontSize","color","fillColor","alignment","tableBodyEven","tableBodyOdd","tableFooter","defaultStyle","createPdf"],"mappings":"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","file":"static/js/0.abca81c2.chunk.js","sourcesContent":["/*!\n * Print button for Buttons and DataTables.\n * 2016 SpryMedia Ltd - datatables.net/license\n */\n(function (factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD\n    define(['jquery', 'datatables.net', 'datatables.net-buttons'], function ($) {\n      return factory($, window, document);\n    });\n  } else if (typeof exports === 'object') {\n    // CommonJS\n    module.exports = function (root, $) {\n      if (!root) {\n        root = window;\n      }\n\n      if (!$ || !$.fn.dataTable) {\n        $ = require('datatables.net')(root, $).$;\n      }\n\n      if (!$.fn.dataTable.Buttons) {\n        require('datatables.net-buttons')(root, $);\n      }\n\n      return factory($, root, root.document);\n    };\n  } else {\n    // Browser\n    factory(jQuery, window, document);\n  }\n})(function ($, window, document, undefined) {\n  'use strict';\n\n  var DataTable = $.fn.dataTable;\n\n  var _link = document.createElement('a');\n  /**\n   * Clone link and style tags, taking into account the need to change the source\n   * path.\n   *\n   * @param  {node}     el Element to convert\n   */\n\n\n  var _styleToAbs = function _styleToAbs(el) {\n    var url;\n    var clone = $(el).clone()[0];\n    var linkHost;\n\n    if (clone.nodeName.toLowerCase() === 'link') {\n      clone.href = _relToAbs(clone.href);\n    }\n\n    return clone.outerHTML;\n  };\n  /**\n   * Convert a URL from a relative to an absolute address so it will work\n   * correctly in the popup window which has no base URL.\n   *\n   * @param  {string} href URL\n   */\n\n\n  var _relToAbs = function _relToAbs(href) {\n    // Assign to a link on the original page so the browser will do all the\n    // hard work of figuring out where the file actually is\n    _link.href = href;\n    var linkHost = _link.host; // IE doesn't have a trailing slash on the host\n    // Chrome has it on the pathname\n\n    if (linkHost.indexOf('/') === -1 && _link.pathname.indexOf('/') !== 0) {\n      linkHost += '/';\n    }\n\n    return _link.protocol + \"//\" + linkHost + _link.pathname + _link.search;\n  };\n\n  DataTable.ext.buttons.print = {\n    className: 'buttons-print',\n    text: function text(dt) {\n      return dt.i18n('buttons.print', 'Print');\n    },\n    action: function action(e, dt, button, config) {\n      var data = dt.buttons.exportData($.extend({\n        decodeEntities: false\n      }, config.exportOptions) // XSS protection\n      );\n      var exportInfo = dt.buttons.exportInfo(config);\n      var columnClasses = dt.columns(config.exportOptions.columns).flatten().map(function (idx) {\n        return dt.settings()[0].aoColumns[dt.column(idx).index()].sClass;\n      }).toArray();\n\n      var addRow = function addRow(d, tag) {\n        var str = '<tr>';\n\n        for (var i = 0, ien = d.length; i < ien; i++) {\n          // null and undefined aren't useful in the print output\n          var dataOut = d[i] === null || d[i] === undefined ? '' : d[i];\n          var classAttr = columnClasses[i] ? 'class=\"' + columnClasses[i] + '\"' : '';\n          str += '<' + tag + ' ' + classAttr + '>' + dataOut + '</' + tag + '>';\n        }\n\n        return str + '</tr>';\n      }; // Construct a table for printing\n\n\n      var html = '<table class=\"' + dt.table().node().className + '\">';\n\n      if (config.header) {\n        html += '<thead>' + addRow(data.header, 'th') + '</thead>';\n      }\n\n      html += '<tbody>';\n\n      for (var i = 0, ien = data.body.length; i < ien; i++) {\n        html += addRow(data.body[i], 'td');\n      }\n\n      html += '</tbody>';\n\n      if (config.footer && data.footer) {\n        html += '<tfoot>' + addRow(data.footer, 'th') + '</tfoot>';\n      }\n\n      html += '</table>'; // Open a new window for the printable table\n\n      var win = window.open('', '');\n      win.document.close(); // Inject the title and also a copy of the style and link tags from this\n      // document so the table can retain its base styling. Note that we have\n      // to use string manipulation as IE won't allow elements to be created\n      // in the host document and then appended to the new window.\n\n      var head = '<title>' + exportInfo.title + '</title>';\n      $('style, link').each(function () {\n        head += _styleToAbs(this);\n      });\n\n      try {\n        win.document.head.innerHTML = head; // Work around for Edge\n      } catch (e) {\n        $(win.document.head).html(head); // Old IE\n      } // Inject the table and other surrounding information\n\n\n      win.document.body.innerHTML = '<h1>' + exportInfo.title + '</h1>' + '<div>' + (exportInfo.messageTop || '') + '</div>' + html + '<div>' + (exportInfo.messageBottom || '') + '</div>';\n      $(win.document.body).addClass('dt-print-view');\n      $('img', win.document.body).each(function (i, img) {\n        img.setAttribute('src', _relToAbs(img.getAttribute('src')));\n      });\n\n      if (config.customize) {\n        config.customize(win, config, dt);\n      } // Allow stylesheets time to load\n\n\n      var autoPrint = function autoPrint() {\n        if (config.autoPrint) {\n          win.print(); // blocking - so close will not\n\n          win.close(); // execute until this is done\n        }\n      };\n\n      if (navigator.userAgent.match(/Trident\\/\\d.\\d/)) {\n        // IE needs to call this without a setTimeout\n        autoPrint();\n      } else {\n        win.setTimeout(autoPrint, 1000);\n      }\n    },\n    title: '*',\n    messageTop: '*',\n    messageBottom: '*',\n    exportOptions: {},\n    header: true,\n    footer: false,\n    autoPrint: true,\n    customize: null\n  };\n  return DataTable.Buttons;\n});","/*! Bootstrap integration for DataTables' Responsive\n * ©2015-2016 SpryMedia Ltd - datatables.net/license\n */\n(function (factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD\n    define(['jquery', 'datatables.net-bs', 'datatables.net-responsive'], function ($) {\n      return factory($, window, document);\n    });\n  } else if (typeof exports === 'object') {\n    // CommonJS\n    module.exports = function (root, $) {\n      if (!root) {\n        root = window;\n      }\n\n      if (!$ || !$.fn.dataTable) {\n        $ = require('datatables.net-bs')(root, $).$;\n      }\n\n      if (!$.fn.dataTable.Responsive) {\n        require('datatables.net-responsive')(root, $);\n      }\n\n      return factory($, root, root.document);\n    };\n  } else {\n    // Browser\n    factory(jQuery, window, document);\n  }\n})(function ($, window, document, undefined) {\n  'use strict';\n\n  var DataTable = $.fn.dataTable;\n  var _display = DataTable.Responsive.display;\n  var _original = _display.modal;\n\n  var _modal = $('<div class=\"modal fade dtr-bs-modal\" role=\"dialog\">' + '<div class=\"modal-dialog\" role=\"document\">' + '<div class=\"modal-content\">' + '<div class=\"modal-header\">' + '<button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\"><span aria-hidden=\"true\">&times;</span></button>' + '</div>' + '<div class=\"modal-body\"/>' + '</div>' + '</div>' + '</div>');\n\n  _display.modal = function (options) {\n    return function (row, update, render) {\n      if (!$.fn.modal) {\n        _original(row, update, render);\n      } else {\n        if (!update) {\n          if (options && options.header) {\n            var header = _modal.find('div.modal-header');\n\n            var button = header.find('button').detach();\n            header.empty().append('<h4 class=\"modal-title\">' + options.header(row) + '</h4>').prepend(button);\n          }\n\n          _modal.find('div.modal-body').empty().append(render());\n\n          _modal.appendTo('body').modal();\n        }\n      }\n    };\n  };\n\n  return DataTable.Responsive;\n});","/*! Bootstrap 3 styling wrapper for Select\n * ©2018 SpryMedia Ltd - datatables.net/license\n */\n(function (factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD\n    define(['jquery', 'datatables.net-bs', 'datatables.net-select'], function ($) {\n      return factory($, window, document);\n    });\n  } else if (typeof exports === 'object') {\n    // CommonJS\n    module.exports = function (root, $) {\n      if (!root) {\n        root = window;\n      }\n\n      if (!$ || !$.fn.dataTable) {\n        $ = require('datatables.net-bs')(root, $).$;\n      }\n\n      if (!$.fn.dataTable.select) {\n        require('datatables.net-select')(root, $);\n      }\n\n      return factory($, root, root.document);\n    };\n  } else {\n    // Browser\n    factory(jQuery, window, document);\n  }\n})(function ($, window, document, undefined) {\n  return $.fn.dataTable;\n});","/*! DataTables 1.10.19\n * ©2008-2018 SpryMedia Ltd - datatables.net/license\n */\n\n/**\n * @summary     DataTables\n * @description Paginate, search and order HTML tables\n * @version     1.10.19\n * @file        jquery.dataTables.js\n * @author      SpryMedia Ltd\n * @contact     www.datatables.net\n * @copyright   Copyright 2008-2018 SpryMedia Ltd.\n *\n * This source file is free software, available under the following license:\n *   MIT license - http://datatables.net/license\n *\n * This source file is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n * or FITNESS FOR A PARTICULAR PURPOSE. See the license files for details.\n *\n * For details please refer to: http://www.datatables.net\n */\n\n/*jslint evil: true, undef: true, browser: true */\n\n/*globals $,require,jQuery,define,_selector_run,_selector_opts,_selector_first,_selector_row_indexes,_ext,_Api,_api_register,_api_registerPlural,_re_new_lines,_re_html,_re_formatted_numeric,_re_escape_regex,_empty,_intVal,_numToDecimal,_isNumber,_isHtml,_htmlNumeric,_pluck,_pluck_order,_range,_stripHtml,_unique,_fnBuildAjax,_fnAjaxUpdate,_fnAjaxParameters,_fnAjaxUpdateDraw,_fnAjaxDataSrc,_fnAddColumn,_fnColumnOptions,_fnAdjustColumnSizing,_fnVisibleToColumnIndex,_fnColumnIndexToVisible,_fnVisbleColumns,_fnGetColumns,_fnColumnTypes,_fnApplyColumnDefs,_fnHungarianMap,_fnCamelToHungarian,_fnLanguageCompat,_fnBrowserDetect,_fnAddData,_fnAddTr,_fnNodeToDataIndex,_fnNodeToColumnIndex,_fnGetCellData,_fnSetCellData,_fnSplitObjNotation,_fnGetObjectDataFn,_fnSetObjectDataFn,_fnGetDataMaster,_fnClearTable,_fnDeleteIndex,_fnInvalidate,_fnGetRowElements,_fnCreateTr,_fnBuildHead,_fnDrawHead,_fnDraw,_fnReDraw,_fnAddOptionsHtml,_fnDetectHeader,_fnGetUniqueThs,_fnFeatureHtmlFilter,_fnFilterComplete,_fnFilterCustom,_fnFilterColumn,_fnFilter,_fnFilterCreateSearch,_fnEscapeRegex,_fnFilterData,_fnFeatureHtmlInfo,_fnUpdateInfo,_fnInfoMacros,_fnInitialise,_fnInitComplete,_fnLengthChange,_fnFeatureHtmlLength,_fnFeatureHtmlPaginate,_fnPageChange,_fnFeatureHtmlProcessing,_fnProcessingDisplay,_fnFeatureHtmlTable,_fnScrollDraw,_fnApplyToChildren,_fnCalculateColumnWidths,_fnThrottle,_fnConvertToWidth,_fnGetWidestNode,_fnGetMaxLenString,_fnStringToCss,_fnSortFlatten,_fnSort,_fnSortAria,_fnSortListener,_fnSortAttachListener,_fnSortingClasses,_fnSortData,_fnSaveState,_fnLoadState,_fnSettingsFromNode,_fnLog,_fnMap,_fnBindAction,_fnCallbackReg,_fnCallbackFire,_fnLengthOverflow,_fnRenderer,_fnDataSource,_fnRowAttributes*/\n(function (factory) {\n  \"use strict\";\n\n  if (typeof define === 'function' && define.amd) {\n    // AMD\n    define(['jquery'], function ($) {\n      return factory($, window, document);\n    });\n  } else if (typeof exports === 'object') {\n    // CommonJS\n    module.exports = function (root, $) {\n      if (!root) {\n        // CommonJS environments without a window global must pass a\n        // root. This will give an error otherwise\n        root = window;\n      }\n\n      if (!$) {\n        $ = typeof window !== 'undefined' ? // jQuery's factory checks for a global window\n        require('jquery') : require('jquery')(root);\n      }\n\n      return factory($, root, root.document);\n    };\n  } else {\n    // Browser\n    factory(jQuery, window, document);\n  }\n})(function ($, window, document, undefined) {\n  \"use strict\";\n  /**\n   * DataTables is a plug-in for the jQuery Javascript library. It is a highly\n   * flexible tool, based upon the foundations of progressive enhancement,\n   * which will add advanced interaction controls to any HTML table. For a\n   * full list of features please refer to\n   * [DataTables.net](href=\"http://datatables.net).\n   *\n   * Note that the `DataTable` object is not a global variable but is aliased\n   * to `jQuery.fn.DataTable` and `jQuery.fn.dataTable` through which it may\n   * be  accessed.\n   *\n   *  @class\n   *  @param {object} [init={}] Configuration object for DataTables. Options\n   *    are defined by {@link DataTable.defaults}\n   *  @requires jQuery 1.7+\n   *\n   *  @example\n   *    // Basic initialisation\n   *    $(document).ready( function {\n   *      $('#example').dataTable();\n   *    } );\n   *\n   *  @example\n   *    // Initialisation with configuration options - in this case, disable\n   *    // pagination and sorting.\n   *    $(document).ready( function {\n   *      $('#example').dataTable( {\n   *        \"paginate\": false,\n   *        \"sort\": false\n   *      } );\n   *    } );\n   */\n\n  var DataTable = function DataTable(options) {\n    /**\n     * Perform a jQuery selector action on the table's TR elements (from the tbody) and\n     * return the resulting jQuery object.\n     *  @param {string|node|jQuery} sSelector jQuery selector or node collection to act on\n     *  @param {object} [oOpts] Optional parameters for modifying the rows to be included\n     *  @param {string} [oOpts.filter=none] Select TR elements that meet the current filter\n     *    criterion (\"applied\") or all TR elements (i.e. no filter).\n     *  @param {string} [oOpts.order=current] Order of the TR elements in the processed array.\n     *    Can be either 'current', whereby the current sorting of the table is used, or\n     *    'original' whereby the original order the data was read into the table is used.\n     *  @param {string} [oOpts.page=all] Limit the selection to the currently displayed page\n     *    (\"current\") or not (\"all\"). If 'current' is given, then order is assumed to be\n     *    'current' and filter is 'applied', regardless of what they might be given as.\n     *  @returns {object} jQuery object, filtered by the given selector.\n     *  @dtopt API\n     *  @deprecated Since v1.10\n     *\n     *  @example\n     *    $(document).ready(function() {\n     *      var oTable = $('#example').dataTable();\n     *\n     *      // Highlight every second row\n     *      oTable.$('tr:odd').css('backgroundColor', 'blue');\n     *    } );\n     *\n     *  @example\n     *    $(document).ready(function() {\n     *      var oTable = $('#example').dataTable();\n     *\n     *      // Filter to rows with 'Webkit' in them, add a background colour and then\n     *      // remove the filter, thus highlighting the 'Webkit' rows only.\n     *      oTable.fnFilter('Webkit');\n     *      oTable.$('tr', {\"search\": \"applied\"}).css('backgroundColor', 'blue');\n     *      oTable.fnFilter('');\n     *    } );\n     */\n    this.$ = function (sSelector, oOpts) {\n      return this.api(true).$(sSelector, oOpts);\n    };\n    /**\n     * Almost identical to $ in operation, but in this case returns the data for the matched\n     * rows - as such, the jQuery selector used should match TR row nodes or TD/TH cell nodes\n     * rather than any descendants, so the data can be obtained for the row/cell. If matching\n     * rows are found, the data returned is the original data array/object that was used to\n     * create the row (or a generated array if from a DOM source).\n     *\n     * This method is often useful in-combination with $ where both functions are given the\n     * same parameters and the array indexes will match identically.\n     *  @param {string|node|jQuery} sSelector jQuery selector or node collection to act on\n     *  @param {object} [oOpts] Optional parameters for modifying the rows to be included\n     *  @param {string} [oOpts.filter=none] Select elements that meet the current filter\n     *    criterion (\"applied\") or all elements (i.e. no filter).\n     *  @param {string} [oOpts.order=current] Order of the data in the processed array.\n     *    Can be either 'current', whereby the current sorting of the table is used, or\n     *    'original' whereby the original order the data was read into the table is used.\n     *  @param {string} [oOpts.page=all] Limit the selection to the currently displayed page\n     *    (\"current\") or not (\"all\"). If 'current' is given, then order is assumed to be\n     *    'current' and filter is 'applied', regardless of what they might be given as.\n     *  @returns {array} Data for the matched elements. If any elements, as a result of the\n     *    selector, were not TR, TD or TH elements in the DataTable, they will have a null\n     *    entry in the array.\n     *  @dtopt API\n     *  @deprecated Since v1.10\n     *\n     *  @example\n     *    $(document).ready(function() {\n     *      var oTable = $('#example').dataTable();\n     *\n     *      // Get the data from the first row in the table\n     *      var data = oTable._('tr:first');\n     *\n     *      // Do something useful with the data\n     *      alert( \"First cell is: \"+data[0] );\n     *    } );\n     *\n     *  @example\n     *    $(document).ready(function() {\n     *      var oTable = $('#example').dataTable();\n     *\n     *      // Filter to 'Webkit' and get all data for\n     *      oTable.fnFilter('Webkit');\n     *      var data = oTable._('tr', {\"search\": \"applied\"});\n     *\n     *      // Do something with the data\n     *      alert( data.length+\" rows matched the search\" );\n     *    } );\n     */\n\n\n    this._ = function (sSelector, oOpts) {\n      return this.api(true).rows(sSelector, oOpts).data();\n    };\n    /**\n     * Create a DataTables Api instance, with the currently selected tables for\n     * the Api's context.\n     * @param {boolean} [traditional=false] Set the API instance's context to be\n     *   only the table referred to by the `DataTable.ext.iApiIndex` option, as was\n     *   used in the API presented by DataTables 1.9- (i.e. the traditional mode),\n     *   or if all tables captured in the jQuery object should be used.\n     * @return {DataTables.Api}\n     */\n\n\n    this.api = function (traditional) {\n      return traditional ? new _Api2(_fnSettingsFromNode(this[_ext.iApiIndex])) : new _Api2(this);\n    };\n    /**\n     * Add a single new row or multiple rows of data to the table. Please note\n     * that this is suitable for client-side processing only - if you are using\n     * server-side processing (i.e. \"bServerSide\": true), then to add data, you\n     * must add it to the data source, i.e. the server-side, through an Ajax call.\n     *  @param {array|object} data The data to be added to the table. This can be:\n     *    <ul>\n     *      <li>1D array of data - add a single row with the data provided</li>\n     *      <li>2D array of arrays - add multiple rows in a single call</li>\n     *      <li>object - data object when using <i>mData</i></li>\n     *      <li>array of objects - multiple data objects when using <i>mData</i></li>\n     *    </ul>\n     *  @param {bool} [redraw=true] redraw the table or not\n     *  @returns {array} An array of integers, representing the list of indexes in\n     *    <i>aoData</i> ({@link DataTable.models.oSettings}) that have been added to\n     *    the table.\n     *  @dtopt API\n     *  @deprecated Since v1.10\n     *\n     *  @example\n     *    // Global var for counter\n     *    var giCount = 2;\n     *\n     *    $(document).ready(function() {\n     *      $('#example').dataTable();\n     *    } );\n     *\n     *    function fnClickAddRow() {\n     *      $('#example').dataTable().fnAddData( [\n     *        giCount+\".1\",\n     *        giCount+\".2\",\n     *        giCount+\".3\",\n     *        giCount+\".4\" ]\n     *      );\n     *\n     *      giCount++;\n     *    }\n     */\n\n\n    this.fnAddData = function (data, redraw) {\n      var api = this.api(true);\n      /* Check if we want to add multiple rows or not */\n\n      var rows = $.isArray(data) && ($.isArray(data[0]) || $.isPlainObject(data[0])) ? api.rows.add(data) : api.row.add(data);\n\n      if (redraw === undefined || redraw) {\n        api.draw();\n      }\n\n      return rows.flatten().toArray();\n    };\n    /**\n     * This function will make DataTables recalculate the column sizes, based on the data\n     * contained in the table and the sizes applied to the columns (in the DOM, CSS or\n     * through the sWidth parameter). This can be useful when the width of the table's\n     * parent element changes (for example a window resize).\n     *  @param {boolean} [bRedraw=true] Redraw the table or not, you will typically want to\n     *  @dtopt API\n     *  @deprecated Since v1.10\n     *\n     *  @example\n     *    $(document).ready(function() {\n     *      var oTable = $('#example').dataTable( {\n     *        \"sScrollY\": \"200px\",\n     *        \"bPaginate\": false\n     *      } );\n     *\n     *      $(window).on('resize', function () {\n     *        oTable.fnAdjustColumnSizing();\n     *      } );\n     *    } );\n     */\n\n\n    this.fnAdjustColumnSizing = function (bRedraw) {\n      var api = this.api(true).columns.adjust();\n      var settings = api.settings()[0];\n      var scroll = settings.oScroll;\n\n      if (bRedraw === undefined || bRedraw) {\n        api.draw(false);\n      } else if (scroll.sX !== \"\" || scroll.sY !== \"\") {\n        /* If not redrawing, but scrolling, we want to apply the new column sizes anyway */\n        _fnScrollDraw(settings);\n      }\n    };\n    /**\n     * Quickly and simply clear a table\n     *  @param {bool} [bRedraw=true] redraw the table or not\n     *  @dtopt API\n     *  @deprecated Since v1.10\n     *\n     *  @example\n     *    $(document).ready(function() {\n     *      var oTable = $('#example').dataTable();\n     *\n     *      // Immediately 'nuke' the current rows (perhaps waiting for an Ajax callback...)\n     *      oTable.fnClearTable();\n     *    } );\n     */\n\n\n    this.fnClearTable = function (bRedraw) {\n      var api = this.api(true).clear();\n\n      if (bRedraw === undefined || bRedraw) {\n        api.draw();\n      }\n    };\n    /**\n     * The exact opposite of 'opening' a row, this function will close any rows which\n     * are currently 'open'.\n     *  @param {node} nTr the table row to 'close'\n     *  @returns {int} 0 on success, or 1 if failed (can't find the row)\n     *  @dtopt API\n     *  @deprecated Since v1.10\n     *\n     *  @example\n     *    $(document).ready(function() {\n     *      var oTable;\n     *\n     *      // 'open' an information row when a row is clicked on\n     *      $('#example tbody tr').click( function () {\n     *        if ( oTable.fnIsOpen(this) ) {\n     *          oTable.fnClose( this );\n     *        } else {\n     *          oTable.fnOpen( this, \"Temporary row opened\", \"info_row\" );\n     *        }\n     *      } );\n     *\n     *      oTable = $('#example').dataTable();\n     *    } );\n     */\n\n\n    this.fnClose = function (nTr) {\n      this.api(true).row(nTr).child.hide();\n    };\n    /**\n     * Remove a row for the table\n     *  @param {mixed} target The index of the row from aoData to be deleted, or\n     *    the TR element you want to delete\n     *  @param {function|null} [callBack] Callback function\n     *  @param {bool} [redraw=true] Redraw the table or not\n     *  @returns {array} The row that was deleted\n     *  @dtopt API\n     *  @deprecated Since v1.10\n     *\n     *  @example\n     *    $(document).ready(function() {\n     *      var oTable = $('#example').dataTable();\n     *\n     *      // Immediately remove the first row\n     *      oTable.fnDeleteRow( 0 );\n     *    } );\n     */\n\n\n    this.fnDeleteRow = function (target, callback, redraw) {\n      var api = this.api(true);\n      var rows = api.rows(target);\n      var settings = rows.settings()[0];\n      var data = settings.aoData[rows[0][0]];\n      rows.remove();\n\n      if (callback) {\n        callback.call(this, settings, data);\n      }\n\n      if (redraw === undefined || redraw) {\n        api.draw();\n      }\n\n      return data;\n    };\n    /**\n     * Restore the table to it's original state in the DOM by removing all of DataTables\n     * enhancements, alterations to the DOM structure of the table and event listeners.\n     *  @param {boolean} [remove=false] Completely remove the table from the DOM\n     *  @dtopt API\n     *  @deprecated Since v1.10\n     *\n     *  @example\n     *    $(document).ready(function() {\n     *      // This example is fairly pointless in reality, but shows how fnDestroy can be used\n     *      var oTable = $('#example').dataTable();\n     *      oTable.fnDestroy();\n     *    } );\n     */\n\n\n    this.fnDestroy = function (remove) {\n      this.api(true).destroy(remove);\n    };\n    /**\n     * Redraw the table\n     *  @param {bool} [complete=true] Re-filter and resort (if enabled) the table before the draw.\n     *  @dtopt API\n     *  @deprecated Since v1.10\n     *\n     *  @example\n     *    $(document).ready(function() {\n     *      var oTable = $('#example').dataTable();\n     *\n     *      // Re-draw the table - you wouldn't want to do it here, but it's an example :-)\n     *      oTable.fnDraw();\n     *    } );\n     */\n\n\n    this.fnDraw = function (complete) {\n      // Note that this isn't an exact match to the old call to _fnDraw - it takes\n      // into account the new data, but can hold position.\n      this.api(true).draw(complete);\n    };\n    /**\n     * Filter the input based on data\n     *  @param {string} sInput String to filter the table on\n     *  @param {int|null} [iColumn] Column to limit filtering to\n     *  @param {bool} [bRegex=false] Treat as regular expression or not\n     *  @param {bool} [bSmart=true] Perform smart filtering or not\n     *  @param {bool} [bShowGlobal=true] Show the input global filter in it's input box(es)\n     *  @param {bool} [bCaseInsensitive=true] Do case-insensitive matching (true) or not (false)\n     *  @dtopt API\n     *  @deprecated Since v1.10\n     *\n     *  @example\n     *    $(document).ready(function() {\n     *      var oTable = $('#example').dataTable();\n     *\n     *      // Sometime later - filter...\n     *      oTable.fnFilter( 'test string' );\n     *    } );\n     */\n\n\n    this.fnFilter = function (sInput, iColumn, bRegex, bSmart, bShowGlobal, bCaseInsensitive) {\n      var api = this.api(true);\n\n      if (iColumn === null || iColumn === undefined) {\n        api.search(sInput, bRegex, bSmart, bCaseInsensitive);\n      } else {\n        api.column(iColumn).search(sInput, bRegex, bSmart, bCaseInsensitive);\n      }\n\n      api.draw();\n    };\n    /**\n     * Get the data for the whole table, an individual row or an individual cell based on the\n     * provided parameters.\n     *  @param {int|node} [src] A TR row node, TD/TH cell node or an integer. If given as\n     *    a TR node then the data source for the whole row will be returned. If given as a\n     *    TD/TH cell node then iCol will be automatically calculated and the data for the\n     *    cell returned. If given as an integer, then this is treated as the aoData internal\n     *    data index for the row (see fnGetPosition) and the data for that row used.\n     *  @param {int} [col] Optional column index that you want the data of.\n     *  @returns {array|object|string} If mRow is undefined, then the data for all rows is\n     *    returned. If mRow is defined, just data for that row, and is iCol is\n     *    defined, only data for the designated cell is returned.\n     *  @dtopt API\n     *  @deprecated Since v1.10\n     *\n     *  @example\n     *    // Row data\n     *    $(document).ready(function() {\n     *      oTable = $('#example').dataTable();\n     *\n     *      oTable.$('tr').click( function () {\n     *        var data = oTable.fnGetData( this );\n     *        // ... do something with the array / object of data for the row\n     *      } );\n     *    } );\n     *\n     *  @example\n     *    // Individual cell data\n     *    $(document).ready(function() {\n     *      oTable = $('#example').dataTable();\n     *\n     *      oTable.$('td').click( function () {\n     *        var sData = oTable.fnGetData( this );\n     *        alert( 'The cell clicked on had the value of '+sData );\n     *      } );\n     *    } );\n     */\n\n\n    this.fnGetData = function (src, col) {\n      var api = this.api(true);\n\n      if (src !== undefined) {\n        var type = src.nodeName ? src.nodeName.toLowerCase() : '';\n        return col !== undefined || type == 'td' || type == 'th' ? api.cell(src, col).data() : api.row(src).data() || null;\n      }\n\n      return api.data().toArray();\n    };\n    /**\n     * Get an array of the TR nodes that are used in the table's body. Note that you will\n     * typically want to use the '$' API method in preference to this as it is more\n     * flexible.\n     *  @param {int} [iRow] Optional row index for the TR element you want\n     *  @returns {array|node} If iRow is undefined, returns an array of all TR elements\n     *    in the table's body, or iRow is defined, just the TR element requested.\n     *  @dtopt API\n     *  @deprecated Since v1.10\n     *\n     *  @example\n     *    $(document).ready(function() {\n     *      var oTable = $('#example').dataTable();\n     *\n     *      // Get the nodes from the table\n     *      var nNodes = oTable.fnGetNodes( );\n     *    } );\n     */\n\n\n    this.fnGetNodes = function (iRow) {\n      var api = this.api(true);\n      return iRow !== undefined ? api.row(iRow).node() : api.rows().nodes().flatten().toArray();\n    };\n    /**\n     * Get the array indexes of a particular cell from it's DOM element\n     * and column index including hidden columns\n     *  @param {node} node this can either be a TR, TD or TH in the table's body\n     *  @returns {int} If nNode is given as a TR, then a single index is returned, or\n     *    if given as a cell, an array of [row index, column index (visible),\n     *    column index (all)] is given.\n     *  @dtopt API\n     *  @deprecated Since v1.10\n     *\n     *  @example\n     *    $(document).ready(function() {\n     *      $('#example tbody td').click( function () {\n     *        // Get the position of the current data from the node\n     *        var aPos = oTable.fnGetPosition( this );\n     *\n     *        // Get the data array for this row\n     *        var aData = oTable.fnGetData( aPos[0] );\n     *\n     *        // Update the data array and return the value\n     *        aData[ aPos[1] ] = 'clicked';\n     *        this.innerHTML = 'clicked';\n     *      } );\n     *\n     *      // Init DataTables\n     *      oTable = $('#example').dataTable();\n     *    } );\n     */\n\n\n    this.fnGetPosition = function (node) {\n      var api = this.api(true);\n      var nodeName = node.nodeName.toUpperCase();\n\n      if (nodeName == 'TR') {\n        return api.row(node).index();\n      } else if (nodeName == 'TD' || nodeName == 'TH') {\n        var cell = api.cell(node).index();\n        return [cell.row, cell.columnVisible, cell.column];\n      }\n\n      return null;\n    };\n    /**\n     * Check to see if a row is 'open' or not.\n     *  @param {node} nTr the table row to check\n     *  @returns {boolean} true if the row is currently open, false otherwise\n     *  @dtopt API\n     *  @deprecated Since v1.10\n     *\n     *  @example\n     *    $(document).ready(function() {\n     *      var oTable;\n     *\n     *      // 'open' an information row when a row is clicked on\n     *      $('#example tbody tr').click( function () {\n     *        if ( oTable.fnIsOpen(this) ) {\n     *          oTable.fnClose( this );\n     *        } else {\n     *          oTable.fnOpen( this, \"Temporary row opened\", \"info_row\" );\n     *        }\n     *      } );\n     *\n     *      oTable = $('#example').dataTable();\n     *    } );\n     */\n\n\n    this.fnIsOpen = function (nTr) {\n      return this.api(true).row(nTr).child.isShown();\n    };\n    /**\n     * This function will place a new row directly after a row which is currently\n     * on display on the page, with the HTML contents that is passed into the\n     * function. This can be used, for example, to ask for confirmation that a\n     * particular record should be deleted.\n     *  @param {node} nTr The table row to 'open'\n     *  @param {string|node|jQuery} mHtml The HTML to put into the row\n     *  @param {string} sClass Class to give the new TD cell\n     *  @returns {node} The row opened. Note that if the table row passed in as the\n     *    first parameter, is not found in the table, this method will silently\n     *    return.\n     *  @dtopt API\n     *  @deprecated Since v1.10\n     *\n     *  @example\n     *    $(document).ready(function() {\n     *      var oTable;\n     *\n     *      // 'open' an information row when a row is clicked on\n     *      $('#example tbody tr').click( function () {\n     *        if ( oTable.fnIsOpen(this) ) {\n     *          oTable.fnClose( this );\n     *        } else {\n     *          oTable.fnOpen( this, \"Temporary row opened\", \"info_row\" );\n     *        }\n     *      } );\n     *\n     *      oTable = $('#example').dataTable();\n     *    } );\n     */\n\n\n    this.fnOpen = function (nTr, mHtml, sClass) {\n      return this.api(true).row(nTr).child(mHtml, sClass).show().child()[0];\n    };\n    /**\n     * Change the pagination - provides the internal logic for pagination in a simple API\n     * function. With this function you can have a DataTables table go to the next,\n     * previous, first or last pages.\n     *  @param {string|int} mAction Paging action to take: \"first\", \"previous\", \"next\" or \"last\"\n     *    or page number to jump to (integer), note that page 0 is the first page.\n     *  @param {bool} [bRedraw=true] Redraw the table or not\n     *  @dtopt API\n     *  @deprecated Since v1.10\n     *\n     *  @example\n     *    $(document).ready(function() {\n     *      var oTable = $('#example').dataTable();\n     *      oTable.fnPageChange( 'next' );\n     *    } );\n     */\n\n\n    this.fnPageChange = function (mAction, bRedraw) {\n      var api = this.api(true).page(mAction);\n\n      if (bRedraw === undefined || bRedraw) {\n        api.draw(false);\n      }\n    };\n    /**\n     * Show a particular column\n     *  @param {int} iCol The column whose display should be changed\n     *  @param {bool} bShow Show (true) or hide (false) the column\n     *  @param {bool} [bRedraw=true] Redraw the table or not\n     *  @dtopt API\n     *  @deprecated Since v1.10\n     *\n     *  @example\n     *    $(document).ready(function() {\n     *      var oTable = $('#example').dataTable();\n     *\n     *      // Hide the second column after initialisation\n     *      oTable.fnSetColumnVis( 1, false );\n     *    } );\n     */\n\n\n    this.fnSetColumnVis = function (iCol, bShow, bRedraw) {\n      var api = this.api(true).column(iCol).visible(bShow);\n\n      if (bRedraw === undefined || bRedraw) {\n        api.columns.adjust().draw();\n      }\n    };\n    /**\n     * Get the settings for a particular table for external manipulation\n     *  @returns {object} DataTables settings object. See\n     *    {@link DataTable.models.oSettings}\n     *  @dtopt API\n     *  @deprecated Since v1.10\n     *\n     *  @example\n     *    $(document).ready(function() {\n     *      var oTable = $('#example').dataTable();\n     *      var oSettings = oTable.fnSettings();\n     *\n     *      // Show an example parameter from the settings\n     *      alert( oSettings._iDisplayStart );\n     *    } );\n     */\n\n\n    this.fnSettings = function () {\n      return _fnSettingsFromNode(this[_ext.iApiIndex]);\n    };\n    /**\n     * Sort the table by a particular column\n     *  @param {int} iCol the data index to sort on. Note that this will not match the\n     *    'display index' if you have hidden data entries\n     *  @dtopt API\n     *  @deprecated Since v1.10\n     *\n     *  @example\n     *    $(document).ready(function() {\n     *      var oTable = $('#example').dataTable();\n     *\n     *      // Sort immediately with columns 0 and 1\n     *      oTable.fnSort( [ [0,'asc'], [1,'asc'] ] );\n     *    } );\n     */\n\n\n    this.fnSort = function (aaSort) {\n      this.api(true).order(aaSort).draw();\n    };\n    /**\n     * Attach a sort listener to an element for a given column\n     *  @param {node} nNode the element to attach the sort listener to\n     *  @param {int} iColumn the column that a click on this node will sort on\n     *  @param {function} [fnCallback] callback function when sort is run\n     *  @dtopt API\n     *  @deprecated Since v1.10\n     *\n     *  @example\n     *    $(document).ready(function() {\n     *      var oTable = $('#example').dataTable();\n     *\n     *      // Sort on column 1, when 'sorter' is clicked on\n     *      oTable.fnSortListener( document.getElementById('sorter'), 1 );\n     *    } );\n     */\n\n\n    this.fnSortListener = function (nNode, iColumn, fnCallback) {\n      this.api(true).order.listener(nNode, iColumn, fnCallback);\n    };\n    /**\n     * Update a table cell or row - this method will accept either a single value to\n     * update the cell with, an array of values with one element for each column or\n     * an object in the same format as the original data source. The function is\n     * self-referencing in order to make the multi column updates easier.\n     *  @param {object|array|string} mData Data to update the cell/row with\n     *  @param {node|int} mRow TR element you want to update or the aoData index\n     *  @param {int} [iColumn] The column to update, give as null or undefined to\n     *    update a whole row.\n     *  @param {bool} [bRedraw=true] Redraw the table or not\n     *  @param {bool} [bAction=true] Perform pre-draw actions or not\n     *  @returns {int} 0 on success, 1 on error\n     *  @dtopt API\n     *  @deprecated Since v1.10\n     *\n     *  @example\n     *    $(document).ready(function() {\n     *      var oTable = $('#example').dataTable();\n     *      oTable.fnUpdate( 'Example update', 0, 0 ); // Single cell\n     *      oTable.fnUpdate( ['a', 'b', 'c', 'd', 'e'], $('tbody tr')[0] ); // Row\n     *    } );\n     */\n\n\n    this.fnUpdate = function (mData, mRow, iColumn, bRedraw, bAction) {\n      var api = this.api(true);\n\n      if (iColumn === undefined || iColumn === null) {\n        api.row(mRow).data(mData);\n      } else {\n        api.cell(mRow, iColumn).data(mData);\n      }\n\n      if (bAction === undefined || bAction) {\n        api.columns.adjust();\n      }\n\n      if (bRedraw === undefined || bRedraw) {\n        api.draw();\n      }\n\n      return 0;\n    };\n    /**\n     * Provide a common method for plug-ins to check the version of DataTables being used, in order\n     * to ensure compatibility.\n     *  @param {string} sVersion Version string to check for, in the format \"X.Y.Z\". Note that the\n     *    formats \"X\" and \"X.Y\" are also acceptable.\n     *  @returns {boolean} true if this version of DataTables is greater or equal to the required\n     *    version, or false if this version of DataTales is not suitable\n     *  @method\n     *  @dtopt API\n     *  @deprecated Since v1.10\n     *\n     *  @example\n     *    $(document).ready(function() {\n     *      var oTable = $('#example').dataTable();\n     *      alert( oTable.fnVersionCheck( '1.9.0' ) );\n     *    } );\n     */\n\n\n    this.fnVersionCheck = _ext.fnVersionCheck;\n\n    var _that = this;\n\n    var emptyInit = options === undefined;\n    var len = this.length;\n\n    if (emptyInit) {\n      options = {};\n    }\n\n    this.oApi = this.internal = _ext.internal; // Extend with old style plug-in API methods\n\n    for (var fn in DataTable.ext.internal) {\n      if (fn) {\n        this[fn] = _fnExternApiFunc(fn);\n      }\n    }\n\n    this.each(function () {\n      // For each initialisation we want to give it a clean initialisation\n      // object that can be bashed around\n      var o = {};\n      var oInit = len > 1 ? // optimisation for single table case\n      _fnExtend(o, options, true) : options;\n      /*global oInit,_that,emptyInit*/\n\n      var i = 0,\n          iLen,\n          j,\n          jLen,\n          k,\n          kLen;\n      var sId = this.getAttribute('id');\n      var bInitHandedOff = false;\n      var defaults = DataTable.defaults;\n      var $this = $(this);\n      /* Sanity check */\n\n      if (this.nodeName.toLowerCase() != 'table') {\n        _fnLog(null, 0, 'Non-table node initialisation (' + this.nodeName + ')', 2);\n\n        return;\n      }\n      /* Backwards compatibility for the defaults */\n\n\n      _fnCompatOpts(defaults);\n\n      _fnCompatCols(defaults.column);\n      /* Convert the camel-case defaults to Hungarian */\n\n\n      _fnCamelToHungarian(defaults, defaults, true);\n\n      _fnCamelToHungarian(defaults.column, defaults.column, true);\n      /* Setting up the initialisation object */\n\n\n      _fnCamelToHungarian(defaults, $.extend(oInit, $this.data()));\n      /* Check to see if we are re-initialising a table */\n\n\n      var allSettings = DataTable.settings;\n\n      for (i = 0, iLen = allSettings.length; i < iLen; i++) {\n        var s = allSettings[i];\n        /* Base check on table node */\n\n        if (s.nTable == this || s.nTHead && s.nTHead.parentNode == this || s.nTFoot && s.nTFoot.parentNode == this) {\n          var bRetrieve = oInit.bRetrieve !== undefined ? oInit.bRetrieve : defaults.bRetrieve;\n          var bDestroy = oInit.bDestroy !== undefined ? oInit.bDestroy : defaults.bDestroy;\n\n          if (emptyInit || bRetrieve) {\n            return s.oInstance;\n          } else if (bDestroy) {\n            s.oInstance.fnDestroy();\n            break;\n          } else {\n            _fnLog(s, 0, 'Cannot reinitialise DataTable', 3);\n\n            return;\n          }\n        }\n        /* If the element we are initialising has the same ID as a table which was previously\n         * initialised, but the table nodes don't match (from before) then we destroy the old\n         * instance by simply deleting it. This is under the assumption that the table has been\n         * destroyed by other methods. Anyone using non-id selectors will need to do this manually\n         */\n\n\n        if (s.sTableId == this.id) {\n          allSettings.splice(i, 1);\n          break;\n        }\n      }\n      /* Ensure the table has an ID - required for accessibility */\n\n\n      if (sId === null || sId === \"\") {\n        sId = \"DataTables_Table_\" + DataTable.ext._unique++;\n        this.id = sId;\n      }\n      /* Create the settings object for this table and set some of the default parameters */\n\n\n      var oSettings = $.extend(true, {}, DataTable.models.oSettings, {\n        \"sDestroyWidth\": $this[0].style.width,\n        \"sInstance\": sId,\n        \"sTableId\": sId\n      });\n      oSettings.nTable = this;\n      oSettings.oApi = _that.internal;\n      oSettings.oInit = oInit;\n      allSettings.push(oSettings); // Need to add the instance after the instance after the settings object has been added\n      // to the settings array, so we can self reference the table instance if more than one\n\n      oSettings.oInstance = _that.length === 1 ? _that : $this.dataTable(); // Backwards compatibility, before we apply all the defaults\n\n      _fnCompatOpts(oInit);\n\n      _fnLanguageCompat(oInit.oLanguage); // If the length menu is given, but the init display length is not, use the length menu\n\n\n      if (oInit.aLengthMenu && !oInit.iDisplayLength) {\n        oInit.iDisplayLength = $.isArray(oInit.aLengthMenu[0]) ? oInit.aLengthMenu[0][0] : oInit.aLengthMenu[0];\n      } // Apply the defaults and init options to make a single init object will all\n      // options defined from defaults and instance options.\n\n\n      oInit = _fnExtend($.extend(true, {}, defaults), oInit); // Map the initialisation options onto the settings object\n\n      _fnMap(oSettings.oFeatures, oInit, [\"bPaginate\", \"bLengthChange\", \"bFilter\", \"bSort\", \"bSortMulti\", \"bInfo\", \"bProcessing\", \"bAutoWidth\", \"bSortClasses\", \"bServerSide\", \"bDeferRender\"]);\n\n      _fnMap(oSettings, oInit, [\"asStripeClasses\", \"ajax\", \"fnServerData\", \"fnFormatNumber\", \"sServerMethod\", \"aaSorting\", \"aaSortingFixed\", \"aLengthMenu\", \"sPaginationType\", \"sAjaxSource\", \"sAjaxDataProp\", \"iStateDuration\", \"sDom\", \"bSortCellsTop\", \"iTabIndex\", \"fnStateLoadCallback\", \"fnStateSaveCallback\", \"renderer\", \"searchDelay\", \"rowId\", [\"iCookieDuration\", \"iStateDuration\"], // backwards compat\n      [\"oSearch\", \"oPreviousSearch\"], [\"aoSearchCols\", \"aoPreSearchCols\"], [\"iDisplayLength\", \"_iDisplayLength\"]]);\n\n      _fnMap(oSettings.oScroll, oInit, [[\"sScrollX\", \"sX\"], [\"sScrollXInner\", \"sXInner\"], [\"sScrollY\", \"sY\"], [\"bScrollCollapse\", \"bCollapse\"]]);\n\n      _fnMap(oSettings.oLanguage, oInit, \"fnInfoCallback\");\n      /* Callback functions which are array driven */\n\n\n      _fnCallbackReg(oSettings, 'aoDrawCallback', oInit.fnDrawCallback, 'user');\n\n      _fnCallbackReg(oSettings, 'aoServerParams', oInit.fnServerParams, 'user');\n\n      _fnCallbackReg(oSettings, 'aoStateSaveParams', oInit.fnStateSaveParams, 'user');\n\n      _fnCallbackReg(oSettings, 'aoStateLoadParams', oInit.fnStateLoadParams, 'user');\n\n      _fnCallbackReg(oSettings, 'aoStateLoaded', oInit.fnStateLoaded, 'user');\n\n      _fnCallbackReg(oSettings, 'aoRowCallback', oInit.fnRowCallback, 'user');\n\n      _fnCallbackReg(oSettings, 'aoRowCreatedCallback', oInit.fnCreatedRow, 'user');\n\n      _fnCallbackReg(oSettings, 'aoHeaderCallback', oInit.fnHeaderCallback, 'user');\n\n      _fnCallbackReg(oSettings, 'aoFooterCallback', oInit.fnFooterCallback, 'user');\n\n      _fnCallbackReg(oSettings, 'aoInitComplete', oInit.fnInitComplete, 'user');\n\n      _fnCallbackReg(oSettings, 'aoPreDrawCallback', oInit.fnPreDrawCallback, 'user');\n\n      oSettings.rowIdFn = _fnGetObjectDataFn(oInit.rowId);\n      /* Browser support detection */\n\n      _fnBrowserDetect(oSettings);\n\n      var oClasses = oSettings.oClasses;\n      $.extend(oClasses, DataTable.ext.classes, oInit.oClasses);\n      $this.addClass(oClasses.sTable);\n\n      if (oSettings.iInitDisplayStart === undefined) {\n        /* Display start point, taking into account the save saving */\n        oSettings.iInitDisplayStart = oInit.iDisplayStart;\n        oSettings._iDisplayStart = oInit.iDisplayStart;\n      }\n\n      if (oInit.iDeferLoading !== null) {\n        oSettings.bDeferLoading = true;\n        var tmp = $.isArray(oInit.iDeferLoading);\n        oSettings._iRecordsDisplay = tmp ? oInit.iDeferLoading[0] : oInit.iDeferLoading;\n        oSettings._iRecordsTotal = tmp ? oInit.iDeferLoading[1] : oInit.iDeferLoading;\n      }\n      /* Language definitions */\n\n\n      var oLanguage = oSettings.oLanguage;\n      $.extend(true, oLanguage, oInit.oLanguage);\n\n      if (oLanguage.sUrl) {\n        /* Get the language definitions from a file - because this Ajax call makes the language\n         * get async to the remainder of this function we use bInitHandedOff to indicate that\n         * _fnInitialise will be fired by the returned Ajax handler, rather than the constructor\n         */\n        $.ajax({\n          dataType: 'json',\n          url: oLanguage.sUrl,\n          success: function success(json) {\n            _fnLanguageCompat(json);\n\n            _fnCamelToHungarian(defaults.oLanguage, json);\n\n            $.extend(true, oLanguage, json);\n\n            _fnInitialise(oSettings);\n          },\n          error: function error() {\n            // Error occurred loading language file, continue on as best we can\n            _fnInitialise(oSettings);\n          }\n        });\n        bInitHandedOff = true;\n      }\n      /*\n       * Stripes\n       */\n\n\n      if (oInit.asStripeClasses === null) {\n        oSettings.asStripeClasses = [oClasses.sStripeOdd, oClasses.sStripeEven];\n      }\n      /* Remove row stripe classes if they are already on the table row */\n\n\n      var stripeClasses = oSettings.asStripeClasses;\n      var rowOne = $this.children('tbody').find('tr').eq(0);\n\n      if ($.inArray(true, $.map(stripeClasses, function (el, i) {\n        return rowOne.hasClass(el);\n      })) !== -1) {\n        $('tbody tr', this).removeClass(stripeClasses.join(' '));\n        oSettings.asDestroyStripes = stripeClasses.slice();\n      }\n      /*\n       * Columns\n       * See if we should load columns automatically or use defined ones\n       */\n\n\n      var anThs = [];\n      var aoColumnsInit;\n      var nThead = this.getElementsByTagName('thead');\n\n      if (nThead.length !== 0) {\n        _fnDetectHeader(oSettings.aoHeader, nThead[0]);\n\n        anThs = _fnGetUniqueThs(oSettings);\n      }\n      /* If not given a column array, generate one with nulls */\n\n\n      if (oInit.aoColumns === null) {\n        aoColumnsInit = [];\n\n        for (i = 0, iLen = anThs.length; i < iLen; i++) {\n          aoColumnsInit.push(null);\n        }\n      } else {\n        aoColumnsInit = oInit.aoColumns;\n      }\n      /* Add the columns */\n\n\n      for (i = 0, iLen = aoColumnsInit.length; i < iLen; i++) {\n        _fnAddColumn(oSettings, anThs ? anThs[i] : null);\n      }\n      /* Apply the column definitions */\n\n\n      _fnApplyColumnDefs(oSettings, oInit.aoColumnDefs, aoColumnsInit, function (iCol, oDef) {\n        _fnColumnOptions(oSettings, iCol, oDef);\n      });\n      /* HTML5 attribute detection - build an mData object automatically if the\n       * attributes are found\n       */\n\n\n      if (rowOne.length) {\n        var a = function a(cell, name) {\n          return cell.getAttribute('data-' + name) !== null ? name : null;\n        };\n\n        $(rowOne[0]).children('th, td').each(function (i, cell) {\n          var col = oSettings.aoColumns[i];\n\n          if (col.mData === i) {\n            var sort = a(cell, 'sort') || a(cell, 'order');\n            var filter = a(cell, 'filter') || a(cell, 'search');\n\n            if (sort !== null || filter !== null) {\n              col.mData = {\n                _: i + '.display',\n                sort: sort !== null ? i + '.@data-' + sort : undefined,\n                type: sort !== null ? i + '.@data-' + sort : undefined,\n                filter: filter !== null ? i + '.@data-' + filter : undefined\n              };\n\n              _fnColumnOptions(oSettings, i);\n            }\n          }\n        });\n      }\n\n      var features = oSettings.oFeatures;\n\n      var loadedInit = function loadedInit() {\n        /*\n         * Sorting\n         * @todo For modularisation (1.11) this needs to do into a sort start up handler\n         */\n        // If aaSorting is not defined, then we use the first indicator in asSorting\n        // in case that has been altered, so the default sort reflects that option\n        if (oInit.aaSorting === undefined) {\n          var sorting = oSettings.aaSorting;\n\n          for (i = 0, iLen = sorting.length; i < iLen; i++) {\n            sorting[i][1] = oSettings.aoColumns[i].asSorting[0];\n          }\n        }\n        /* Do a first pass on the sorting classes (allows any size changes to be taken into\n         * account, and also will apply sorting disabled classes if disabled\n         */\n\n\n        _fnSortingClasses(oSettings);\n\n        if (features.bSort) {\n          _fnCallbackReg(oSettings, 'aoDrawCallback', function () {\n            if (oSettings.bSorted) {\n              var aSort = _fnSortFlatten(oSettings);\n\n              var sortedColumns = {};\n              $.each(aSort, function (i, val) {\n                sortedColumns[val.src] = val.dir;\n              });\n\n              _fnCallbackFire(oSettings, null, 'order', [oSettings, aSort, sortedColumns]);\n\n              _fnSortAria(oSettings);\n            }\n          });\n        }\n\n        _fnCallbackReg(oSettings, 'aoDrawCallback', function () {\n          if (oSettings.bSorted || _fnDataSource(oSettings) === 'ssp' || features.bDeferRender) {\n            _fnSortingClasses(oSettings);\n          }\n        }, 'sc');\n        /*\n         * Final init\n         * Cache the header, body and footer as required, creating them if needed\n         */\n        // Work around for Webkit bug 83867 - store the caption-side before removing from doc\n\n\n        var captions = $this.children('caption').each(function () {\n          this._captionSide = $(this).css('caption-side');\n        });\n        var thead = $this.children('thead');\n\n        if (thead.length === 0) {\n          thead = $('<thead/>').appendTo($this);\n        }\n\n        oSettings.nTHead = thead[0];\n        var tbody = $this.children('tbody');\n\n        if (tbody.length === 0) {\n          tbody = $('<tbody/>').appendTo($this);\n        }\n\n        oSettings.nTBody = tbody[0];\n        var tfoot = $this.children('tfoot');\n\n        if (tfoot.length === 0 && captions.length > 0 && (oSettings.oScroll.sX !== \"\" || oSettings.oScroll.sY !== \"\")) {\n          // If we are a scrolling table, and no footer has been given, then we need to create\n          // a tfoot element for the caption element to be appended to\n          tfoot = $('<tfoot/>').appendTo($this);\n        }\n\n        if (tfoot.length === 0 || tfoot.children().length === 0) {\n          $this.addClass(oClasses.sNoFooter);\n        } else if (tfoot.length > 0) {\n          oSettings.nTFoot = tfoot[0];\n\n          _fnDetectHeader(oSettings.aoFooter, oSettings.nTFoot);\n        }\n        /* Check if there is data passing into the constructor */\n\n\n        if (oInit.aaData) {\n          for (i = 0; i < oInit.aaData.length; i++) {\n            _fnAddData(oSettings, oInit.aaData[i]);\n          }\n        } else if (oSettings.bDeferLoading || _fnDataSource(oSettings) == 'dom') {\n          /* Grab the data from the page - only do this when deferred loading or no Ajax\n           * source since there is no point in reading the DOM data if we are then going\n           * to replace it with Ajax data\n           */\n          _fnAddTr(oSettings, $(oSettings.nTBody).children('tr'));\n        }\n        /* Copy the data index array */\n\n\n        oSettings.aiDisplay = oSettings.aiDisplayMaster.slice();\n        /* Initialisation complete - table can be drawn */\n\n        oSettings.bInitialised = true;\n        /* Check if we need to initialise the table (it might not have been handed off to the\n         * language processor)\n         */\n\n        if (bInitHandedOff === false) {\n          _fnInitialise(oSettings);\n        }\n      };\n      /* Must be done after everything which can be overridden by the state saving! */\n\n\n      if (oInit.bStateSave) {\n        features.bStateSave = true;\n\n        _fnCallbackReg(oSettings, 'aoDrawCallback', _fnSaveState, 'state_save');\n\n        _fnLoadState(oSettings, oInit, loadedInit);\n      } else {\n        loadedInit();\n      }\n    });\n    _that = null;\n    return this;\n  };\n  /*\n   * It is useful to have variables which are scoped locally so only the\n   * DataTables functions can access them and they don't leak into global space.\n   * At the same time these functions are often useful over multiple files in the\n   * core and API, so we list, or at least document, all variables which are used\n   * by DataTables as private variables here. This also ensures that there is no\n   * clashing of variable names and that they can easily referenced for reuse.\n   */\n  // Defined else where\n  //  _selector_run\n  //  _selector_opts\n  //  _selector_first\n  //  _selector_row_indexes\n\n\n  var _ext; // DataTable.ext\n\n\n  var _Api2; // DataTable.Api\n\n\n  var _api_register; // DataTable.Api.register\n\n\n  var _api_registerPlural; // DataTable.Api.registerPlural\n\n\n  var _re_dic = {};\n  var _re_new_lines = /[\\r\\n]/g;\n  var _re_html = /<.*?>/g; // This is not strict ISO8601 - Date.parse() is quite lax, although\n  // implementations differ between browsers.\n\n  var _re_date = /^\\d{2,4}[\\.\\/\\-]\\d{1,2}[\\.\\/\\-]\\d{1,2}([T ]{1}\\d{1,2}[:\\.]\\d{2}([\\.:]\\d{2})?)?$/; // Escape regular expression special characters\n\n  var _re_escape_regex = new RegExp('(\\\\' + ['/', '.', '*', '+', '?', '|', '(', ')', '[', ']', '{', '}', '\\\\', '$', '^', '-'].join('|\\\\') + ')', 'g'); // http://en.wikipedia.org/wiki/Foreign_exchange_market\n  // - \\u20BD - Russian ruble.\n  // - \\u20a9 - South Korean Won\n  // - \\u20BA - Turkish Lira\n  // - \\u20B9 - Indian Rupee\n  // - R - Brazil (R$) and South Africa\n  // - fr - Swiss Franc\n  // - kr - Swedish krona, Norwegian krone and Danish krone\n  // - \\u2009 is thin space and \\u202F is narrow no-break space, both used in many\n  // - Ƀ - Bitcoin\n  // - Ξ - Ethereum\n  //   standards as thousands separators.\n\n\n  var _re_formatted_numeric = /[',$£€¥%\\u2009\\u202F\\u20BD\\u20a9\\u20BArfkɃΞ]/gi;\n\n  var _empty = function _empty(d) {\n    return !d || d === true || d === '-' ? true : false;\n  };\n\n  var _intVal = function _intVal(s) {\n    var integer = parseInt(s, 10);\n    return !isNaN(integer) && isFinite(s) ? integer : null;\n  }; // Convert from a formatted number with characters other than `.` as the\n  // decimal place, to a Javascript number\n\n\n  var _numToDecimal = function _numToDecimal(num, decimalPoint) {\n    // Cache created regular expressions for speed as this function is called often\n    if (!_re_dic[decimalPoint]) {\n      _re_dic[decimalPoint] = new RegExp(_fnEscapeRegex(decimalPoint), 'g');\n    }\n\n    return typeof num === 'string' && decimalPoint !== '.' ? num.replace(/\\./g, '').replace(_re_dic[decimalPoint], '.') : num;\n  };\n\n  var _isNumber = function _isNumber(d, decimalPoint, formatted) {\n    var strType = typeof d === 'string'; // If empty return immediately so there must be a number if it is a\n    // formatted string (this stops the string \"k\", or \"kr\", etc being detected\n    // as a formatted number for currency\n\n    if (_empty(d)) {\n      return true;\n    }\n\n    if (decimalPoint && strType) {\n      d = _numToDecimal(d, decimalPoint);\n    }\n\n    if (formatted && strType) {\n      d = d.replace(_re_formatted_numeric, '');\n    }\n\n    return !isNaN(parseFloat(d)) && isFinite(d);\n  }; // A string without HTML in it can be considered to be HTML still\n\n\n  var _isHtml = function _isHtml(d) {\n    return _empty(d) || typeof d === 'string';\n  };\n\n  var _htmlNumeric = function _htmlNumeric(d, decimalPoint, formatted) {\n    if (_empty(d)) {\n      return true;\n    }\n\n    var html = _isHtml(d);\n\n    return !html ? null : _isNumber(_stripHtml(d), decimalPoint, formatted) ? true : null;\n  };\n\n  var _pluck = function _pluck(a, prop, prop2) {\n    var out = [];\n    var i = 0,\n        ien = a.length; // Could have the test in the loop for slightly smaller code, but speed\n    // is essential here\n\n    if (prop2 !== undefined) {\n      for (; i < ien; i++) {\n        if (a[i] && a[i][prop]) {\n          out.push(a[i][prop][prop2]);\n        }\n      }\n    } else {\n      for (; i < ien; i++) {\n        if (a[i]) {\n          out.push(a[i][prop]);\n        }\n      }\n    }\n\n    return out;\n  }; // Basically the same as _pluck, but rather than looping over `a` we use `order`\n  // as the indexes to pick from `a`\n\n\n  var _pluck_order = function _pluck_order(a, order, prop, prop2) {\n    var out = [];\n    var i = 0,\n        ien = order.length; // Could have the test in the loop for slightly smaller code, but speed\n    // is essential here\n\n    if (prop2 !== undefined) {\n      for (; i < ien; i++) {\n        if (a[order[i]][prop]) {\n          out.push(a[order[i]][prop][prop2]);\n        }\n      }\n    } else {\n      for (; i < ien; i++) {\n        out.push(a[order[i]][prop]);\n      }\n    }\n\n    return out;\n  };\n\n  var _range = function _range(len, start) {\n    var out = [];\n    var end;\n\n    if (start === undefined) {\n      start = 0;\n      end = len;\n    } else {\n      end = start;\n      start = len;\n    }\n\n    for (var i = start; i < end; i++) {\n      out.push(i);\n    }\n\n    return out;\n  };\n\n  var _removeEmpty = function _removeEmpty(a) {\n    var out = [];\n\n    for (var i = 0, ien = a.length; i < ien; i++) {\n      if (a[i]) {\n        // careful - will remove all falsy values!\n        out.push(a[i]);\n      }\n    }\n\n    return out;\n  };\n\n  var _stripHtml = function _stripHtml(d) {\n    return d.replace(_re_html, '');\n  };\n  /**\n   * Determine if all values in the array are unique. This means we can short\n   * cut the _unique method at the cost of a single loop. A sorted array is used\n   * to easily check the values.\n   *\n   * @param  {array} src Source array\n   * @return {boolean} true if all unique, false otherwise\n   * @ignore\n   */\n\n\n  var _areAllUnique = function _areAllUnique(src) {\n    if (src.length < 2) {\n      return true;\n    }\n\n    var sorted = src.slice().sort();\n    var last = sorted[0];\n\n    for (var i = 1, ien = sorted.length; i < ien; i++) {\n      if (sorted[i] === last) {\n        return false;\n      }\n\n      last = sorted[i];\n    }\n\n    return true;\n  };\n  /**\n   * Find the unique elements in a source array.\n   *\n   * @param  {array} src Source array\n   * @return {array} Array of unique items\n   * @ignore\n   */\n\n\n  var _unique = function _unique(src) {\n    if (_areAllUnique(src)) {\n      return src.slice();\n    } // A faster unique method is to use object keys to identify used values,\n    // but this doesn't work with arrays or objects, which we must also\n    // consider. See jsperf.com/compare-array-unique-versions/4 for more\n    // information.\n\n\n    var out = [],\n        val,\n        i,\n        ien = src.length,\n        j,\n        k = 0;\n\n    again: for (i = 0; i < ien; i++) {\n      val = src[i];\n\n      for (j = 0; j < k; j++) {\n        if (out[j] === val) {\n          continue again;\n        }\n      }\n\n      out.push(val);\n      k++;\n    }\n\n    return out;\n  };\n  /**\n   * DataTables utility methods\n   * \n   * This namespace provides helper methods that DataTables uses internally to\n   * create a DataTable, but which are not exclusively used only for DataTables.\n   * These methods can be used by extension authors to save the duplication of\n   * code.\n   *\n   *  @namespace\n   */\n\n\n  DataTable.util = {\n    /**\n     * Throttle the calls to a function. Arguments and context are maintained\n     * for the throttled function.\n     *\n     * @param {function} fn Function to be called\n     * @param {integer} freq Call frequency in mS\n     * @return {function} Wrapped function\n     */\n    throttle: function throttle(fn, freq) {\n      var frequency = freq !== undefined ? freq : 200,\n          last,\n          timer;\n      return function () {\n        var that = this,\n            now = +new Date(),\n            args = arguments;\n\n        if (last && now < last + frequency) {\n          clearTimeout(timer);\n          timer = setTimeout(function () {\n            last = undefined;\n            fn.apply(that, args);\n          }, frequency);\n        } else {\n          last = now;\n          fn.apply(that, args);\n        }\n      };\n    },\n\n    /**\n     * Escape a string such that it can be used in a regular expression\n     *\n     *  @param {string} val string to escape\n     *  @returns {string} escaped string\n     */\n    escapeRegex: function escapeRegex(val) {\n      return val.replace(_re_escape_regex, '\\\\$1');\n    }\n  };\n  /**\n   * Create a mapping object that allows camel case parameters to be looked up\n   * for their Hungarian counterparts. The mapping is stored in a private\n   * parameter called `_hungarianMap` which can be accessed on the source object.\n   *  @param {object} o\n   *  @memberof DataTable#oApi\n   */\n\n  function _fnHungarianMap(o) {\n    var hungarian = 'a aa ai ao as b fn i m o s ',\n        match,\n        newKey,\n        map = {};\n    $.each(o, function (key, val) {\n      match = key.match(/^([^A-Z]+?)([A-Z])/);\n\n      if (match && hungarian.indexOf(match[1] + ' ') !== -1) {\n        newKey = key.replace(match[0], match[2].toLowerCase());\n        map[newKey] = key;\n\n        if (match[1] === 'o') {\n          _fnHungarianMap(o[key]);\n        }\n      }\n    });\n    o._hungarianMap = map;\n  }\n  /**\n   * Convert from camel case parameters to Hungarian, based on a Hungarian map\n   * created by _fnHungarianMap.\n   *  @param {object} src The model object which holds all parameters that can be\n   *    mapped.\n   *  @param {object} user The object to convert from camel case to Hungarian.\n   *  @param {boolean} force When set to `true`, properties which already have a\n   *    Hungarian value in the `user` object will be overwritten. Otherwise they\n   *    won't be.\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnCamelToHungarian(src, user, force) {\n    if (!src._hungarianMap) {\n      _fnHungarianMap(src);\n    }\n\n    var hungarianKey;\n    $.each(user, function (key, val) {\n      hungarianKey = src._hungarianMap[key];\n\n      if (hungarianKey !== undefined && (force || user[hungarianKey] === undefined)) {\n        // For objects, we need to buzz down into the object to copy parameters\n        if (hungarianKey.charAt(0) === 'o') {\n          // Copy the camelCase options over to the hungarian\n          if (!user[hungarianKey]) {\n            user[hungarianKey] = {};\n          }\n\n          $.extend(true, user[hungarianKey], user[key]);\n\n          _fnCamelToHungarian(src[hungarianKey], user[hungarianKey], force);\n        } else {\n          user[hungarianKey] = user[key];\n        }\n      }\n    });\n  }\n  /**\n   * Language compatibility - when certain options are given, and others aren't, we\n   * need to duplicate the values over, in order to provide backwards compatibility\n   * with older language files.\n   *  @param {object} oSettings dataTables settings object\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnLanguageCompat(lang) {\n    // Note the use of the Hungarian notation for the parameters in this method as\n    // this is called after the mapping of camelCase to Hungarian\n    var defaults = DataTable.defaults.oLanguage; // Default mapping\n\n    var defaultDecimal = defaults.sDecimal;\n\n    if (defaultDecimal) {\n      _addNumericSort(defaultDecimal);\n    }\n\n    if (lang) {\n      var zeroRecords = lang.sZeroRecords; // Backwards compatibility - if there is no sEmptyTable given, then use the same as\n      // sZeroRecords - assuming that is given.\n\n      if (!lang.sEmptyTable && zeroRecords && defaults.sEmptyTable === \"No data available in table\") {\n        _fnMap(lang, lang, 'sZeroRecords', 'sEmptyTable');\n      } // Likewise with loading records\n\n\n      if (!lang.sLoadingRecords && zeroRecords && defaults.sLoadingRecords === \"Loading...\") {\n        _fnMap(lang, lang, 'sZeroRecords', 'sLoadingRecords');\n      } // Old parameter name of the thousands separator mapped onto the new\n\n\n      if (lang.sInfoThousands) {\n        lang.sThousands = lang.sInfoThousands;\n      }\n\n      var decimal = lang.sDecimal;\n\n      if (decimal && defaultDecimal !== decimal) {\n        _addNumericSort(decimal);\n      }\n    }\n  }\n  /**\n   * Map one parameter onto another\n   *  @param {object} o Object to map\n   *  @param {*} knew The new parameter name\n   *  @param {*} old The old parameter name\n   */\n\n\n  var _fnCompatMap = function _fnCompatMap(o, knew, old) {\n    if (o[knew] !== undefined) {\n      o[old] = o[knew];\n    }\n  };\n  /**\n   * Provide backwards compatibility for the main DT options. Note that the new\n   * options are mapped onto the old parameters, so this is an external interface\n   * change only.\n   *  @param {object} init Object to map\n   */\n\n\n  function _fnCompatOpts(init) {\n    _fnCompatMap(init, 'ordering', 'bSort');\n\n    _fnCompatMap(init, 'orderMulti', 'bSortMulti');\n\n    _fnCompatMap(init, 'orderClasses', 'bSortClasses');\n\n    _fnCompatMap(init, 'orderCellsTop', 'bSortCellsTop');\n\n    _fnCompatMap(init, 'order', 'aaSorting');\n\n    _fnCompatMap(init, 'orderFixed', 'aaSortingFixed');\n\n    _fnCompatMap(init, 'paging', 'bPaginate');\n\n    _fnCompatMap(init, 'pagingType', 'sPaginationType');\n\n    _fnCompatMap(init, 'pageLength', 'iDisplayLength');\n\n    _fnCompatMap(init, 'searching', 'bFilter'); // Boolean initialisation of x-scrolling\n\n\n    if (typeof init.sScrollX === 'boolean') {\n      init.sScrollX = init.sScrollX ? '100%' : '';\n    }\n\n    if (typeof init.scrollX === 'boolean') {\n      init.scrollX = init.scrollX ? '100%' : '';\n    } // Column search objects are in an array, so it needs to be converted\n    // element by element\n\n\n    var searchCols = init.aoSearchCols;\n\n    if (searchCols) {\n      for (var i = 0, ien = searchCols.length; i < ien; i++) {\n        if (searchCols[i]) {\n          _fnCamelToHungarian(DataTable.models.oSearch, searchCols[i]);\n        }\n      }\n    }\n  }\n  /**\n   * Provide backwards compatibility for column options. Note that the new options\n   * are mapped onto the old parameters, so this is an external interface change\n   * only.\n   *  @param {object} init Object to map\n   */\n\n\n  function _fnCompatCols(init) {\n    _fnCompatMap(init, 'orderable', 'bSortable');\n\n    _fnCompatMap(init, 'orderData', 'aDataSort');\n\n    _fnCompatMap(init, 'orderSequence', 'asSorting');\n\n    _fnCompatMap(init, 'orderDataType', 'sortDataType'); // orderData can be given as an integer\n\n\n    var dataSort = init.aDataSort;\n\n    if (typeof dataSort === 'number' && !$.isArray(dataSort)) {\n      init.aDataSort = [dataSort];\n    }\n  }\n  /**\n   * Browser feature detection for capabilities, quirks\n   *  @param {object} settings dataTables settings object\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnBrowserDetect(settings) {\n    // We don't need to do this every time DataTables is constructed, the values\n    // calculated are specific to the browser and OS configuration which we\n    // don't expect to change between initialisations\n    if (!DataTable.__browser) {\n      var browser = {};\n      DataTable.__browser = browser; // Scrolling feature / quirks detection\n\n      var n = $('<div/>').css({\n        position: 'fixed',\n        top: 0,\n        left: $(window).scrollLeft() * -1,\n        // allow for scrolling\n        height: 1,\n        width: 1,\n        overflow: 'hidden'\n      }).append($('<div/>').css({\n        position: 'absolute',\n        top: 1,\n        left: 1,\n        width: 100,\n        overflow: 'scroll'\n      }).append($('<div/>').css({\n        width: '100%',\n        height: 10\n      }))).appendTo('body');\n      var outer = n.children();\n      var inner = outer.children(); // Numbers below, in order, are:\n      // inner.offsetWidth, inner.clientWidth, outer.offsetWidth, outer.clientWidth\n      //\n      // IE6 XP:                           100 100 100  83\n      // IE7 Vista:                        100 100 100  83\n      // IE 8+ Windows:                     83  83 100  83\n      // Evergreen Windows:                 83  83 100  83\n      // Evergreen Mac with scrollbars:     85  85 100  85\n      // Evergreen Mac without scrollbars: 100 100 100 100\n      // Get scrollbar width\n\n      browser.barWidth = outer[0].offsetWidth - outer[0].clientWidth; // IE6/7 will oversize a width 100% element inside a scrolling element, to\n      // include the width of the scrollbar, while other browsers ensure the inner\n      // element is contained without forcing scrolling\n\n      browser.bScrollOversize = inner[0].offsetWidth === 100 && outer[0].clientWidth !== 100; // In rtl text layout, some browsers (most, but not all) will place the\n      // scrollbar on the left, rather than the right.\n\n      browser.bScrollbarLeft = Math.round(inner.offset().left) !== 1; // IE8- don't provide height and width for getBoundingClientRect\n\n      browser.bBounding = n[0].getBoundingClientRect().width ? true : false;\n      n.remove();\n    }\n\n    $.extend(settings.oBrowser, DataTable.__browser);\n    settings.oScroll.iBarWidth = DataTable.__browser.barWidth;\n  }\n  /**\n   * Array.prototype reduce[Right] method, used for browsers which don't support\n   * JS 1.6. Done this way to reduce code size, since we iterate either way\n   *  @param {object} settings dataTables settings object\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnReduce(that, fn, init, start, end, inc) {\n    var i = start,\n        value,\n        isSet = false;\n\n    if (init !== undefined) {\n      value = init;\n      isSet = true;\n    }\n\n    while (i !== end) {\n      if (!that.hasOwnProperty(i)) {\n        continue;\n      }\n\n      value = isSet ? fn(value, that[i], i, that) : that[i];\n      isSet = true;\n      i += inc;\n    }\n\n    return value;\n  }\n  /**\n   * Add a column to the list used for the table with default values\n   *  @param {object} oSettings dataTables settings object\n   *  @param {node} nTh The th element for this column\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnAddColumn(oSettings, nTh) {\n    // Add column to aoColumns array\n    var oDefaults = DataTable.defaults.column;\n    var iCol = oSettings.aoColumns.length;\n    var oCol = $.extend({}, DataTable.models.oColumn, oDefaults, {\n      \"nTh\": nTh ? nTh : document.createElement('th'),\n      \"sTitle\": oDefaults.sTitle ? oDefaults.sTitle : nTh ? nTh.innerHTML : '',\n      \"aDataSort\": oDefaults.aDataSort ? oDefaults.aDataSort : [iCol],\n      \"mData\": oDefaults.mData ? oDefaults.mData : iCol,\n      idx: iCol\n    });\n    oSettings.aoColumns.push(oCol); // Add search object for column specific search. Note that the `searchCols[ iCol ]`\n    // passed into extend can be undefined. This allows the user to give a default\n    // with only some of the parameters defined, and also not give a default\n\n    var searchCols = oSettings.aoPreSearchCols;\n    searchCols[iCol] = $.extend({}, DataTable.models.oSearch, searchCols[iCol]); // Use the default column options function to initialise classes etc\n\n    _fnColumnOptions(oSettings, iCol, $(nTh).data());\n  }\n  /**\n   * Apply options for a column\n   *  @param {object} oSettings dataTables settings object\n   *  @param {int} iCol column index to consider\n   *  @param {object} oOptions object with sType, bVisible and bSearchable etc\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnColumnOptions(oSettings, iCol, oOptions) {\n    var oCol = oSettings.aoColumns[iCol];\n    var oClasses = oSettings.oClasses;\n    var th = $(oCol.nTh); // Try to get width information from the DOM. We can't get it from CSS\n    // as we'd need to parse the CSS stylesheet. `width` option can override\n\n    if (!oCol.sWidthOrig) {\n      // Width attribute\n      oCol.sWidthOrig = th.attr('width') || null; // Style attribute\n\n      var t = (th.attr('style') || '').match(/width:\\s*(\\d+[pxem%]+)/);\n\n      if (t) {\n        oCol.sWidthOrig = t[1];\n      }\n    }\n    /* User specified column options */\n\n\n    if (oOptions !== undefined && oOptions !== null) {\n      // Backwards compatibility\n      _fnCompatCols(oOptions); // Map camel case parameters to their Hungarian counterparts\n\n\n      _fnCamelToHungarian(DataTable.defaults.column, oOptions);\n      /* Backwards compatibility for mDataProp */\n\n\n      if (oOptions.mDataProp !== undefined && !oOptions.mData) {\n        oOptions.mData = oOptions.mDataProp;\n      }\n\n      if (oOptions.sType) {\n        oCol._sManualType = oOptions.sType;\n      } // `class` is a reserved word in Javascript, so we need to provide\n      // the ability to use a valid name for the camel case input\n\n\n      if (oOptions.className && !oOptions.sClass) {\n        oOptions.sClass = oOptions.className;\n      }\n\n      if (oOptions.sClass) {\n        th.addClass(oOptions.sClass);\n      }\n\n      $.extend(oCol, oOptions);\n\n      _fnMap(oCol, oOptions, \"sWidth\", \"sWidthOrig\");\n      /* iDataSort to be applied (backwards compatibility), but aDataSort will take\n       * priority if defined\n       */\n\n\n      if (oOptions.iDataSort !== undefined) {\n        oCol.aDataSort = [oOptions.iDataSort];\n      }\n\n      _fnMap(oCol, oOptions, \"aDataSort\");\n    }\n    /* Cache the data get and set functions for speed */\n\n\n    var mDataSrc = oCol.mData;\n\n    var mData = _fnGetObjectDataFn(mDataSrc);\n\n    var mRender = oCol.mRender ? _fnGetObjectDataFn(oCol.mRender) : null;\n\n    var attrTest = function attrTest(src) {\n      return typeof src === 'string' && src.indexOf('@') !== -1;\n    };\n\n    oCol._bAttrSrc = $.isPlainObject(mDataSrc) && (attrTest(mDataSrc.sort) || attrTest(mDataSrc.type) || attrTest(mDataSrc.filter));\n    oCol._setter = null;\n\n    oCol.fnGetData = function (rowData, type, meta) {\n      var innerData = mData(rowData, type, undefined, meta);\n      return mRender && type ? mRender(innerData, type, rowData, meta) : innerData;\n    };\n\n    oCol.fnSetData = function (rowData, val, meta) {\n      return _fnSetObjectDataFn(mDataSrc)(rowData, val, meta);\n    }; // Indicate if DataTables should read DOM data as an object or array\n    // Used in _fnGetRowElements\n\n\n    if (typeof mDataSrc !== 'number') {\n      oSettings._rowReadObject = true;\n    }\n    /* Feature sorting overrides column specific when off */\n\n\n    if (!oSettings.oFeatures.bSort) {\n      oCol.bSortable = false;\n      th.addClass(oClasses.sSortableNone); // Have to add class here as order event isn't called\n    }\n    /* Check that the class assignment is correct for sorting */\n\n\n    var bAsc = $.inArray('asc', oCol.asSorting) !== -1;\n    var bDesc = $.inArray('desc', oCol.asSorting) !== -1;\n\n    if (!oCol.bSortable || !bAsc && !bDesc) {\n      oCol.sSortingClass = oClasses.sSortableNone;\n      oCol.sSortingClassJUI = \"\";\n    } else if (bAsc && !bDesc) {\n      oCol.sSortingClass = oClasses.sSortableAsc;\n      oCol.sSortingClassJUI = oClasses.sSortJUIAscAllowed;\n    } else if (!bAsc && bDesc) {\n      oCol.sSortingClass = oClasses.sSortableDesc;\n      oCol.sSortingClassJUI = oClasses.sSortJUIDescAllowed;\n    } else {\n      oCol.sSortingClass = oClasses.sSortable;\n      oCol.sSortingClassJUI = oClasses.sSortJUI;\n    }\n  }\n  /**\n   * Adjust the table column widths for new data. Note: you would probably want to\n   * do a redraw after calling this function!\n   *  @param {object} settings dataTables settings object\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnAdjustColumnSizing(settings) {\n    /* Not interested in doing column width calculation if auto-width is disabled */\n    if (settings.oFeatures.bAutoWidth !== false) {\n      var columns = settings.aoColumns;\n\n      _fnCalculateColumnWidths(settings);\n\n      for (var i = 0, iLen = columns.length; i < iLen; i++) {\n        columns[i].nTh.style.width = columns[i].sWidth;\n      }\n    }\n\n    var scroll = settings.oScroll;\n\n    if (scroll.sY !== '' || scroll.sX !== '') {\n      _fnScrollDraw(settings);\n    }\n\n    _fnCallbackFire(settings, null, 'column-sizing', [settings]);\n  }\n  /**\n   * Covert the index of a visible column to the index in the data array (take account\n   * of hidden columns)\n   *  @param {object} oSettings dataTables settings object\n   *  @param {int} iMatch Visible column index to lookup\n   *  @returns {int} i the data index\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnVisibleToColumnIndex(oSettings, iMatch) {\n    var aiVis = _fnGetColumns(oSettings, 'bVisible');\n\n    return typeof aiVis[iMatch] === 'number' ? aiVis[iMatch] : null;\n  }\n  /**\n   * Covert the index of an index in the data array and convert it to the visible\n   *   column index (take account of hidden columns)\n   *  @param {int} iMatch Column index to lookup\n   *  @param {object} oSettings dataTables settings object\n   *  @returns {int} i the data index\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnColumnIndexToVisible(oSettings, iMatch) {\n    var aiVis = _fnGetColumns(oSettings, 'bVisible');\n\n    var iPos = $.inArray(iMatch, aiVis);\n    return iPos !== -1 ? iPos : null;\n  }\n  /**\n   * Get the number of visible columns\n   *  @param {object} oSettings dataTables settings object\n   *  @returns {int} i the number of visible columns\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnVisbleColumns(oSettings) {\n    var vis = 0; // No reduce in IE8, use a loop for now\n\n    $.each(oSettings.aoColumns, function (i, col) {\n      if (col.bVisible && $(col.nTh).css('display') !== 'none') {\n        vis++;\n      }\n    });\n    return vis;\n  }\n  /**\n   * Get an array of column indexes that match a given property\n   *  @param {object} oSettings dataTables settings object\n   *  @param {string} sParam Parameter in aoColumns to look for - typically\n   *    bVisible or bSearchable\n   *  @returns {array} Array of indexes with matched properties\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnGetColumns(oSettings, sParam) {\n    var a = [];\n    $.map(oSettings.aoColumns, function (val, i) {\n      if (val[sParam]) {\n        a.push(i);\n      }\n    });\n    return a;\n  }\n  /**\n   * Calculate the 'type' of a column\n   *  @param {object} settings dataTables settings object\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnColumnTypes(settings) {\n    var columns = settings.aoColumns;\n    var data = settings.aoData;\n    var types = DataTable.ext.type.detect;\n    var i, ien, j, jen, k, ken;\n    var col, cell, detectedType, cache; // For each column, spin over the \n\n    for (i = 0, ien = columns.length; i < ien; i++) {\n      col = columns[i];\n      cache = [];\n\n      if (!col.sType && col._sManualType) {\n        col.sType = col._sManualType;\n      } else if (!col.sType) {\n        for (j = 0, jen = types.length; j < jen; j++) {\n          for (k = 0, ken = data.length; k < ken; k++) {\n            // Use a cache array so we only need to get the type data\n            // from the formatter once (when using multiple detectors)\n            if (cache[k] === undefined) {\n              cache[k] = _fnGetCellData(settings, k, i, 'type');\n            }\n\n            detectedType = types[j](cache[k], settings); // If null, then this type can't apply to this column, so\n            // rather than testing all cells, break out. There is an\n            // exception for the last type which is `html`. We need to\n            // scan all rows since it is possible to mix string and HTML\n            // types\n\n            if (!detectedType && j !== types.length - 1) {\n              break;\n            } // Only a single match is needed for html type since it is\n            // bottom of the pile and very similar to string\n\n\n            if (detectedType === 'html') {\n              break;\n            }\n          } // Type is valid for all data points in the column - use this\n          // type\n\n\n          if (detectedType) {\n            col.sType = detectedType;\n            break;\n          }\n        } // Fall back - if no type was detected, always use string\n\n\n        if (!col.sType) {\n          col.sType = 'string';\n        }\n      }\n    }\n  }\n  /**\n   * Take the column definitions and static columns arrays and calculate how\n   * they relate to column indexes. The callback function will then apply the\n   * definition found for a column to a suitable configuration object.\n   *  @param {object} oSettings dataTables settings object\n   *  @param {array} aoColDefs The aoColumnDefs array that is to be applied\n   *  @param {array} aoCols The aoColumns array that defines columns individually\n   *  @param {function} fn Callback function - takes two parameters, the calculated\n   *    column index and the definition for that column.\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnApplyColumnDefs(oSettings, aoColDefs, aoCols, fn) {\n    var i, iLen, j, jLen, k, kLen, def;\n    var columns = oSettings.aoColumns; // Column definitions with aTargets\n\n    if (aoColDefs) {\n      /* Loop over the definitions array - loop in reverse so first instance has priority */\n      for (i = aoColDefs.length - 1; i >= 0; i--) {\n        def = aoColDefs[i];\n        /* Each definition can target multiple columns, as it is an array */\n\n        var aTargets = def.targets !== undefined ? def.targets : def.aTargets;\n\n        if (!$.isArray(aTargets)) {\n          aTargets = [aTargets];\n        }\n\n        for (j = 0, jLen = aTargets.length; j < jLen; j++) {\n          if (typeof aTargets[j] === 'number' && aTargets[j] >= 0) {\n            /* Add columns that we don't yet know about */\n            while (columns.length <= aTargets[j]) {\n              _fnAddColumn(oSettings);\n            }\n            /* Integer, basic index */\n\n\n            fn(aTargets[j], def);\n          } else if (typeof aTargets[j] === 'number' && aTargets[j] < 0) {\n            /* Negative integer, right to left column counting */\n            fn(columns.length + aTargets[j], def);\n          } else if (typeof aTargets[j] === 'string') {\n            /* Class name matching on TH element */\n            for (k = 0, kLen = columns.length; k < kLen; k++) {\n              if (aTargets[j] == \"_all\" || $(columns[k].nTh).hasClass(aTargets[j])) {\n                fn(k, def);\n              }\n            }\n          }\n        }\n      }\n    } // Statically defined columns array\n\n\n    if (aoCols) {\n      for (i = 0, iLen = aoCols.length; i < iLen; i++) {\n        fn(i, aoCols[i]);\n      }\n    }\n  }\n  /**\n   * Add a data array to the table, creating DOM node etc. This is the parallel to\n   * _fnGatherData, but for adding rows from a Javascript source, rather than a\n   * DOM source.\n   *  @param {object} oSettings dataTables settings object\n   *  @param {array} aData data array to be added\n   *  @param {node} [nTr] TR element to add to the table - optional. If not given,\n   *    DataTables will create a row automatically\n   *  @param {array} [anTds] Array of TD|TH elements for the row - must be given\n   *    if nTr is.\n   *  @returns {int} >=0 if successful (index of new aoData entry), -1 if failed\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnAddData(oSettings, aDataIn, nTr, anTds) {\n    /* Create the object for storing information about this new row */\n    var iRow = oSettings.aoData.length;\n    var oData = $.extend(true, {}, DataTable.models.oRow, {\n      src: nTr ? 'dom' : 'data',\n      idx: iRow\n    });\n    oData._aData = aDataIn;\n    oSettings.aoData.push(oData);\n    /* Create the cells */\n\n    var nTd, sThisType;\n    var columns = oSettings.aoColumns; // Invalidate the column types as the new data needs to be revalidated\n\n    for (var i = 0, iLen = columns.length; i < iLen; i++) {\n      columns[i].sType = null;\n    }\n    /* Add to the display array */\n\n\n    oSettings.aiDisplayMaster.push(iRow);\n    var id = oSettings.rowIdFn(aDataIn);\n\n    if (id !== undefined) {\n      oSettings.aIds[id] = oData;\n    }\n    /* Create the DOM information, or register it if already present */\n\n\n    if (nTr || !oSettings.oFeatures.bDeferRender) {\n      _fnCreateTr(oSettings, iRow, nTr, anTds);\n    }\n\n    return iRow;\n  }\n  /**\n   * Add one or more TR elements to the table. Generally we'd expect to\n   * use this for reading data from a DOM sourced table, but it could be\n   * used for an TR element. Note that if a TR is given, it is used (i.e.\n   * it is not cloned).\n   *  @param {object} settings dataTables settings object\n   *  @param {array|node|jQuery} trs The TR element(s) to add to the table\n   *  @returns {array} Array of indexes for the added rows\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnAddTr(settings, trs) {\n    var row; // Allow an individual node to be passed in\n\n    if (!(trs instanceof $)) {\n      trs = $(trs);\n    }\n\n    return trs.map(function (i, el) {\n      row = _fnGetRowElements(settings, el);\n      return _fnAddData(settings, row.data, el, row.cells);\n    });\n  }\n  /**\n   * Take a TR element and convert it to an index in aoData\n   *  @param {object} oSettings dataTables settings object\n   *  @param {node} n the TR element to find\n   *  @returns {int} index if the node is found, null if not\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnNodeToDataIndex(oSettings, n) {\n    return n._DT_RowIndex !== undefined ? n._DT_RowIndex : null;\n  }\n  /**\n   * Take a TD element and convert it into a column data index (not the visible index)\n   *  @param {object} oSettings dataTables settings object\n   *  @param {int} iRow The row number the TD/TH can be found in\n   *  @param {node} n The TD/TH element to find\n   *  @returns {int} index if the node is found, -1 if not\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnNodeToColumnIndex(oSettings, iRow, n) {\n    return $.inArray(n, oSettings.aoData[iRow].anCells);\n  }\n  /**\n   * Get the data for a given cell from the internal cache, taking into account data mapping\n   *  @param {object} settings dataTables settings object\n   *  @param {int} rowIdx aoData row id\n   *  @param {int} colIdx Column index\n   *  @param {string} type data get type ('display', 'type' 'filter' 'sort')\n   *  @returns {*} Cell data\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnGetCellData(settings, rowIdx, colIdx, type) {\n    var draw = settings.iDraw;\n    var col = settings.aoColumns[colIdx];\n    var rowData = settings.aoData[rowIdx]._aData;\n    var defaultContent = col.sDefaultContent;\n    var cellData = col.fnGetData(rowData, type, {\n      settings: settings,\n      row: rowIdx,\n      col: colIdx\n    });\n\n    if (cellData === undefined) {\n      if (settings.iDrawError != draw && defaultContent === null) {\n        _fnLog(settings, 0, \"Requested unknown parameter \" + (typeof col.mData == 'function' ? '{function}' : \"'\" + col.mData + \"'\") + \" for row \" + rowIdx + \", column \" + colIdx, 4);\n\n        settings.iDrawError = draw;\n      }\n\n      return defaultContent;\n    } // When the data source is null and a specific data type is requested (i.e.\n    // not the original data), we can use default column data\n\n\n    if ((cellData === rowData || cellData === null) && defaultContent !== null && type !== undefined) {\n      cellData = defaultContent;\n    } else if (typeof cellData === 'function') {\n      // If the data source is a function, then we run it and use the return,\n      // executing in the scope of the data object (for instances)\n      return cellData.call(rowData);\n    }\n\n    if (cellData === null && type == 'display') {\n      return '';\n    }\n\n    return cellData;\n  }\n  /**\n   * Set the value for a specific cell, into the internal data cache\n   *  @param {object} settings dataTables settings object\n   *  @param {int} rowIdx aoData row id\n   *  @param {int} colIdx Column index\n   *  @param {*} val Value to set\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnSetCellData(settings, rowIdx, colIdx, val) {\n    var col = settings.aoColumns[colIdx];\n    var rowData = settings.aoData[rowIdx]._aData;\n    col.fnSetData(rowData, val, {\n      settings: settings,\n      row: rowIdx,\n      col: colIdx\n    });\n  } // Private variable that is used to match action syntax in the data property object\n\n\n  var __reArray = /\\[.*?\\]$/;\n  var __reFn = /\\(\\)$/;\n  /**\n   * Split string on periods, taking into account escaped periods\n   * @param  {string} str String to split\n   * @return {array} Split string\n   */\n\n  function _fnSplitObjNotation(str) {\n    return $.map(str.match(/(\\\\.|[^\\.])+/g) || [''], function (s) {\n      return s.replace(/\\\\\\./g, '.');\n    });\n  }\n  /**\n   * Return a function that can be used to get data from a source object, taking\n   * into account the ability to use nested objects as a source\n   *  @param {string|int|function} mSource The data source for the object\n   *  @returns {function} Data get function\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnGetObjectDataFn(mSource) {\n    if ($.isPlainObject(mSource)) {\n      /* Build an object of get functions, and wrap them in a single call */\n      var o = {};\n      $.each(mSource, function (key, val) {\n        if (val) {\n          o[key] = _fnGetObjectDataFn(val);\n        }\n      });\n      return function (data, type, row, meta) {\n        var t = o[type] || o._;\n        return t !== undefined ? t(data, type, row, meta) : data;\n      };\n    } else if (mSource === null) {\n      /* Give an empty string for rendering / sorting etc */\n      return function (data) {\n        // type, row and meta also passed, but not used\n        return data;\n      };\n    } else if (typeof mSource === 'function') {\n      return function (data, type, row, meta) {\n        return mSource(data, type, row, meta);\n      };\n    } else if (typeof mSource === 'string' && (mSource.indexOf('.') !== -1 || mSource.indexOf('[') !== -1 || mSource.indexOf('(') !== -1)) {\n      /* If there is a . in the source string then the data source is in a\n       * nested object so we loop over the data for each level to get the next\n       * level down. On each loop we test for undefined, and if found immediately\n       * return. This allows entire objects to be missing and sDefaultContent to\n       * be used if defined, rather than throwing an error\n       */\n      var fetchData = function fetchData(data, type, src) {\n        var arrayNotation, funcNotation, out, innerSrc;\n\n        if (src !== \"\") {\n          var a = _fnSplitObjNotation(src);\n\n          for (var i = 0, iLen = a.length; i < iLen; i++) {\n            // Check if we are dealing with special notation\n            arrayNotation = a[i].match(__reArray);\n            funcNotation = a[i].match(__reFn);\n\n            if (arrayNotation) {\n              // Array notation\n              a[i] = a[i].replace(__reArray, ''); // Condition allows simply [] to be passed in\n\n              if (a[i] !== \"\") {\n                data = data[a[i]];\n              }\n\n              out = []; // Get the remainder of the nested object to get\n\n              a.splice(0, i + 1);\n              innerSrc = a.join('.'); // Traverse each entry in the array getting the properties requested\n\n              if ($.isArray(data)) {\n                for (var j = 0, jLen = data.length; j < jLen; j++) {\n                  out.push(fetchData(data[j], type, innerSrc));\n                }\n              } // If a string is given in between the array notation indicators, that\n              // is used to join the strings together, otherwise an array is returned\n\n\n              var join = arrayNotation[0].substring(1, arrayNotation[0].length - 1);\n              data = join === \"\" ? out : out.join(join); // The inner call to fetchData has already traversed through the remainder\n              // of the source requested, so we exit from the loop\n\n              break;\n            } else if (funcNotation) {\n              // Function call\n              a[i] = a[i].replace(__reFn, '');\n              data = data[a[i]]();\n              continue;\n            }\n\n            if (data === null || data[a[i]] === undefined) {\n              return undefined;\n            }\n\n            data = data[a[i]];\n          }\n        }\n\n        return data;\n      };\n\n      return function (data, type) {\n        // row and meta also passed, but not used\n        return fetchData(data, type, mSource);\n      };\n    } else {\n      /* Array or flat object mapping */\n      return function (data, type) {\n        // row and meta also passed, but not used\n        return data[mSource];\n      };\n    }\n  }\n  /**\n   * Return a function that can be used to set data from a source object, taking\n   * into account the ability to use nested objects as a source\n   *  @param {string|int|function} mSource The data source for the object\n   *  @returns {function} Data set function\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnSetObjectDataFn(mSource) {\n    if ($.isPlainObject(mSource)) {\n      /* Unlike get, only the underscore (global) option is used for for\n       * setting data since we don't know the type here. This is why an object\n       * option is not documented for `mData` (which is read/write), but it is\n       * for `mRender` which is read only.\n       */\n      return _fnSetObjectDataFn(mSource._);\n    } else if (mSource === null) {\n      /* Nothing to do when the data source is null */\n      return function () {};\n    } else if (typeof mSource === 'function') {\n      return function (data, val, meta) {\n        mSource(data, 'set', val, meta);\n      };\n    } else if (typeof mSource === 'string' && (mSource.indexOf('.') !== -1 || mSource.indexOf('[') !== -1 || mSource.indexOf('(') !== -1)) {\n      /* Like the get, we need to get data from a nested object */\n      var setData = function setData(data, val, src) {\n        var a = _fnSplitObjNotation(src),\n            b;\n\n        var aLast = a[a.length - 1];\n        var arrayNotation, funcNotation, o, innerSrc;\n\n        for (var i = 0, iLen = a.length - 1; i < iLen; i++) {\n          // Check if we are dealing with an array notation request\n          arrayNotation = a[i].match(__reArray);\n          funcNotation = a[i].match(__reFn);\n\n          if (arrayNotation) {\n            a[i] = a[i].replace(__reArray, '');\n            data[a[i]] = []; // Get the remainder of the nested object to set so we can recurse\n\n            b = a.slice();\n            b.splice(0, i + 1);\n            innerSrc = b.join('.'); // Traverse each entry in the array setting the properties requested\n\n            if ($.isArray(val)) {\n              for (var j = 0, jLen = val.length; j < jLen; j++) {\n                o = {};\n                setData(o, val[j], innerSrc);\n                data[a[i]].push(o);\n              }\n            } else {\n              // We've been asked to save data to an array, but it\n              // isn't array data to be saved. Best that can be done\n              // is to just save the value.\n              data[a[i]] = val;\n            } // The inner call to setData has already traversed through the remainder\n            // of the source and has set the data, thus we can exit here\n\n\n            return;\n          } else if (funcNotation) {\n            // Function call\n            a[i] = a[i].replace(__reFn, '');\n            data = data[a[i]](val);\n          } // If the nested object doesn't currently exist - since we are\n          // trying to set the value - create it\n\n\n          if (data[a[i]] === null || data[a[i]] === undefined) {\n            data[a[i]] = {};\n          }\n\n          data = data[a[i]];\n        } // Last item in the input - i.e, the actual set\n\n\n        if (aLast.match(__reFn)) {\n          // Function call\n          data = data[aLast.replace(__reFn, '')](val);\n        } else {\n          // If array notation is used, we just want to strip it and use the property name\n          // and assign the value. If it isn't used, then we get the result we want anyway\n          data[aLast.replace(__reArray, '')] = val;\n        }\n      };\n\n      return function (data, val) {\n        // meta is also passed in, but not used\n        return setData(data, val, mSource);\n      };\n    } else {\n      /* Array or flat object mapping */\n      return function (data, val) {\n        // meta is also passed in, but not used\n        data[mSource] = val;\n      };\n    }\n  }\n  /**\n   * Return an array with the full table data\n   *  @param {object} oSettings dataTables settings object\n   *  @returns array {array} aData Master data array\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnGetDataMaster(settings) {\n    return _pluck(settings.aoData, '_aData');\n  }\n  /**\n   * Nuke the table\n   *  @param {object} oSettings dataTables settings object\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnClearTable(settings) {\n    settings.aoData.length = 0;\n    settings.aiDisplayMaster.length = 0;\n    settings.aiDisplay.length = 0;\n    settings.aIds = {};\n  }\n  /**\n  * Take an array of integers (index array) and remove a target integer (value - not\n  * the key!)\n  *  @param {array} a Index array to target\n  *  @param {int} iTarget value to find\n  *  @memberof DataTable#oApi\n  */\n\n\n  function _fnDeleteIndex(a, iTarget, splice) {\n    var iTargetIndex = -1;\n\n    for (var i = 0, iLen = a.length; i < iLen; i++) {\n      if (a[i] == iTarget) {\n        iTargetIndex = i;\n      } else if (a[i] > iTarget) {\n        a[i]--;\n      }\n    }\n\n    if (iTargetIndex != -1 && splice === undefined) {\n      a.splice(iTargetIndex, 1);\n    }\n  }\n  /**\n   * Mark cached data as invalid such that a re-read of the data will occur when\n   * the cached data is next requested. Also update from the data source object.\n   *\n   * @param {object} settings DataTables settings object\n   * @param {int}    rowIdx   Row index to invalidate\n   * @param {string} [src]    Source to invalidate from: undefined, 'auto', 'dom'\n   *     or 'data'\n   * @param {int}    [colIdx] Column index to invalidate. If undefined the whole\n   *     row will be invalidated\n   * @memberof DataTable#oApi\n   *\n   * @todo For the modularisation of v1.11 this will need to become a callback, so\n   *   the sort and filter methods can subscribe to it. That will required\n   *   initialisation options for sorting, which is why it is not already baked in\n   */\n\n\n  function _fnInvalidate(settings, rowIdx, src, colIdx) {\n    var row = settings.aoData[rowIdx];\n    var i, ien;\n\n    var cellWrite = function cellWrite(cell, col) {\n      // This is very frustrating, but in IE if you just write directly\n      // to innerHTML, and elements that are overwritten are GC'ed,\n      // even if there is a reference to them elsewhere\n      while (cell.childNodes.length) {\n        cell.removeChild(cell.firstChild);\n      }\n\n      cell.innerHTML = _fnGetCellData(settings, rowIdx, col, 'display');\n    }; // Are we reading last data from DOM or the data object?\n\n\n    if (src === 'dom' || (!src || src === 'auto') && row.src === 'dom') {\n      // Read the data from the DOM\n      row._aData = _fnGetRowElements(settings, row, colIdx, colIdx === undefined ? undefined : row._aData).data;\n    } else {\n      // Reading from data object, update the DOM\n      var cells = row.anCells;\n\n      if (cells) {\n        if (colIdx !== undefined) {\n          cellWrite(cells[colIdx], colIdx);\n        } else {\n          for (i = 0, ien = cells.length; i < ien; i++) {\n            cellWrite(cells[i], i);\n          }\n        }\n      }\n    } // For both row and cell invalidation, the cached data for sorting and\n    // filtering is nulled out\n\n\n    row._aSortData = null;\n    row._aFilterData = null; // Invalidate the type for a specific column (if given) or all columns since\n    // the data might have changed\n\n    var cols = settings.aoColumns;\n\n    if (colIdx !== undefined) {\n      cols[colIdx].sType = null;\n    } else {\n      for (i = 0, ien = cols.length; i < ien; i++) {\n        cols[i].sType = null;\n      } // Update DataTables special `DT_*` attributes for the row\n\n\n      _fnRowAttributes(settings, row);\n    }\n  }\n  /**\n   * Build a data source object from an HTML row, reading the contents of the\n   * cells that are in the row.\n   *\n   * @param {object} settings DataTables settings object\n   * @param {node|object} TR element from which to read data or existing row\n   *   object from which to re-read the data from the cells\n   * @param {int} [colIdx] Optional column index\n   * @param {array|object} [d] Data source object. If `colIdx` is given then this\n   *   parameter should also be given and will be used to write the data into.\n   *   Only the column in question will be written\n   * @returns {object} Object with two parameters: `data` the data read, in\n   *   document order, and `cells` and array of nodes (they can be useful to the\n   *   caller, so rather than needing a second traversal to get them, just return\n   *   them from here).\n   * @memberof DataTable#oApi\n   */\n\n\n  function _fnGetRowElements(settings, row, colIdx, d) {\n    var tds = [],\n        td = row.firstChild,\n        name,\n        col,\n        o,\n        i = 0,\n        contents,\n        columns = settings.aoColumns,\n        objectRead = settings._rowReadObject; // Allow the data object to be passed in, or construct\n\n    d = d !== undefined ? d : objectRead ? {} : [];\n\n    var attr = function attr(str, td) {\n      if (typeof str === 'string') {\n        var idx = str.indexOf('@');\n\n        if (idx !== -1) {\n          var attr = str.substring(idx + 1);\n\n          var setter = _fnSetObjectDataFn(str);\n\n          setter(d, td.getAttribute(attr));\n        }\n      }\n    }; // Read data from a cell and store into the data object\n\n\n    var cellProcess = function cellProcess(cell) {\n      if (colIdx === undefined || colIdx === i) {\n        col = columns[i];\n        contents = $.trim(cell.innerHTML);\n\n        if (col && col._bAttrSrc) {\n          var setter = _fnSetObjectDataFn(col.mData._);\n\n          setter(d, contents);\n          attr(col.mData.sort, cell);\n          attr(col.mData.type, cell);\n          attr(col.mData.filter, cell);\n        } else {\n          // Depending on the `data` option for the columns the data can\n          // be read to either an object or an array.\n          if (objectRead) {\n            if (!col._setter) {\n              // Cache the setter function\n              col._setter = _fnSetObjectDataFn(col.mData);\n            }\n\n            col._setter(d, contents);\n          } else {\n            d[i] = contents;\n          }\n        }\n      }\n\n      i++;\n    };\n\n    if (td) {\n      // `tr` element was passed in\n      while (td) {\n        name = td.nodeName.toUpperCase();\n\n        if (name == \"TD\" || name == \"TH\") {\n          cellProcess(td);\n          tds.push(td);\n        }\n\n        td = td.nextSibling;\n      }\n    } else {\n      // Existing row object passed in\n      tds = row.anCells;\n\n      for (var j = 0, jen = tds.length; j < jen; j++) {\n        cellProcess(tds[j]);\n      }\n    } // Read the ID from the DOM if present\n\n\n    var rowNode = row.firstChild ? row : row.nTr;\n\n    if (rowNode) {\n      var id = rowNode.getAttribute('id');\n\n      if (id) {\n        _fnSetObjectDataFn(settings.rowId)(d, id);\n      }\n    }\n\n    return {\n      data: d,\n      cells: tds\n    };\n  }\n  /**\n   * Create a new TR element (and it's TD children) for a row\n   *  @param {object} oSettings dataTables settings object\n   *  @param {int} iRow Row to consider\n   *  @param {node} [nTrIn] TR element to add to the table - optional. If not given,\n   *    DataTables will create a row automatically\n   *  @param {array} [anTds] Array of TD|TH elements for the row - must be given\n   *    if nTr is.\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnCreateTr(oSettings, iRow, nTrIn, anTds) {\n    var row = oSettings.aoData[iRow],\n        rowData = row._aData,\n        cells = [],\n        nTr,\n        nTd,\n        oCol,\n        i,\n        iLen;\n\n    if (row.nTr === null) {\n      nTr = nTrIn || document.createElement('tr');\n      row.nTr = nTr;\n      row.anCells = cells;\n      /* Use a private property on the node to allow reserve mapping from the node\n       * to the aoData array for fast look up\n       */\n\n      nTr._DT_RowIndex = iRow;\n      /* Special parameters can be given by the data source to be used on the row */\n\n      _fnRowAttributes(oSettings, row);\n      /* Process each column */\n\n\n      for (i = 0, iLen = oSettings.aoColumns.length; i < iLen; i++) {\n        oCol = oSettings.aoColumns[i];\n        nTd = nTrIn ? anTds[i] : document.createElement(oCol.sCellType);\n        nTd._DT_CellIndex = {\n          row: iRow,\n          column: i\n        };\n        cells.push(nTd); // Need to create the HTML if new, or if a rendering function is defined\n\n        if ((!nTrIn || oCol.mRender || oCol.mData !== i) && (!$.isPlainObject(oCol.mData) || oCol.mData._ !== i + '.display')) {\n          nTd.innerHTML = _fnGetCellData(oSettings, iRow, i, 'display');\n        }\n        /* Add user defined class */\n\n\n        if (oCol.sClass) {\n          nTd.className += ' ' + oCol.sClass;\n        } // Visibility - add or remove as required\n\n\n        if (oCol.bVisible && !nTrIn) {\n          nTr.appendChild(nTd);\n        } else if (!oCol.bVisible && nTrIn) {\n          nTd.parentNode.removeChild(nTd);\n        }\n\n        if (oCol.fnCreatedCell) {\n          oCol.fnCreatedCell.call(oSettings.oInstance, nTd, _fnGetCellData(oSettings, iRow, i), rowData, iRow, i);\n        }\n      }\n\n      _fnCallbackFire(oSettings, 'aoRowCreatedCallback', null, [nTr, rowData, iRow, cells]);\n    } // Remove once webkit bug 131819 and Chromium bug 365619 have been resolved\n    // and deployed\n\n\n    row.nTr.setAttribute('role', 'row');\n  }\n  /**\n   * Add attributes to a row based on the special `DT_*` parameters in a data\n   * source object.\n   *  @param {object} settings DataTables settings object\n   *  @param {object} DataTables row object for the row to be modified\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnRowAttributes(settings, row) {\n    var tr = row.nTr;\n    var data = row._aData;\n\n    if (tr) {\n      var id = settings.rowIdFn(data);\n\n      if (id) {\n        tr.id = id;\n      }\n\n      if (data.DT_RowClass) {\n        // Remove any classes added by DT_RowClass before\n        var a = data.DT_RowClass.split(' ');\n        row.__rowc = row.__rowc ? _unique(row.__rowc.concat(a)) : a;\n        $(tr).removeClass(row.__rowc.join(' ')).addClass(data.DT_RowClass);\n      }\n\n      if (data.DT_RowAttr) {\n        $(tr).attr(data.DT_RowAttr);\n      }\n\n      if (data.DT_RowData) {\n        $(tr).data(data.DT_RowData);\n      }\n    }\n  }\n  /**\n   * Create the HTML header for the table\n   *  @param {object} oSettings dataTables settings object\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnBuildHead(oSettings) {\n    var i, ien, cell, row, column;\n    var thead = oSettings.nTHead;\n    var tfoot = oSettings.nTFoot;\n    var createHeader = $('th, td', thead).length === 0;\n    var classes = oSettings.oClasses;\n    var columns = oSettings.aoColumns;\n\n    if (createHeader) {\n      row = $('<tr/>').appendTo(thead);\n    }\n\n    for (i = 0, ien = columns.length; i < ien; i++) {\n      column = columns[i];\n      cell = $(column.nTh).addClass(column.sClass);\n\n      if (createHeader) {\n        cell.appendTo(row);\n      } // 1.11 move into sorting\n\n\n      if (oSettings.oFeatures.bSort) {\n        cell.addClass(column.sSortingClass);\n\n        if (column.bSortable !== false) {\n          cell.attr('tabindex', oSettings.iTabIndex).attr('aria-controls', oSettings.sTableId);\n\n          _fnSortAttachListener(oSettings, column.nTh, i);\n        }\n      }\n\n      if (column.sTitle != cell[0].innerHTML) {\n        cell.html(column.sTitle);\n      }\n\n      _fnRenderer(oSettings, 'header')(oSettings, cell, column, classes);\n    }\n\n    if (createHeader) {\n      _fnDetectHeader(oSettings.aoHeader, thead);\n    }\n    /* ARIA role for the rows */\n\n\n    $(thead).find('>tr').attr('role', 'row');\n    /* Deal with the footer - add classes if required */\n\n    $(thead).find('>tr>th, >tr>td').addClass(classes.sHeaderTH);\n    $(tfoot).find('>tr>th, >tr>td').addClass(classes.sFooterTH); // Cache the footer cells. Note that we only take the cells from the first\n    // row in the footer. If there is more than one row the user wants to\n    // interact with, they need to use the table().foot() method. Note also this\n    // allows cells to be used for multiple columns using colspan\n\n    if (tfoot !== null) {\n      var cells = oSettings.aoFooter[0];\n\n      for (i = 0, ien = cells.length; i < ien; i++) {\n        column = columns[i];\n        column.nTf = cells[i].cell;\n\n        if (column.sClass) {\n          $(column.nTf).addClass(column.sClass);\n        }\n      }\n    }\n  }\n  /**\n   * Draw the header (or footer) element based on the column visibility states. The\n   * methodology here is to use the layout array from _fnDetectHeader, modified for\n   * the instantaneous column visibility, to construct the new layout. The grid is\n   * traversed over cell at a time in a rows x columns grid fashion, although each\n   * cell insert can cover multiple elements in the grid - which is tracks using the\n   * aApplied array. Cell inserts in the grid will only occur where there isn't\n   * already a cell in that position.\n   *  @param {object} oSettings dataTables settings object\n   *  @param array {objects} aoSource Layout array from _fnDetectHeader\n   *  @param {boolean} [bIncludeHidden=false] If true then include the hidden columns in the calc,\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnDrawHead(oSettings, aoSource, bIncludeHidden) {\n    var i, iLen, j, jLen, k, kLen, n, nLocalTr;\n    var aoLocal = [];\n    var aApplied = [];\n    var iColumns = oSettings.aoColumns.length;\n    var iRowspan, iColspan;\n\n    if (!aoSource) {\n      return;\n    }\n\n    if (bIncludeHidden === undefined) {\n      bIncludeHidden = false;\n    }\n    /* Make a copy of the master layout array, but without the visible columns in it */\n\n\n    for (i = 0, iLen = aoSource.length; i < iLen; i++) {\n      aoLocal[i] = aoSource[i].slice();\n      aoLocal[i].nTr = aoSource[i].nTr;\n      /* Remove any columns which are currently hidden */\n\n      for (j = iColumns - 1; j >= 0; j--) {\n        if (!oSettings.aoColumns[j].bVisible && !bIncludeHidden) {\n          aoLocal[i].splice(j, 1);\n        }\n      }\n      /* Prep the applied array - it needs an element for each row */\n\n\n      aApplied.push([]);\n    }\n\n    for (i = 0, iLen = aoLocal.length; i < iLen; i++) {\n      nLocalTr = aoLocal[i].nTr;\n      /* All cells are going to be replaced, so empty out the row */\n\n      if (nLocalTr) {\n        while (n = nLocalTr.firstChild) {\n          nLocalTr.removeChild(n);\n        }\n      }\n\n      for (j = 0, jLen = aoLocal[i].length; j < jLen; j++) {\n        iRowspan = 1;\n        iColspan = 1;\n        /* Check to see if there is already a cell (row/colspan) covering our target\n         * insert point. If there is, then there is nothing to do.\n         */\n\n        if (aApplied[i][j] === undefined) {\n          nLocalTr.appendChild(aoLocal[i][j].cell);\n          aApplied[i][j] = 1;\n          /* Expand the cell to cover as many rows as needed */\n\n          while (aoLocal[i + iRowspan] !== undefined && aoLocal[i][j].cell == aoLocal[i + iRowspan][j].cell) {\n            aApplied[i + iRowspan][j] = 1;\n            iRowspan++;\n          }\n          /* Expand the cell to cover as many columns as needed */\n\n\n          while (aoLocal[i][j + iColspan] !== undefined && aoLocal[i][j].cell == aoLocal[i][j + iColspan].cell) {\n            /* Must update the applied array over the rows for the columns */\n            for (k = 0; k < iRowspan; k++) {\n              aApplied[i + k][j + iColspan] = 1;\n            }\n\n            iColspan++;\n          }\n          /* Do the actual expansion in the DOM */\n\n\n          $(aoLocal[i][j].cell).attr('rowspan', iRowspan).attr('colspan', iColspan);\n        }\n      }\n    }\n  }\n  /**\n   * Insert the required TR nodes into the table for display\n   *  @param {object} oSettings dataTables settings object\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnDraw(oSettings) {\n    /* Provide a pre-callback function which can be used to cancel the draw is false is returned */\n    var aPreDraw = _fnCallbackFire(oSettings, 'aoPreDrawCallback', 'preDraw', [oSettings]);\n\n    if ($.inArray(false, aPreDraw) !== -1) {\n      _fnProcessingDisplay(oSettings, false);\n\n      return;\n    }\n\n    var i, iLen, n;\n    var anRows = [];\n    var iRowCount = 0;\n    var asStripeClasses = oSettings.asStripeClasses;\n    var iStripes = asStripeClasses.length;\n    var iOpenRows = oSettings.aoOpenRows.length;\n    var oLang = oSettings.oLanguage;\n    var iInitDisplayStart = oSettings.iInitDisplayStart;\n    var bServerSide = _fnDataSource(oSettings) == 'ssp';\n    var aiDisplay = oSettings.aiDisplay;\n    oSettings.bDrawing = true;\n    /* Check and see if we have an initial draw position from state saving */\n\n    if (iInitDisplayStart !== undefined && iInitDisplayStart !== -1) {\n      oSettings._iDisplayStart = bServerSide ? iInitDisplayStart : iInitDisplayStart >= oSettings.fnRecordsDisplay() ? 0 : iInitDisplayStart;\n      oSettings.iInitDisplayStart = -1;\n    }\n\n    var iDisplayStart = oSettings._iDisplayStart;\n    var iDisplayEnd = oSettings.fnDisplayEnd();\n    /* Server-side processing draw intercept */\n\n    if (oSettings.bDeferLoading) {\n      oSettings.bDeferLoading = false;\n      oSettings.iDraw++;\n\n      _fnProcessingDisplay(oSettings, false);\n    } else if (!bServerSide) {\n      oSettings.iDraw++;\n    } else if (!oSettings.bDestroying && !_fnAjaxUpdate(oSettings)) {\n      return;\n    }\n\n    if (aiDisplay.length !== 0) {\n      var iStart = bServerSide ? 0 : iDisplayStart;\n      var iEnd = bServerSide ? oSettings.aoData.length : iDisplayEnd;\n\n      for (var j = iStart; j < iEnd; j++) {\n        var iDataIndex = aiDisplay[j];\n        var aoData = oSettings.aoData[iDataIndex];\n\n        if (aoData.nTr === null) {\n          _fnCreateTr(oSettings, iDataIndex);\n        }\n\n        var nRow = aoData.nTr;\n        /* Remove the old striping classes and then add the new one */\n\n        if (iStripes !== 0) {\n          var sStripe = asStripeClasses[iRowCount % iStripes];\n\n          if (aoData._sRowStripe != sStripe) {\n            $(nRow).removeClass(aoData._sRowStripe).addClass(sStripe);\n            aoData._sRowStripe = sStripe;\n          }\n        } // Row callback functions - might want to manipulate the row\n        // iRowCount and j are not currently documented. Are they at all\n        // useful?\n\n\n        _fnCallbackFire(oSettings, 'aoRowCallback', null, [nRow, aoData._aData, iRowCount, j, iDataIndex]);\n\n        anRows.push(nRow);\n        iRowCount++;\n      }\n    } else {\n      /* Table is empty - create a row with an empty message in it */\n      var sZero = oLang.sZeroRecords;\n\n      if (oSettings.iDraw == 1 && _fnDataSource(oSettings) == 'ajax') {\n        sZero = oLang.sLoadingRecords;\n      } else if (oLang.sEmptyTable && oSettings.fnRecordsTotal() === 0) {\n        sZero = oLang.sEmptyTable;\n      }\n\n      anRows[0] = $('<tr/>', {\n        'class': iStripes ? asStripeClasses[0] : ''\n      }).append($('<td />', {\n        'valign': 'top',\n        'colSpan': _fnVisbleColumns(oSettings),\n        'class': oSettings.oClasses.sRowEmpty\n      }).html(sZero))[0];\n    }\n    /* Header and footer callbacks */\n\n\n    _fnCallbackFire(oSettings, 'aoHeaderCallback', 'header', [$(oSettings.nTHead).children('tr')[0], _fnGetDataMaster(oSettings), iDisplayStart, iDisplayEnd, aiDisplay]);\n\n    _fnCallbackFire(oSettings, 'aoFooterCallback', 'footer', [$(oSettings.nTFoot).children('tr')[0], _fnGetDataMaster(oSettings), iDisplayStart, iDisplayEnd, aiDisplay]);\n\n    var body = $(oSettings.nTBody);\n    body.children().detach();\n    body.append($(anRows));\n    /* Call all required callback functions for the end of a draw */\n\n    _fnCallbackFire(oSettings, 'aoDrawCallback', 'draw', [oSettings]);\n    /* Draw is complete, sorting and filtering must be as well */\n\n\n    oSettings.bSorted = false;\n    oSettings.bFiltered = false;\n    oSettings.bDrawing = false;\n  }\n  /**\n   * Redraw the table - taking account of the various features which are enabled\n   *  @param {object} oSettings dataTables settings object\n   *  @param {boolean} [holdPosition] Keep the current paging position. By default\n   *    the paging is reset to the first page\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnReDraw(settings, holdPosition) {\n    var features = settings.oFeatures,\n        sort = features.bSort,\n        filter = features.bFilter;\n\n    if (sort) {\n      _fnSort(settings);\n    }\n\n    if (filter) {\n      _fnFilterComplete(settings, settings.oPreviousSearch);\n    } else {\n      // No filtering, so we want to just use the display master\n      settings.aiDisplay = settings.aiDisplayMaster.slice();\n    }\n\n    if (holdPosition !== true) {\n      settings._iDisplayStart = 0;\n    } // Let any modules know about the draw hold position state (used by\n    // scrolling internally)\n\n\n    settings._drawHold = holdPosition;\n\n    _fnDraw(settings);\n\n    settings._drawHold = false;\n  }\n  /**\n   * Add the options to the page HTML for the table\n   *  @param {object} oSettings dataTables settings object\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnAddOptionsHtml(oSettings) {\n    var classes = oSettings.oClasses;\n    var table = $(oSettings.nTable);\n    var holding = $('<div/>').insertBefore(table); // Holding element for speed\n\n    var features = oSettings.oFeatures; // All DataTables are wrapped in a div\n\n    var insert = $('<div/>', {\n      id: oSettings.sTableId + '_wrapper',\n      'class': classes.sWrapper + (oSettings.nTFoot ? '' : ' ' + classes.sNoFooter)\n    });\n    oSettings.nHolding = holding[0];\n    oSettings.nTableWrapper = insert[0];\n    oSettings.nTableReinsertBefore = oSettings.nTable.nextSibling;\n    /* Loop over the user set positioning and place the elements as needed */\n\n    var aDom = oSettings.sDom.split('');\n    var featureNode, cOption, nNewNode, cNext, sAttr, j;\n\n    for (var i = 0; i < aDom.length; i++) {\n      featureNode = null;\n      cOption = aDom[i];\n\n      if (cOption == '<') {\n        /* New container div */\n        nNewNode = $('<div/>')[0];\n        /* Check to see if we should append an id and/or a class name to the container */\n\n        cNext = aDom[i + 1];\n\n        if (cNext == \"'\" || cNext == '\"') {\n          sAttr = \"\";\n          j = 2;\n\n          while (aDom[i + j] != cNext) {\n            sAttr += aDom[i + j];\n            j++;\n          }\n          /* Replace jQuery UI constants @todo depreciated */\n\n\n          if (sAttr == \"H\") {\n            sAttr = classes.sJUIHeader;\n          } else if (sAttr == \"F\") {\n            sAttr = classes.sJUIFooter;\n          }\n          /* The attribute can be in the format of \"#id.class\", \"#id\" or \"class\" This logic\n           * breaks the string into parts and applies them as needed\n           */\n\n\n          if (sAttr.indexOf('.') != -1) {\n            var aSplit = sAttr.split('.');\n            nNewNode.id = aSplit[0].substr(1, aSplit[0].length - 1);\n            nNewNode.className = aSplit[1];\n          } else if (sAttr.charAt(0) == \"#\") {\n            nNewNode.id = sAttr.substr(1, sAttr.length - 1);\n          } else {\n            nNewNode.className = sAttr;\n          }\n\n          i += j;\n          /* Move along the position array */\n        }\n\n        insert.append(nNewNode);\n        insert = $(nNewNode);\n      } else if (cOption == '>') {\n        /* End container div */\n        insert = insert.parent();\n      } // @todo Move options into their own plugins?\n      else if (cOption == 'l' && features.bPaginate && features.bLengthChange) {\n          /* Length */\n          featureNode = _fnFeatureHtmlLength(oSettings);\n        } else if (cOption == 'f' && features.bFilter) {\n          /* Filter */\n          featureNode = _fnFeatureHtmlFilter(oSettings);\n        } else if (cOption == 'r' && features.bProcessing) {\n          /* pRocessing */\n          featureNode = _fnFeatureHtmlProcessing(oSettings);\n        } else if (cOption == 't') {\n          /* Table */\n          featureNode = _fnFeatureHtmlTable(oSettings);\n        } else if (cOption == 'i' && features.bInfo) {\n          /* Info */\n          featureNode = _fnFeatureHtmlInfo(oSettings);\n        } else if (cOption == 'p' && features.bPaginate) {\n          /* Pagination */\n          featureNode = _fnFeatureHtmlPaginate(oSettings);\n        } else if (DataTable.ext.feature.length !== 0) {\n          /* Plug-in features */\n          var aoFeatures = DataTable.ext.feature;\n\n          for (var k = 0, kLen = aoFeatures.length; k < kLen; k++) {\n            if (cOption == aoFeatures[k].cFeature) {\n              featureNode = aoFeatures[k].fnInit(oSettings);\n              break;\n            }\n          }\n        }\n      /* Add to the 2D features array */\n\n\n      if (featureNode) {\n        var aanFeatures = oSettings.aanFeatures;\n\n        if (!aanFeatures[cOption]) {\n          aanFeatures[cOption] = [];\n        }\n\n        aanFeatures[cOption].push(featureNode);\n        insert.append(featureNode);\n      }\n    }\n    /* Built our DOM structure - replace the holding div with what we want */\n\n\n    holding.replaceWith(insert);\n    oSettings.nHolding = null;\n  }\n  /**\n   * Use the DOM source to create up an array of header cells. The idea here is to\n   * create a layout grid (array) of rows x columns, which contains a reference\n   * to the cell that that point in the grid (regardless of col/rowspan), such that\n   * any column / row could be removed and the new grid constructed\n   *  @param array {object} aLayout Array to store the calculated layout in\n   *  @param {node} nThead The header/footer element for the table\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnDetectHeader(aLayout, nThead) {\n    var nTrs = $(nThead).children('tr');\n    var nTr, nCell;\n    var i, k, l, iLen, jLen, iColShifted, iColumn, iColspan, iRowspan;\n    var bUnique;\n\n    var fnShiftCol = function fnShiftCol(a, i, j) {\n      var k = a[i];\n\n      while (k[j]) {\n        j++;\n      }\n\n      return j;\n    };\n\n    aLayout.splice(0, aLayout.length);\n    /* We know how many rows there are in the layout - so prep it */\n\n    for (i = 0, iLen = nTrs.length; i < iLen; i++) {\n      aLayout.push([]);\n    }\n    /* Calculate a layout array */\n\n\n    for (i = 0, iLen = nTrs.length; i < iLen; i++) {\n      nTr = nTrs[i];\n      iColumn = 0;\n      /* For every cell in the row... */\n\n      nCell = nTr.firstChild;\n\n      while (nCell) {\n        if (nCell.nodeName.toUpperCase() == \"TD\" || nCell.nodeName.toUpperCase() == \"TH\") {\n          /* Get the col and rowspan attributes from the DOM and sanitise them */\n          iColspan = nCell.getAttribute('colspan') * 1;\n          iRowspan = nCell.getAttribute('rowspan') * 1;\n          iColspan = !iColspan || iColspan === 0 || iColspan === 1 ? 1 : iColspan;\n          iRowspan = !iRowspan || iRowspan === 0 || iRowspan === 1 ? 1 : iRowspan;\n          /* There might be colspan cells already in this row, so shift our target\n           * accordingly\n           */\n\n          iColShifted = fnShiftCol(aLayout, i, iColumn);\n          /* Cache calculation for unique columns */\n\n          bUnique = iColspan === 1 ? true : false;\n          /* If there is col / rowspan, copy the information into the layout grid */\n\n          for (l = 0; l < iColspan; l++) {\n            for (k = 0; k < iRowspan; k++) {\n              aLayout[i + k][iColShifted + l] = {\n                \"cell\": nCell,\n                \"unique\": bUnique\n              };\n              aLayout[i + k].nTr = nTr;\n            }\n          }\n        }\n\n        nCell = nCell.nextSibling;\n      }\n    }\n  }\n  /**\n   * Get an array of unique th elements, one for each column\n   *  @param {object} oSettings dataTables settings object\n   *  @param {node} nHeader automatically detect the layout from this node - optional\n   *  @param {array} aLayout thead/tfoot layout from _fnDetectHeader - optional\n   *  @returns array {node} aReturn list of unique th's\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnGetUniqueThs(oSettings, nHeader, aLayout) {\n    var aReturn = [];\n\n    if (!aLayout) {\n      aLayout = oSettings.aoHeader;\n\n      if (nHeader) {\n        aLayout = [];\n\n        _fnDetectHeader(aLayout, nHeader);\n      }\n    }\n\n    for (var i = 0, iLen = aLayout.length; i < iLen; i++) {\n      for (var j = 0, jLen = aLayout[i].length; j < jLen; j++) {\n        if (aLayout[i][j].unique && (!aReturn[j] || !oSettings.bSortCellsTop)) {\n          aReturn[j] = aLayout[i][j].cell;\n        }\n      }\n    }\n\n    return aReturn;\n  }\n  /**\n   * Create an Ajax call based on the table's settings, taking into account that\n   * parameters can have multiple forms, and backwards compatibility.\n   *\n   * @param {object} oSettings dataTables settings object\n   * @param {array} data Data to send to the server, required by\n   *     DataTables - may be augmented by developer callbacks\n   * @param {function} fn Callback function to run when data is obtained\n   */\n\n\n  function _fnBuildAjax(oSettings, data, fn) {\n    // Compatibility with 1.9-, allow fnServerData and event to manipulate\n    _fnCallbackFire(oSettings, 'aoServerParams', 'serverParams', [data]); // Convert to object based for 1.10+ if using the old array scheme which can\n    // come from server-side processing or serverParams\n\n\n    if (data && $.isArray(data)) {\n      var tmp = {};\n      var rbracket = /(.*?)\\[\\]$/;\n      $.each(data, function (key, val) {\n        var match = val.name.match(rbracket);\n\n        if (match) {\n          // Support for arrays\n          var name = match[0];\n\n          if (!tmp[name]) {\n            tmp[name] = [];\n          }\n\n          tmp[name].push(val.value);\n        } else {\n          tmp[val.name] = val.value;\n        }\n      });\n      data = tmp;\n    }\n\n    var ajaxData;\n    var ajax = oSettings.ajax;\n    var instance = oSettings.oInstance;\n\n    var callback = function callback(json) {\n      _fnCallbackFire(oSettings, null, 'xhr', [oSettings, json, oSettings.jqXHR]);\n\n      fn(json);\n    };\n\n    if ($.isPlainObject(ajax) && ajax.data) {\n      ajaxData = ajax.data;\n      var newData = typeof ajaxData === 'function' ? ajaxData(data, oSettings) : // fn can manipulate data or return\n      ajaxData; // an object object or array to merge\n      // If the function returned something, use that alone\n\n      data = typeof ajaxData === 'function' && newData ? newData : $.extend(true, data, newData); // Remove the data property as we've resolved it already and don't want\n      // jQuery to do it again (it is restored at the end of the function)\n\n      delete ajax.data;\n    }\n\n    var baseAjax = {\n      \"data\": data,\n      \"success\": function success(json) {\n        var error = json.error || json.sError;\n\n        if (error) {\n          _fnLog(oSettings, 0, error);\n        }\n\n        oSettings.json = json;\n        callback(json);\n      },\n      \"dataType\": \"json\",\n      \"cache\": false,\n      \"type\": oSettings.sServerMethod,\n      \"error\": function error(xhr, _error, thrown) {\n        var ret = _fnCallbackFire(oSettings, null, 'xhr', [oSettings, null, oSettings.jqXHR]);\n\n        if ($.inArray(true, ret) === -1) {\n          if (_error == \"parsererror\") {\n            _fnLog(oSettings, 0, 'Invalid JSON response', 1);\n          } else if (xhr.readyState === 4) {\n            _fnLog(oSettings, 0, 'Ajax error', 7);\n          }\n        }\n\n        _fnProcessingDisplay(oSettings, false);\n      }\n    }; // Store the data submitted for the API\n\n    oSettings.oAjaxData = data; // Allow plug-ins and external processes to modify the data\n\n    _fnCallbackFire(oSettings, null, 'preXhr', [oSettings, data]);\n\n    if (oSettings.fnServerData) {\n      // DataTables 1.9- compatibility\n      oSettings.fnServerData.call(instance, oSettings.sAjaxSource, $.map(data, function (val, key) {\n        // Need to convert back to 1.9 trad format\n        return {\n          name: key,\n          value: val\n        };\n      }), callback, oSettings);\n    } else if (oSettings.sAjaxSource || typeof ajax === 'string') {\n      // DataTables 1.9- compatibility\n      oSettings.jqXHR = $.ajax($.extend(baseAjax, {\n        url: ajax || oSettings.sAjaxSource\n      }));\n    } else if (typeof ajax === 'function') {\n      // Is a function - let the caller define what needs to be done\n      oSettings.jqXHR = ajax.call(instance, data, callback, oSettings);\n    } else {\n      // Object to extend the base settings\n      oSettings.jqXHR = $.ajax($.extend(baseAjax, ajax)); // Restore for next time around\n\n      ajax.data = ajaxData;\n    }\n  }\n  /**\n   * Update the table using an Ajax call\n   *  @param {object} settings dataTables settings object\n   *  @returns {boolean} Block the table drawing or not\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnAjaxUpdate(settings) {\n    if (settings.bAjaxDataGet) {\n      settings.iDraw++;\n\n      _fnProcessingDisplay(settings, true);\n\n      _fnBuildAjax(settings, _fnAjaxParameters(settings), function (json) {\n        _fnAjaxUpdateDraw(settings, json);\n      });\n\n      return false;\n    }\n\n    return true;\n  }\n  /**\n   * Build up the parameters in an object needed for a server-side processing\n   * request. Note that this is basically done twice, is different ways - a modern\n   * method which is used by default in DataTables 1.10 which uses objects and\n   * arrays, or the 1.9- method with is name / value pairs. 1.9 method is used if\n   * the sAjaxSource option is used in the initialisation, or the legacyAjax\n   * option is set.\n   *  @param {object} oSettings dataTables settings object\n   *  @returns {bool} block the table drawing or not\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnAjaxParameters(settings) {\n    var columns = settings.aoColumns,\n        columnCount = columns.length,\n        features = settings.oFeatures,\n        preSearch = settings.oPreviousSearch,\n        preColSearch = settings.aoPreSearchCols,\n        i,\n        data = [],\n        dataProp,\n        column,\n        columnSearch,\n        sort = _fnSortFlatten(settings),\n        displayStart = settings._iDisplayStart,\n        displayLength = features.bPaginate !== false ? settings._iDisplayLength : -1;\n\n    var param = function param(name, value) {\n      data.push({\n        'name': name,\n        'value': value\n      });\n    }; // DataTables 1.9- compatible method\n\n\n    param('sEcho', settings.iDraw);\n    param('iColumns', columnCount);\n    param('sColumns', _pluck(columns, 'sName').join(','));\n    param('iDisplayStart', displayStart);\n    param('iDisplayLength', displayLength); // DataTables 1.10+ method\n\n    var d = {\n      draw: settings.iDraw,\n      columns: [],\n      order: [],\n      start: displayStart,\n      length: displayLength,\n      search: {\n        value: preSearch.sSearch,\n        regex: preSearch.bRegex\n      }\n    };\n\n    for (i = 0; i < columnCount; i++) {\n      column = columns[i];\n      columnSearch = preColSearch[i];\n      dataProp = typeof column.mData == \"function\" ? 'function' : column.mData;\n      d.columns.push({\n        data: dataProp,\n        name: column.sName,\n        searchable: column.bSearchable,\n        orderable: column.bSortable,\n        search: {\n          value: columnSearch.sSearch,\n          regex: columnSearch.bRegex\n        }\n      });\n      param(\"mDataProp_\" + i, dataProp);\n\n      if (features.bFilter) {\n        param('sSearch_' + i, columnSearch.sSearch);\n        param('bRegex_' + i, columnSearch.bRegex);\n        param('bSearchable_' + i, column.bSearchable);\n      }\n\n      if (features.bSort) {\n        param('bSortable_' + i, column.bSortable);\n      }\n    }\n\n    if (features.bFilter) {\n      param('sSearch', preSearch.sSearch);\n      param('bRegex', preSearch.bRegex);\n    }\n\n    if (features.bSort) {\n      $.each(sort, function (i, val) {\n        d.order.push({\n          column: val.col,\n          dir: val.dir\n        });\n        param('iSortCol_' + i, val.col);\n        param('sSortDir_' + i, val.dir);\n      });\n      param('iSortingCols', sort.length);\n    } // If the legacy.ajax parameter is null, then we automatically decide which\n    // form to use, based on sAjaxSource\n\n\n    var legacy = DataTable.ext.legacy.ajax;\n\n    if (legacy === null) {\n      return settings.sAjaxSource ? data : d;\n    } // Otherwise, if legacy has been specified then we use that to decide on the\n    // form\n\n\n    return legacy ? data : d;\n  }\n  /**\n   * Data the data from the server (nuking the old) and redraw the table\n   *  @param {object} oSettings dataTables settings object\n   *  @param {object} json json data return from the server.\n   *  @param {string} json.sEcho Tracking flag for DataTables to match requests\n   *  @param {int} json.iTotalRecords Number of records in the data set, not accounting for filtering\n   *  @param {int} json.iTotalDisplayRecords Number of records in the data set, accounting for filtering\n   *  @param {array} json.aaData The data to display on this page\n   *  @param {string} [json.sColumns] Column ordering (sName, comma separated)\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnAjaxUpdateDraw(settings, json) {\n    // v1.10 uses camelCase variables, while 1.9 uses Hungarian notation.\n    // Support both\n    var compat = function compat(old, modern) {\n      return json[old] !== undefined ? json[old] : json[modern];\n    };\n\n    var data = _fnAjaxDataSrc(settings, json);\n\n    var draw = compat('sEcho', 'draw');\n    var recordsTotal = compat('iTotalRecords', 'recordsTotal');\n    var recordsFiltered = compat('iTotalDisplayRecords', 'recordsFiltered');\n\n    if (draw) {\n      // Protect against out of sequence returns\n      if (draw * 1 < settings.iDraw) {\n        return;\n      }\n\n      settings.iDraw = draw * 1;\n    }\n\n    _fnClearTable(settings);\n\n    settings._iRecordsTotal = parseInt(recordsTotal, 10);\n    settings._iRecordsDisplay = parseInt(recordsFiltered, 10);\n\n    for (var i = 0, ien = data.length; i < ien; i++) {\n      _fnAddData(settings, data[i]);\n    }\n\n    settings.aiDisplay = settings.aiDisplayMaster.slice();\n    settings.bAjaxDataGet = false;\n\n    _fnDraw(settings);\n\n    if (!settings._bInitComplete) {\n      _fnInitComplete(settings, json);\n    }\n\n    settings.bAjaxDataGet = true;\n\n    _fnProcessingDisplay(settings, false);\n  }\n  /**\n   * Get the data from the JSON data source to use for drawing a table. Using\n   * `_fnGetObjectDataFn` allows the data to be sourced from a property of the\n   * source object, or from a processing function.\n   *  @param {object} oSettings dataTables settings object\n   *  @param  {object} json Data source object / array from the server\n   *  @return {array} Array of data to use\n   */\n\n\n  function _fnAjaxDataSrc(oSettings, json) {\n    var dataSrc = $.isPlainObject(oSettings.ajax) && oSettings.ajax.dataSrc !== undefined ? oSettings.ajax.dataSrc : oSettings.sAjaxDataProp; // Compatibility with 1.9-.\n    // Compatibility with 1.9-. In order to read from aaData, check if the\n    // default has been changed, if not, check for aaData\n\n    if (dataSrc === 'data') {\n      return json.aaData || json[dataSrc];\n    }\n\n    return dataSrc !== \"\" ? _fnGetObjectDataFn(dataSrc)(json) : json;\n  }\n  /**\n   * Generate the node required for filtering text\n   *  @returns {node} Filter control element\n   *  @param {object} oSettings dataTables settings object\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnFeatureHtmlFilter(settings) {\n    var classes = settings.oClasses;\n    var tableId = settings.sTableId;\n    var language = settings.oLanguage;\n    var previousSearch = settings.oPreviousSearch;\n    var features = settings.aanFeatures;\n    var input = '<input type=\"search\" class=\"' + classes.sFilterInput + '\"/>';\n    var str = language.sSearch;\n    str = str.match(/_INPUT_/) ? str.replace('_INPUT_', input) : str + input;\n    var filter = $('<div/>', {\n      'id': !features.f ? tableId + '_filter' : null,\n      'class': classes.sFilter\n    }).append($('<label/>').append(str));\n\n    var searchFn = function searchFn() {\n      /* Update all other filter input elements for the new display */\n      var n = features.f;\n      var val = !this.value ? \"\" : this.value; // mental IE8 fix :-(\n\n      /* Now do the filter */\n\n      if (val != previousSearch.sSearch) {\n        _fnFilterComplete(settings, {\n          \"sSearch\": val,\n          \"bRegex\": previousSearch.bRegex,\n          \"bSmart\": previousSearch.bSmart,\n          \"bCaseInsensitive\": previousSearch.bCaseInsensitive\n        }); // Need to redraw, without resorting\n\n\n        settings._iDisplayStart = 0;\n\n        _fnDraw(settings);\n      }\n    };\n\n    var searchDelay = settings.searchDelay !== null ? settings.searchDelay : _fnDataSource(settings) === 'ssp' ? 400 : 0;\n    var jqFilter = $('input', filter).val(previousSearch.sSearch).attr('placeholder', language.sSearchPlaceholder).on('keyup.DT search.DT input.DT paste.DT cut.DT', searchDelay ? _fnThrottle(searchFn, searchDelay) : searchFn).on('keypress.DT', function (e) {\n      /* Prevent form submission */\n      if (e.keyCode == 13) {\n        return false;\n      }\n    }).attr('aria-controls', tableId); // Update the input elements whenever the table is filtered\n\n    $(settings.nTable).on('search.dt.DT', function (ev, s) {\n      if (settings === s) {\n        // IE9 throws an 'unknown error' if document.activeElement is used\n        // inside an iframe or frame...\n        try {\n          if (jqFilter[0] !== document.activeElement) {\n            jqFilter.val(previousSearch.sSearch);\n          }\n        } catch (e) {}\n      }\n    });\n    return filter[0];\n  }\n  /**\n   * Filter the table using both the global filter and column based filtering\n   *  @param {object} oSettings dataTables settings object\n   *  @param {object} oSearch search information\n   *  @param {int} [iForce] force a research of the master array (1) or not (undefined or 0)\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnFilterComplete(oSettings, oInput, iForce) {\n    var oPrevSearch = oSettings.oPreviousSearch;\n    var aoPrevSearch = oSettings.aoPreSearchCols;\n\n    var fnSaveFilter = function fnSaveFilter(oFilter) {\n      /* Save the filtering values */\n      oPrevSearch.sSearch = oFilter.sSearch;\n      oPrevSearch.bRegex = oFilter.bRegex;\n      oPrevSearch.bSmart = oFilter.bSmart;\n      oPrevSearch.bCaseInsensitive = oFilter.bCaseInsensitive;\n    };\n\n    var fnRegex = function fnRegex(o) {\n      // Backwards compatibility with the bEscapeRegex option\n      return o.bEscapeRegex !== undefined ? !o.bEscapeRegex : o.bRegex;\n    }; // Resolve any column types that are unknown due to addition or invalidation\n    // @todo As per sort - can this be moved into an event handler?\n\n\n    _fnColumnTypes(oSettings);\n    /* In server-side processing all filtering is done by the server, so no point hanging around here */\n\n\n    if (_fnDataSource(oSettings) != 'ssp') {\n      /* Global filter */\n      _fnFilter(oSettings, oInput.sSearch, iForce, fnRegex(oInput), oInput.bSmart, oInput.bCaseInsensitive);\n\n      fnSaveFilter(oInput);\n      /* Now do the individual column filter */\n\n      for (var i = 0; i < aoPrevSearch.length; i++) {\n        _fnFilterColumn(oSettings, aoPrevSearch[i].sSearch, i, fnRegex(aoPrevSearch[i]), aoPrevSearch[i].bSmart, aoPrevSearch[i].bCaseInsensitive);\n      }\n      /* Custom filtering */\n\n\n      _fnFilterCustom(oSettings);\n    } else {\n      fnSaveFilter(oInput);\n    }\n    /* Tell the draw function we have been filtering */\n\n\n    oSettings.bFiltered = true;\n\n    _fnCallbackFire(oSettings, null, 'search', [oSettings]);\n  }\n  /**\n   * Apply custom filtering functions\n   *  @param {object} oSettings dataTables settings object\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnFilterCustom(settings) {\n    var filters = DataTable.ext.search;\n    var displayRows = settings.aiDisplay;\n    var row, rowIdx;\n\n    for (var i = 0, ien = filters.length; i < ien; i++) {\n      var rows = []; // Loop over each row and see if it should be included\n\n      for (var j = 0, jen = displayRows.length; j < jen; j++) {\n        rowIdx = displayRows[j];\n        row = settings.aoData[rowIdx];\n\n        if (filters[i](settings, row._aFilterData, rowIdx, row._aData, j)) {\n          rows.push(rowIdx);\n        }\n      } // So the array reference doesn't break set the results into the\n      // existing array\n\n\n      displayRows.length = 0;\n      $.merge(displayRows, rows);\n    }\n  }\n  /**\n   * Filter the table on a per-column basis\n   *  @param {object} oSettings dataTables settings object\n   *  @param {string} sInput string to filter on\n   *  @param {int} iColumn column to filter\n   *  @param {bool} bRegex treat search string as a regular expression or not\n   *  @param {bool} bSmart use smart filtering or not\n   *  @param {bool} bCaseInsensitive Do case insenstive matching or not\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnFilterColumn(settings, searchStr, colIdx, regex, smart, caseInsensitive) {\n    if (searchStr === '') {\n      return;\n    }\n\n    var data;\n    var out = [];\n    var display = settings.aiDisplay;\n\n    var rpSearch = _fnFilterCreateSearch(searchStr, regex, smart, caseInsensitive);\n\n    for (var i = 0; i < display.length; i++) {\n      data = settings.aoData[display[i]]._aFilterData[colIdx];\n\n      if (rpSearch.test(data)) {\n        out.push(display[i]);\n      }\n    }\n\n    settings.aiDisplay = out;\n  }\n  /**\n   * Filter the data table based on user input and draw the table\n   *  @param {object} settings dataTables settings object\n   *  @param {string} input string to filter on\n   *  @param {int} force optional - force a research of the master array (1) or not (undefined or 0)\n   *  @param {bool} regex treat as a regular expression or not\n   *  @param {bool} smart perform smart filtering or not\n   *  @param {bool} caseInsensitive Do case insenstive matching or not\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnFilter(settings, input, force, regex, smart, caseInsensitive) {\n    var rpSearch = _fnFilterCreateSearch(input, regex, smart, caseInsensitive);\n\n    var prevSearch = settings.oPreviousSearch.sSearch;\n    var displayMaster = settings.aiDisplayMaster;\n    var display, invalidated, i;\n    var filtered = []; // Need to take account of custom filtering functions - always filter\n\n    if (DataTable.ext.search.length !== 0) {\n      force = true;\n    } // Check if any of the rows were invalidated\n\n\n    invalidated = _fnFilterData(settings); // If the input is blank - we just want the full data set\n\n    if (input.length <= 0) {\n      settings.aiDisplay = displayMaster.slice();\n    } else {\n      // New search - start from the master array\n      if (invalidated || force || prevSearch.length > input.length || input.indexOf(prevSearch) !== 0 || settings.bSorted // On resort, the display master needs to be\n      // re-filtered since indexes will have changed\n      ) {\n          settings.aiDisplay = displayMaster.slice();\n        } // Search the display array\n\n\n      display = settings.aiDisplay;\n\n      for (i = 0; i < display.length; i++) {\n        if (rpSearch.test(settings.aoData[display[i]]._sFilterRow)) {\n          filtered.push(display[i]);\n        }\n      }\n\n      settings.aiDisplay = filtered;\n    }\n  }\n  /**\n   * Build a regular expression object suitable for searching a table\n   *  @param {string} sSearch string to search for\n   *  @param {bool} bRegex treat as a regular expression or not\n   *  @param {bool} bSmart perform smart filtering or not\n   *  @param {bool} bCaseInsensitive Do case insensitive matching or not\n   *  @returns {RegExp} constructed object\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnFilterCreateSearch(search, regex, smart, caseInsensitive) {\n    search = regex ? search : _fnEscapeRegex(search);\n\n    if (smart) {\n      /* For smart filtering we want to allow the search to work regardless of\n       * word order. We also want double quoted text to be preserved, so word\n       * order is important - a la google. So this is what we want to\n       * generate:\n       * \n       * ^(?=.*?\\bone\\b)(?=.*?\\btwo three\\b)(?=.*?\\bfour\\b).*$\n       */\n      var a = $.map(search.match(/\"[^\"]+\"|[^ ]+/g) || [''], function (word) {\n        if (word.charAt(0) === '\"') {\n          var m = word.match(/^\"(.*)\"$/);\n          word = m ? m[1] : word;\n        }\n\n        return word.replace('\"', '');\n      });\n      search = '^(?=.*?' + a.join(')(?=.*?') + ').*$';\n    }\n\n    return new RegExp(search, caseInsensitive ? 'i' : '');\n  }\n  /**\n   * Escape a string such that it can be used in a regular expression\n   *  @param {string} sVal string to escape\n   *  @returns {string} escaped string\n   *  @memberof DataTable#oApi\n   */\n\n\n  var _fnEscapeRegex = DataTable.util.escapeRegex;\n  var __filter_div = $('<div>')[0];\n\n  var __filter_div_textContent = __filter_div.textContent !== undefined; // Update the filtering data for each row if needed (by invalidation or first run)\n\n\n  function _fnFilterData(settings) {\n    var columns = settings.aoColumns;\n    var column;\n    var i, j, ien, jen, filterData, cellData, row;\n    var fomatters = DataTable.ext.type.search;\n    var wasInvalidated = false;\n\n    for (i = 0, ien = settings.aoData.length; i < ien; i++) {\n      row = settings.aoData[i];\n\n      if (!row._aFilterData) {\n        filterData = [];\n\n        for (j = 0, jen = columns.length; j < jen; j++) {\n          column = columns[j];\n\n          if (column.bSearchable) {\n            cellData = _fnGetCellData(settings, i, j, 'filter');\n\n            if (fomatters[column.sType]) {\n              cellData = fomatters[column.sType](cellData);\n            } // Search in DataTables 1.10 is string based. In 1.11 this\n            // should be altered to also allow strict type checking.\n\n\n            if (cellData === null) {\n              cellData = '';\n            }\n\n            if (typeof cellData !== 'string' && cellData.toString) {\n              cellData = cellData.toString();\n            }\n          } else {\n            cellData = '';\n          } // If it looks like there is an HTML entity in the string,\n          // attempt to decode it so sorting works as expected. Note that\n          // we could use a single line of jQuery to do this, but the DOM\n          // method used here is much faster http://jsperf.com/html-decode\n\n\n          if (cellData.indexOf && cellData.indexOf('&') !== -1) {\n            __filter_div.innerHTML = cellData;\n            cellData = __filter_div_textContent ? __filter_div.textContent : __filter_div.innerText;\n          }\n\n          if (cellData.replace) {\n            cellData = cellData.replace(/[\\r\\n]/g, '');\n          }\n\n          filterData.push(cellData);\n        }\n\n        row._aFilterData = filterData;\n        row._sFilterRow = filterData.join('  ');\n        wasInvalidated = true;\n      }\n    }\n\n    return wasInvalidated;\n  }\n  /**\n   * Convert from the internal Hungarian notation to camelCase for external\n   * interaction\n   *  @param {object} obj Object to convert\n   *  @returns {object} Inverted object\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnSearchToCamel(obj) {\n    return {\n      search: obj.sSearch,\n      smart: obj.bSmart,\n      regex: obj.bRegex,\n      caseInsensitive: obj.bCaseInsensitive\n    };\n  }\n  /**\n   * Convert from camelCase notation to the internal Hungarian. We could use the\n   * Hungarian convert function here, but this is cleaner\n   *  @param {object} obj Object to convert\n   *  @returns {object} Inverted object\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnSearchToHung(obj) {\n    return {\n      sSearch: obj.search,\n      bSmart: obj.smart,\n      bRegex: obj.regex,\n      bCaseInsensitive: obj.caseInsensitive\n    };\n  }\n  /**\n   * Generate the node required for the info display\n   *  @param {object} oSettings dataTables settings object\n   *  @returns {node} Information element\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnFeatureHtmlInfo(settings) {\n    var tid = settings.sTableId,\n        nodes = settings.aanFeatures.i,\n        n = $('<div/>', {\n      'class': settings.oClasses.sInfo,\n      'id': !nodes ? tid + '_info' : null\n    });\n\n    if (!nodes) {\n      // Update display on each draw\n      settings.aoDrawCallback.push({\n        \"fn\": _fnUpdateInfo,\n        \"sName\": \"information\"\n      });\n      n.attr('role', 'status').attr('aria-live', 'polite'); // Table is described by our info div\n\n      $(settings.nTable).attr('aria-describedby', tid + '_info');\n    }\n\n    return n[0];\n  }\n  /**\n   * Update the information elements in the display\n   *  @param {object} settings dataTables settings object\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnUpdateInfo(settings) {\n    /* Show information about the table */\n    var nodes = settings.aanFeatures.i;\n\n    if (nodes.length === 0) {\n      return;\n    }\n\n    var lang = settings.oLanguage,\n        start = settings._iDisplayStart + 1,\n        end = settings.fnDisplayEnd(),\n        max = settings.fnRecordsTotal(),\n        total = settings.fnRecordsDisplay(),\n        out = total ? lang.sInfo : lang.sInfoEmpty;\n\n    if (total !== max) {\n      /* Record set after filtering */\n      out += ' ' + lang.sInfoFiltered;\n    } // Convert the macros\n\n\n    out += lang.sInfoPostFix;\n    out = _fnInfoMacros(settings, out);\n    var callback = lang.fnInfoCallback;\n\n    if (callback !== null) {\n      out = callback.call(settings.oInstance, settings, start, end, max, total, out);\n    }\n\n    $(nodes).html(out);\n  }\n\n  function _fnInfoMacros(settings, str) {\n    // When infinite scrolling, we are always starting at 1. _iDisplayStart is used only\n    // internally\n    var formatter = settings.fnFormatNumber,\n        start = settings._iDisplayStart + 1,\n        len = settings._iDisplayLength,\n        vis = settings.fnRecordsDisplay(),\n        all = len === -1;\n    return str.replace(/_START_/g, formatter.call(settings, start)).replace(/_END_/g, formatter.call(settings, settings.fnDisplayEnd())).replace(/_MAX_/g, formatter.call(settings, settings.fnRecordsTotal())).replace(/_TOTAL_/g, formatter.call(settings, vis)).replace(/_PAGE_/g, formatter.call(settings, all ? 1 : Math.ceil(start / len))).replace(/_PAGES_/g, formatter.call(settings, all ? 1 : Math.ceil(vis / len)));\n  }\n  /**\n   * Draw the table for the first time, adding all required features\n   *  @param {object} settings dataTables settings object\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnInitialise(settings) {\n    var i,\n        iLen,\n        iAjaxStart = settings.iInitDisplayStart;\n    var columns = settings.aoColumns,\n        column;\n    var features = settings.oFeatures;\n    var deferLoading = settings.bDeferLoading; // value modified by the draw\n\n    /* Ensure that the table data is fully initialised */\n\n    if (!settings.bInitialised) {\n      setTimeout(function () {\n        _fnInitialise(settings);\n      }, 200);\n      return;\n    }\n    /* Show the display HTML options */\n\n\n    _fnAddOptionsHtml(settings);\n    /* Build and draw the header / footer for the table */\n\n\n    _fnBuildHead(settings);\n\n    _fnDrawHead(settings, settings.aoHeader);\n\n    _fnDrawHead(settings, settings.aoFooter);\n    /* Okay to show that something is going on now */\n\n\n    _fnProcessingDisplay(settings, true);\n    /* Calculate sizes for columns */\n\n\n    if (features.bAutoWidth) {\n      _fnCalculateColumnWidths(settings);\n    }\n\n    for (i = 0, iLen = columns.length; i < iLen; i++) {\n      column = columns[i];\n\n      if (column.sWidth) {\n        column.nTh.style.width = _fnStringToCss(column.sWidth);\n      }\n    }\n\n    _fnCallbackFire(settings, null, 'preInit', [settings]); // If there is default sorting required - let's do it. The sort function\n    // will do the drawing for us. Otherwise we draw the table regardless of the\n    // Ajax source - this allows the table to look initialised for Ajax sourcing\n    // data (show 'loading' message possibly)\n\n\n    _fnReDraw(settings); // Server-side processing init complete is done by _fnAjaxUpdateDraw\n\n\n    var dataSrc = _fnDataSource(settings);\n\n    if (dataSrc != 'ssp' || deferLoading) {\n      // if there is an ajax source load the data\n      if (dataSrc == 'ajax') {\n        _fnBuildAjax(settings, [], function (json) {\n          var aData = _fnAjaxDataSrc(settings, json); // Got the data - add it to the table\n\n\n          for (i = 0; i < aData.length; i++) {\n            _fnAddData(settings, aData[i]);\n          } // Reset the init display for cookie saving. We've already done\n          // a filter, and therefore cleared it before. So we need to make\n          // it appear 'fresh'\n\n\n          settings.iInitDisplayStart = iAjaxStart;\n\n          _fnReDraw(settings);\n\n          _fnProcessingDisplay(settings, false);\n\n          _fnInitComplete(settings, json);\n        }, settings);\n      } else {\n        _fnProcessingDisplay(settings, false);\n\n        _fnInitComplete(settings);\n      }\n    }\n  }\n  /**\n   * Draw the table for the first time, adding all required features\n   *  @param {object} oSettings dataTables settings object\n   *  @param {object} [json] JSON from the server that completed the table, if using Ajax source\n   *    with client-side processing (optional)\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnInitComplete(settings, json) {\n    settings._bInitComplete = true; // When data was added after the initialisation (data or Ajax) we need to\n    // calculate the column sizing\n\n    if (json || settings.oInit.aaData) {\n      _fnAdjustColumnSizing(settings);\n    }\n\n    _fnCallbackFire(settings, null, 'plugin-init', [settings, json]);\n\n    _fnCallbackFire(settings, 'aoInitComplete', 'init', [settings, json]);\n  }\n\n  function _fnLengthChange(settings, val) {\n    var len = parseInt(val, 10);\n    settings._iDisplayLength = len;\n\n    _fnLengthOverflow(settings); // Fire length change event\n\n\n    _fnCallbackFire(settings, null, 'length', [settings, len]);\n  }\n  /**\n   * Generate the node required for user display length changing\n   *  @param {object} settings dataTables settings object\n   *  @returns {node} Display length feature node\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnFeatureHtmlLength(settings) {\n    var classes = settings.oClasses,\n        tableId = settings.sTableId,\n        menu = settings.aLengthMenu,\n        d2 = $.isArray(menu[0]),\n        lengths = d2 ? menu[0] : menu,\n        language = d2 ? menu[1] : menu;\n    var select = $('<select/>', {\n      'name': tableId + '_length',\n      'aria-controls': tableId,\n      'class': classes.sLengthSelect\n    });\n\n    for (var i = 0, ien = lengths.length; i < ien; i++) {\n      select[0][i] = new Option(typeof language[i] === 'number' ? settings.fnFormatNumber(language[i]) : language[i], lengths[i]);\n    }\n\n    var div = $('<div><label/></div>').addClass(classes.sLength);\n\n    if (!settings.aanFeatures.l) {\n      div[0].id = tableId + '_length';\n    }\n\n    div.children().append(settings.oLanguage.sLengthMenu.replace('_MENU_', select[0].outerHTML)); // Can't use `select` variable as user might provide their own and the\n    // reference is broken by the use of outerHTML\n\n    $('select', div).val(settings._iDisplayLength).on('change.DT', function (e) {\n      _fnLengthChange(settings, $(this).val());\n\n      _fnDraw(settings);\n    }); // Update node value whenever anything changes the table's length\n\n    $(settings.nTable).on('length.dt.DT', function (e, s, len) {\n      if (settings === s) {\n        $('select', div).val(len);\n      }\n    });\n    return div[0];\n  }\n  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n   * Note that most of the paging logic is done in\n   * DataTable.ext.pager\n   */\n\n  /**\n   * Generate the node required for default pagination\n   *  @param {object} oSettings dataTables settings object\n   *  @returns {node} Pagination feature node\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnFeatureHtmlPaginate(settings) {\n    var type = settings.sPaginationType,\n        plugin = DataTable.ext.pager[type],\n        modern = typeof plugin === 'function',\n        redraw = function redraw(settings) {\n      _fnDraw(settings);\n    },\n        node = $('<div/>').addClass(settings.oClasses.sPaging + type)[0],\n        features = settings.aanFeatures;\n\n    if (!modern) {\n      plugin.fnInit(settings, node, redraw);\n    }\n    /* Add a draw callback for the pagination on first instance, to update the paging display */\n\n\n    if (!features.p) {\n      node.id = settings.sTableId + '_paginate';\n      settings.aoDrawCallback.push({\n        \"fn\": function fn(settings) {\n          if (modern) {\n            var start = settings._iDisplayStart,\n                len = settings._iDisplayLength,\n                visRecords = settings.fnRecordsDisplay(),\n                all = len === -1,\n                page = all ? 0 : Math.ceil(start / len),\n                pages = all ? 1 : Math.ceil(visRecords / len),\n                buttons = plugin(page, pages),\n                i,\n                ien;\n\n            for (i = 0, ien = features.p.length; i < ien; i++) {\n              _fnRenderer(settings, 'pageButton')(settings, features.p[i], i, buttons, page, pages);\n            }\n          } else {\n            plugin.fnUpdate(settings, redraw);\n          }\n        },\n        \"sName\": \"pagination\"\n      });\n    }\n\n    return node;\n  }\n  /**\n   * Alter the display settings to change the page\n   *  @param {object} settings DataTables settings object\n   *  @param {string|int} action Paging action to take: \"first\", \"previous\",\n   *    \"next\" or \"last\" or page number to jump to (integer)\n   *  @param [bool] redraw Automatically draw the update or not\n   *  @returns {bool} true page has changed, false - no change\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnPageChange(settings, action, redraw) {\n    var start = settings._iDisplayStart,\n        len = settings._iDisplayLength,\n        records = settings.fnRecordsDisplay();\n\n    if (records === 0 || len === -1) {\n      start = 0;\n    } else if (typeof action === \"number\") {\n      start = action * len;\n\n      if (start > records) {\n        start = 0;\n      }\n    } else if (action == \"first\") {\n      start = 0;\n    } else if (action == \"previous\") {\n      start = len >= 0 ? start - len : 0;\n\n      if (start < 0) {\n        start = 0;\n      }\n    } else if (action == \"next\") {\n      if (start + len < records) {\n        start += len;\n      }\n    } else if (action == \"last\") {\n      start = Math.floor((records - 1) / len) * len;\n    } else {\n      _fnLog(settings, 0, \"Unknown paging action: \" + action, 5);\n    }\n\n    var changed = settings._iDisplayStart !== start;\n    settings._iDisplayStart = start;\n\n    if (changed) {\n      _fnCallbackFire(settings, null, 'page', [settings]);\n\n      if (redraw) {\n        _fnDraw(settings);\n      }\n    }\n\n    return changed;\n  }\n  /**\n   * Generate the node required for the processing node\n   *  @param {object} settings dataTables settings object\n   *  @returns {node} Processing element\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnFeatureHtmlProcessing(settings) {\n    return $('<div/>', {\n      'id': !settings.aanFeatures.r ? settings.sTableId + '_processing' : null,\n      'class': settings.oClasses.sProcessing\n    }).html(settings.oLanguage.sProcessing).insertBefore(settings.nTable)[0];\n  }\n  /**\n   * Display or hide the processing indicator\n   *  @param {object} settings dataTables settings object\n   *  @param {bool} show Show the processing indicator (true) or not (false)\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnProcessingDisplay(settings, show) {\n    if (settings.oFeatures.bProcessing) {\n      $(settings.aanFeatures.r).css('display', show ? 'block' : 'none');\n    }\n\n    _fnCallbackFire(settings, null, 'processing', [settings, show]);\n  }\n  /**\n   * Add any control elements for the table - specifically scrolling\n   *  @param {object} settings dataTables settings object\n   *  @returns {node} Node to add to the DOM\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnFeatureHtmlTable(settings) {\n    var table = $(settings.nTable); // Add the ARIA grid role to the table\n\n    table.attr('role', 'grid'); // Scrolling from here on in\n\n    var scroll = settings.oScroll;\n\n    if (scroll.sX === '' && scroll.sY === '') {\n      return settings.nTable;\n    }\n\n    var scrollX = scroll.sX;\n    var scrollY = scroll.sY;\n    var classes = settings.oClasses;\n    var caption = table.children('caption');\n    var captionSide = caption.length ? caption[0]._captionSide : null;\n    var headerClone = $(table[0].cloneNode(false));\n    var footerClone = $(table[0].cloneNode(false));\n    var footer = table.children('tfoot');\n    var _div = '<div/>';\n\n    var size = function size(s) {\n      return !s ? null : _fnStringToCss(s);\n    };\n\n    if (!footer.length) {\n      footer = null;\n    }\n    /*\n     * The HTML structure that we want to generate in this function is:\n     *  div - scroller\n     *    div - scroll head\n     *      div - scroll head inner\n     *        table - scroll head table\n     *          thead - thead\n     *    div - scroll body\n     *      table - table (master table)\n     *        thead - thead clone for sizing\n     *        tbody - tbody\n     *    div - scroll foot\n     *      div - scroll foot inner\n     *        table - scroll foot table\n     *          tfoot - tfoot\n     */\n\n\n    var scroller = $(_div, {\n      'class': classes.sScrollWrapper\n    }).append($(_div, {\n      'class': classes.sScrollHead\n    }).css({\n      overflow: 'hidden',\n      position: 'relative',\n      border: 0,\n      width: scrollX ? size(scrollX) : '100%'\n    }).append($(_div, {\n      'class': classes.sScrollHeadInner\n    }).css({\n      'box-sizing': 'content-box',\n      width: scroll.sXInner || '100%'\n    }).append(headerClone.removeAttr('id').css('margin-left', 0).append(captionSide === 'top' ? caption : null).append(table.children('thead'))))).append($(_div, {\n      'class': classes.sScrollBody\n    }).css({\n      position: 'relative',\n      overflow: 'auto',\n      width: size(scrollX)\n    }).append(table));\n\n    if (footer) {\n      scroller.append($(_div, {\n        'class': classes.sScrollFoot\n      }).css({\n        overflow: 'hidden',\n        border: 0,\n        width: scrollX ? size(scrollX) : '100%'\n      }).append($(_div, {\n        'class': classes.sScrollFootInner\n      }).append(footerClone.removeAttr('id').css('margin-left', 0).append(captionSide === 'bottom' ? caption : null).append(table.children('tfoot')))));\n    }\n\n    var children = scroller.children();\n    var scrollHead = children[0];\n    var scrollBody = children[1];\n    var scrollFoot = footer ? children[2] : null; // When the body is scrolled, then we also want to scroll the headers\n\n    if (scrollX) {\n      $(scrollBody).on('scroll.DT', function (e) {\n        var scrollLeft = this.scrollLeft;\n        scrollHead.scrollLeft = scrollLeft;\n\n        if (footer) {\n          scrollFoot.scrollLeft = scrollLeft;\n        }\n      });\n    }\n\n    $(scrollBody).css(scrollY && scroll.bCollapse ? 'max-height' : 'height', scrollY);\n    settings.nScrollHead = scrollHead;\n    settings.nScrollBody = scrollBody;\n    settings.nScrollFoot = scrollFoot; // On redraw - align columns\n\n    settings.aoDrawCallback.push({\n      \"fn\": _fnScrollDraw,\n      \"sName\": \"scrolling\"\n    });\n    return scroller[0];\n  }\n  /**\n   * Update the header, footer and body tables for resizing - i.e. column\n   * alignment.\n   *\n   * Welcome to the most horrible function DataTables. The process that this\n   * function follows is basically:\n   *   1. Re-create the table inside the scrolling div\n   *   2. Take live measurements from the DOM\n   *   3. Apply the measurements to align the columns\n   *   4. Clean up\n   *\n   *  @param {object} settings dataTables settings object\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnScrollDraw(settings) {\n    // Given that this is such a monster function, a lot of variables are use\n    // to try and keep the minimised size as small as possible\n    var scroll = settings.oScroll,\n        scrollX = scroll.sX,\n        scrollXInner = scroll.sXInner,\n        scrollY = scroll.sY,\n        barWidth = scroll.iBarWidth,\n        divHeader = $(settings.nScrollHead),\n        divHeaderStyle = divHeader[0].style,\n        divHeaderInner = divHeader.children('div'),\n        divHeaderInnerStyle = divHeaderInner[0].style,\n        divHeaderTable = divHeaderInner.children('table'),\n        divBodyEl = settings.nScrollBody,\n        divBody = $(divBodyEl),\n        divBodyStyle = divBodyEl.style,\n        divFooter = $(settings.nScrollFoot),\n        divFooterInner = divFooter.children('div'),\n        divFooterTable = divFooterInner.children('table'),\n        header = $(settings.nTHead),\n        table = $(settings.nTable),\n        tableEl = table[0],\n        tableStyle = tableEl.style,\n        footer = settings.nTFoot ? $(settings.nTFoot) : null,\n        browser = settings.oBrowser,\n        ie67 = browser.bScrollOversize,\n        dtHeaderCells = _pluck(settings.aoColumns, 'nTh'),\n        headerTrgEls,\n        footerTrgEls,\n        headerSrcEls,\n        footerSrcEls,\n        headerCopy,\n        footerCopy,\n        headerWidths = [],\n        footerWidths = [],\n        headerContent = [],\n        footerContent = [],\n        idx,\n        correction,\n        sanityWidth,\n        zeroOut = function zeroOut(nSizer) {\n      var style = nSizer.style;\n      style.paddingTop = \"0\";\n      style.paddingBottom = \"0\";\n      style.borderTopWidth = \"0\";\n      style.borderBottomWidth = \"0\";\n      style.height = 0;\n    }; // If the scrollbar visibility has changed from the last draw, we need to\n    // adjust the column sizes as the table width will have changed to account\n    // for the scrollbar\n\n\n    var scrollBarVis = divBodyEl.scrollHeight > divBodyEl.clientHeight;\n\n    if (settings.scrollBarVis !== scrollBarVis && settings.scrollBarVis !== undefined) {\n      settings.scrollBarVis = scrollBarVis;\n\n      _fnAdjustColumnSizing(settings);\n\n      return; // adjust column sizing will call this function again\n    } else {\n      settings.scrollBarVis = scrollBarVis;\n    }\n    /*\n     * 1. Re-create the table inside the scrolling div\n     */\n    // Remove the old minimised thead and tfoot elements in the inner table\n\n\n    table.children('thead, tfoot').remove();\n\n    if (footer) {\n      footerCopy = footer.clone().prependTo(table);\n      footerTrgEls = footer.find('tr'); // the original tfoot is in its own table and must be sized\n\n      footerSrcEls = footerCopy.find('tr');\n    } // Clone the current header and footer elements and then place it into the inner table\n\n\n    headerCopy = header.clone().prependTo(table);\n    headerTrgEls = header.find('tr'); // original header is in its own table\n\n    headerSrcEls = headerCopy.find('tr');\n    headerCopy.find('th, td').removeAttr('tabindex');\n    /*\n     * 2. Take live measurements from the DOM - do not alter the DOM itself!\n     */\n    // Remove old sizing and apply the calculated column widths\n    // Get the unique column headers in the newly created (cloned) header. We want to apply the\n    // calculated sizes to this header\n\n    if (!scrollX) {\n      divBodyStyle.width = '100%';\n      divHeader[0].style.width = '100%';\n    }\n\n    $.each(_fnGetUniqueThs(settings, headerCopy), function (i, el) {\n      idx = _fnVisibleToColumnIndex(settings, i);\n      el.style.width = settings.aoColumns[idx].sWidth;\n    });\n\n    if (footer) {\n      _fnApplyToChildren(function (n) {\n        n.style.width = \"\";\n      }, footerSrcEls);\n    } // Size the table as a whole\n\n\n    sanityWidth = table.outerWidth();\n\n    if (scrollX === \"\") {\n      // No x scrolling\n      tableStyle.width = \"100%\"; // IE7 will make the width of the table when 100% include the scrollbar\n      // - which is shouldn't. When there is a scrollbar we need to take this\n      // into account.\n\n      if (ie67 && (table.find('tbody').height() > divBodyEl.offsetHeight || divBody.css('overflow-y') == \"scroll\")) {\n        tableStyle.width = _fnStringToCss(table.outerWidth() - barWidth);\n      } // Recalculate the sanity width\n\n\n      sanityWidth = table.outerWidth();\n    } else if (scrollXInner !== \"\") {\n      // legacy x scroll inner has been given - use it\n      tableStyle.width = _fnStringToCss(scrollXInner); // Recalculate the sanity width\n\n      sanityWidth = table.outerWidth();\n    } // Hidden header should have zero height, so remove padding and borders. Then\n    // set the width based on the real headers\n    // Apply all styles in one pass\n\n\n    _fnApplyToChildren(zeroOut, headerSrcEls); // Read all widths in next pass\n\n\n    _fnApplyToChildren(function (nSizer) {\n      headerContent.push(nSizer.innerHTML);\n      headerWidths.push(_fnStringToCss($(nSizer).css('width')));\n    }, headerSrcEls); // Apply all widths in final pass\n\n\n    _fnApplyToChildren(function (nToSize, i) {\n      // Only apply widths to the DataTables detected header cells - this\n      // prevents complex headers from having contradictory sizes applied\n      if ($.inArray(nToSize, dtHeaderCells) !== -1) {\n        nToSize.style.width = headerWidths[i];\n      }\n    }, headerTrgEls);\n\n    $(headerSrcEls).height(0);\n    /* Same again with the footer if we have one */\n\n    if (footer) {\n      _fnApplyToChildren(zeroOut, footerSrcEls);\n\n      _fnApplyToChildren(function (nSizer) {\n        footerContent.push(nSizer.innerHTML);\n        footerWidths.push(_fnStringToCss($(nSizer).css('width')));\n      }, footerSrcEls);\n\n      _fnApplyToChildren(function (nToSize, i) {\n        nToSize.style.width = footerWidths[i];\n      }, footerTrgEls);\n\n      $(footerSrcEls).height(0);\n    }\n    /*\n     * 3. Apply the measurements\n     */\n    // \"Hide\" the header and footer that we used for the sizing. We need to keep\n    // the content of the cell so that the width applied to the header and body\n    // both match, but we want to hide it completely. We want to also fix their\n    // width to what they currently are\n\n\n    _fnApplyToChildren(function (nSizer, i) {\n      nSizer.innerHTML = '<div class=\"dataTables_sizing\">' + headerContent[i] + '</div>';\n      nSizer.childNodes[0].style.height = \"0\";\n      nSizer.childNodes[0].style.overflow = \"hidden\";\n      nSizer.style.width = headerWidths[i];\n    }, headerSrcEls);\n\n    if (footer) {\n      _fnApplyToChildren(function (nSizer, i) {\n        nSizer.innerHTML = '<div class=\"dataTables_sizing\">' + footerContent[i] + '</div>';\n        nSizer.childNodes[0].style.height = \"0\";\n        nSizer.childNodes[0].style.overflow = \"hidden\";\n        nSizer.style.width = footerWidths[i];\n      }, footerSrcEls);\n    } // Sanity check that the table is of a sensible width. If not then we are going to get\n    // misalignment - try to prevent this by not allowing the table to shrink below its min width\n\n\n    if (table.outerWidth() < sanityWidth) {\n      // The min width depends upon if we have a vertical scrollbar visible or not */\n      correction = divBodyEl.scrollHeight > divBodyEl.offsetHeight || divBody.css('overflow-y') == \"scroll\" ? sanityWidth + barWidth : sanityWidth; // IE6/7 are a law unto themselves...\n\n      if (ie67 && (divBodyEl.scrollHeight > divBodyEl.offsetHeight || divBody.css('overflow-y') == \"scroll\")) {\n        tableStyle.width = _fnStringToCss(correction - barWidth);\n      } // And give the user a warning that we've stopped the table getting too small\n\n\n      if (scrollX === \"\" || scrollXInner !== \"\") {\n        _fnLog(settings, 1, 'Possible column misalignment', 6);\n      }\n    } else {\n      correction = '100%';\n    } // Apply to the container elements\n\n\n    divBodyStyle.width = _fnStringToCss(correction);\n    divHeaderStyle.width = _fnStringToCss(correction);\n\n    if (footer) {\n      settings.nScrollFoot.style.width = _fnStringToCss(correction);\n    }\n    /*\n     * 4. Clean up\n     */\n\n\n    if (!scrollY) {\n      /* IE7< puts a vertical scrollbar in place (when it shouldn't be) due to subtracting\n       * the scrollbar height from the visible display, rather than adding it on. We need to\n       * set the height in order to sort this. Don't want to do it in any other browsers.\n       */\n      if (ie67) {\n        divBodyStyle.height = _fnStringToCss(tableEl.offsetHeight + barWidth);\n      }\n    }\n    /* Finally set the width's of the header and footer tables */\n\n\n    var iOuterWidth = table.outerWidth();\n    divHeaderTable[0].style.width = _fnStringToCss(iOuterWidth);\n    divHeaderInnerStyle.width = _fnStringToCss(iOuterWidth); // Figure out if there are scrollbar present - if so then we need a the header and footer to\n    // provide a bit more space to allow \"overflow\" scrolling (i.e. past the scrollbar)\n\n    var bScrolling = table.height() > divBodyEl.clientHeight || divBody.css('overflow-y') == \"scroll\";\n    var padding = 'padding' + (browser.bScrollbarLeft ? 'Left' : 'Right');\n    divHeaderInnerStyle[padding] = bScrolling ? barWidth + \"px\" : \"0px\";\n\n    if (footer) {\n      divFooterTable[0].style.width = _fnStringToCss(iOuterWidth);\n      divFooterInner[0].style.width = _fnStringToCss(iOuterWidth);\n      divFooterInner[0].style[padding] = bScrolling ? barWidth + \"px\" : \"0px\";\n    } // Correct DOM ordering for colgroup - comes before the thead\n\n\n    table.children('colgroup').insertBefore(table.children('thead'));\n    /* Adjust the position of the header in case we loose the y-scrollbar */\n\n    divBody.scroll(); // If sorting or filtering has occurred, jump the scrolling back to the top\n    // only if we aren't holding the position\n\n    if ((settings.bSorted || settings.bFiltered) && !settings._drawHold) {\n      divBodyEl.scrollTop = 0;\n    }\n  }\n  /**\n   * Apply a given function to the display child nodes of an element array (typically\n   * TD children of TR rows\n   *  @param {function} fn Method to apply to the objects\n   *  @param array {nodes} an1 List of elements to look through for display children\n   *  @param array {nodes} an2 Another list (identical structure to the first) - optional\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnApplyToChildren(fn, an1, an2) {\n    var index = 0,\n        i = 0,\n        iLen = an1.length;\n    var nNode1, nNode2;\n\n    while (i < iLen) {\n      nNode1 = an1[i].firstChild;\n      nNode2 = an2 ? an2[i].firstChild : null;\n\n      while (nNode1) {\n        if (nNode1.nodeType === 1) {\n          if (an2) {\n            fn(nNode1, nNode2, index);\n          } else {\n            fn(nNode1, index);\n          }\n\n          index++;\n        }\n\n        nNode1 = nNode1.nextSibling;\n        nNode2 = an2 ? nNode2.nextSibling : null;\n      }\n\n      i++;\n    }\n  }\n\n  var __re_html_remove = /<.*?>/g;\n  /**\n   * Calculate the width of columns for the table\n   *  @param {object} oSettings dataTables settings object\n   *  @memberof DataTable#oApi\n   */\n\n  function _fnCalculateColumnWidths(oSettings) {\n    var table = oSettings.nTable,\n        columns = oSettings.aoColumns,\n        scroll = oSettings.oScroll,\n        scrollY = scroll.sY,\n        scrollX = scroll.sX,\n        scrollXInner = scroll.sXInner,\n        columnCount = columns.length,\n        visibleColumns = _fnGetColumns(oSettings, 'bVisible'),\n        headerCells = $('th', oSettings.nTHead),\n        tableWidthAttr = table.getAttribute('width'),\n        // from DOM element\n    tableContainer = table.parentNode,\n        userInputs = false,\n        i,\n        column,\n        columnIdx,\n        width,\n        outerWidth,\n        browser = oSettings.oBrowser,\n        ie67 = browser.bScrollOversize;\n\n    var styleWidth = table.style.width;\n\n    if (styleWidth && styleWidth.indexOf('%') !== -1) {\n      tableWidthAttr = styleWidth;\n    }\n    /* Convert any user input sizes into pixel sizes */\n\n\n    for (i = 0; i < visibleColumns.length; i++) {\n      column = columns[visibleColumns[i]];\n\n      if (column.sWidth !== null) {\n        column.sWidth = _fnConvertToWidth(column.sWidthOrig, tableContainer);\n        userInputs = true;\n      }\n    }\n    /* If the number of columns in the DOM equals the number that we have to\n     * process in DataTables, then we can use the offsets that are created by\n     * the web- browser. No custom sizes can be set in order for this to happen,\n     * nor scrolling used\n     */\n\n\n    if (ie67 || !userInputs && !scrollX && !scrollY && columnCount == _fnVisbleColumns(oSettings) && columnCount == headerCells.length) {\n      for (i = 0; i < columnCount; i++) {\n        var colIdx = _fnVisibleToColumnIndex(oSettings, i);\n\n        if (colIdx !== null) {\n          columns[colIdx].sWidth = _fnStringToCss(headerCells.eq(i).width());\n        }\n      }\n    } else {\n      // Otherwise construct a single row, worst case, table with the widest\n      // node in the data, assign any user defined widths, then insert it into\n      // the DOM and allow the browser to do all the hard work of calculating\n      // table widths\n      var tmpTable = $(table).clone() // don't use cloneNode - IE8 will remove events on the main table\n      .css('visibility', 'hidden').removeAttr('id'); // Clean up the table body\n\n      tmpTable.find('tbody tr').remove();\n      var tr = $('<tr/>').appendTo(tmpTable.find('tbody')); // Clone the table header and footer - we can't use the header / footer\n      // from the cloned table, since if scrolling is active, the table's\n      // real header and footer are contained in different table tags\n\n      tmpTable.find('thead, tfoot').remove();\n      tmpTable.append($(oSettings.nTHead).clone()).append($(oSettings.nTFoot).clone()); // Remove any assigned widths from the footer (from scrolling)\n\n      tmpTable.find('tfoot th, tfoot td').css('width', ''); // Apply custom sizing to the cloned header\n\n      headerCells = _fnGetUniqueThs(oSettings, tmpTable.find('thead')[0]);\n\n      for (i = 0; i < visibleColumns.length; i++) {\n        column = columns[visibleColumns[i]];\n        headerCells[i].style.width = column.sWidthOrig !== null && column.sWidthOrig !== '' ? _fnStringToCss(column.sWidthOrig) : ''; // For scrollX we need to force the column width otherwise the\n        // browser will collapse it. If this width is smaller than the\n        // width the column requires, then it will have no effect\n\n        if (column.sWidthOrig && scrollX) {\n          $(headerCells[i]).append($('<div/>').css({\n            width: column.sWidthOrig,\n            margin: 0,\n            padding: 0,\n            border: 0,\n            height: 1\n          }));\n        }\n      } // Find the widest cell for each column and put it into the table\n\n\n      if (oSettings.aoData.length) {\n        for (i = 0; i < visibleColumns.length; i++) {\n          columnIdx = visibleColumns[i];\n          column = columns[columnIdx];\n          $(_fnGetWidestNode(oSettings, columnIdx)).clone(false).append(column.sContentPadding).appendTo(tr);\n        }\n      } // Tidy the temporary table - remove name attributes so there aren't\n      // duplicated in the dom (radio elements for example)\n\n\n      $('[name]', tmpTable).removeAttr('name'); // Table has been built, attach to the document so we can work with it.\n      // A holding element is used, positioned at the top of the container\n      // with minimal height, so it has no effect on if the container scrolls\n      // or not. Otherwise it might trigger scrolling when it actually isn't\n      // needed\n\n      var holder = $('<div/>').css(scrollX || scrollY ? {\n        position: 'absolute',\n        top: 0,\n        left: 0,\n        height: 1,\n        right: 0,\n        overflow: 'hidden'\n      } : {}).append(tmpTable).appendTo(tableContainer); // When scrolling (X or Y) we want to set the width of the table as \n      // appropriate. However, when not scrolling leave the table width as it\n      // is. This results in slightly different, but I think correct behaviour\n\n      if (scrollX && scrollXInner) {\n        tmpTable.width(scrollXInner);\n      } else if (scrollX) {\n        tmpTable.css('width', 'auto');\n        tmpTable.removeAttr('width'); // If there is no width attribute or style, then allow the table to\n        // collapse\n\n        if (tmpTable.width() < tableContainer.clientWidth && tableWidthAttr) {\n          tmpTable.width(tableContainer.clientWidth);\n        }\n      } else if (scrollY) {\n        tmpTable.width(tableContainer.clientWidth);\n      } else if (tableWidthAttr) {\n        tmpTable.width(tableWidthAttr);\n      } // Get the width of each column in the constructed table - we need to\n      // know the inner width (so it can be assigned to the other table's\n      // cells) and the outer width so we can calculate the full width of the\n      // table. This is safe since DataTables requires a unique cell for each\n      // column, but if ever a header can span multiple columns, this will\n      // need to be modified.\n\n\n      var total = 0;\n\n      for (i = 0; i < visibleColumns.length; i++) {\n        var cell = $(headerCells[i]);\n        var border = cell.outerWidth() - cell.width(); // Use getBounding... where possible (not IE8-) because it can give\n        // sub-pixel accuracy, which we then want to round up!\n\n        var bounding = browser.bBounding ? Math.ceil(headerCells[i].getBoundingClientRect().width) : cell.outerWidth(); // Total is tracked to remove any sub-pixel errors as the outerWidth\n        // of the table might not equal the total given here (IE!).\n\n        total += bounding; // Width for each column to use\n\n        columns[visibleColumns[i]].sWidth = _fnStringToCss(bounding - border);\n      }\n\n      table.style.width = _fnStringToCss(total); // Finished with the table - ditch it\n\n      holder.remove();\n    } // If there is a width attr, we want to attach an event listener which\n    // allows the table sizing to automatically adjust when the window is\n    // resized. Use the width attr rather than CSS, since we can't know if the\n    // CSS is a relative value or absolute - DOM read is always px.\n\n\n    if (tableWidthAttr) {\n      table.style.width = _fnStringToCss(tableWidthAttr);\n    }\n\n    if ((tableWidthAttr || scrollX) && !oSettings._reszEvt) {\n      var bindResize = function bindResize() {\n        $(window).on('resize.DT-' + oSettings.sInstance, _fnThrottle(function () {\n          _fnAdjustColumnSizing(oSettings);\n        }));\n      }; // IE6/7 will crash if we bind a resize event handler on page load.\n      // To be removed in 1.11 which drops IE6/7 support\n\n\n      if (ie67) {\n        setTimeout(bindResize, 1000);\n      } else {\n        bindResize();\n      }\n\n      oSettings._reszEvt = true;\n    }\n  }\n  /**\n   * Throttle the calls to a function. Arguments and context are maintained for\n   * the throttled function\n   *  @param {function} fn Function to be called\n   *  @param {int} [freq=200] call frequency in mS\n   *  @returns {function} wrapped function\n   *  @memberof DataTable#oApi\n   */\n\n\n  var _fnThrottle = DataTable.util.throttle;\n  /**\n   * Convert a CSS unit width to pixels (e.g. 2em)\n   *  @param {string} width width to be converted\n   *  @param {node} parent parent to get the with for (required for relative widths) - optional\n   *  @returns {int} width in pixels\n   *  @memberof DataTable#oApi\n   */\n\n  function _fnConvertToWidth(width, parent) {\n    if (!width) {\n      return 0;\n    }\n\n    var n = $('<div/>').css('width', _fnStringToCss(width)).appendTo(parent || document.body);\n    var val = n[0].offsetWidth;\n    n.remove();\n    return val;\n  }\n  /**\n   * Get the widest node\n   *  @param {object} settings dataTables settings object\n   *  @param {int} colIdx column of interest\n   *  @returns {node} widest table node\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnGetWidestNode(settings, colIdx) {\n    var idx = _fnGetMaxLenString(settings, colIdx);\n\n    if (idx < 0) {\n      return null;\n    }\n\n    var data = settings.aoData[idx];\n    return !data.nTr ? // Might not have been created when deferred rendering\n    $('<td/>').html(_fnGetCellData(settings, idx, colIdx, 'display'))[0] : data.anCells[colIdx];\n  }\n  /**\n   * Get the maximum strlen for each data column\n   *  @param {object} settings dataTables settings object\n   *  @param {int} colIdx column of interest\n   *  @returns {string} max string length for each column\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnGetMaxLenString(settings, colIdx) {\n    var s,\n        max = -1,\n        maxIdx = -1;\n\n    for (var i = 0, ien = settings.aoData.length; i < ien; i++) {\n      s = _fnGetCellData(settings, i, colIdx, 'display') + '';\n      s = s.replace(__re_html_remove, '');\n      s = s.replace(/&nbsp;/g, ' ');\n\n      if (s.length > max) {\n        max = s.length;\n        maxIdx = i;\n      }\n    }\n\n    return maxIdx;\n  }\n  /**\n   * Append a CSS unit (only if required) to a string\n   *  @param {string} value to css-ify\n   *  @returns {string} value with css unit\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnStringToCss(s) {\n    if (s === null) {\n      return '0px';\n    }\n\n    if (typeof s == 'number') {\n      return s < 0 ? '0px' : s + 'px';\n    } // Check it has a unit character already\n\n\n    return s.match(/\\d$/) ? s + 'px' : s;\n  }\n\n  function _fnSortFlatten(settings) {\n    var i,\n        iLen,\n        k,\n        kLen,\n        aSort = [],\n        aiOrig = [],\n        aoColumns = settings.aoColumns,\n        aDataSort,\n        iCol,\n        sType,\n        srcCol,\n        fixed = settings.aaSortingFixed,\n        fixedObj = $.isPlainObject(fixed),\n        nestedSort = [],\n        add = function add(a) {\n      if (a.length && !$.isArray(a[0])) {\n        // 1D array\n        nestedSort.push(a);\n      } else {\n        // 2D array\n        $.merge(nestedSort, a);\n      }\n    }; // Build the sort array, with pre-fix and post-fix options if they have been\n    // specified\n\n\n    if ($.isArray(fixed)) {\n      add(fixed);\n    }\n\n    if (fixedObj && fixed.pre) {\n      add(fixed.pre);\n    }\n\n    add(settings.aaSorting);\n\n    if (fixedObj && fixed.post) {\n      add(fixed.post);\n    }\n\n    for (i = 0; i < nestedSort.length; i++) {\n      srcCol = nestedSort[i][0];\n      aDataSort = aoColumns[srcCol].aDataSort;\n\n      for (k = 0, kLen = aDataSort.length; k < kLen; k++) {\n        iCol = aDataSort[k];\n        sType = aoColumns[iCol].sType || 'string';\n\n        if (nestedSort[i]._idx === undefined) {\n          nestedSort[i]._idx = $.inArray(nestedSort[i][1], aoColumns[iCol].asSorting);\n        }\n\n        aSort.push({\n          src: srcCol,\n          col: iCol,\n          dir: nestedSort[i][1],\n          index: nestedSort[i]._idx,\n          type: sType,\n          formatter: DataTable.ext.type.order[sType + \"-pre\"]\n        });\n      }\n    }\n\n    return aSort;\n  }\n  /**\n   * Change the order of the table\n   *  @param {object} oSettings dataTables settings object\n   *  @memberof DataTable#oApi\n   *  @todo This really needs split up!\n   */\n\n\n  function _fnSort(oSettings) {\n    var i,\n        ien,\n        iLen,\n        j,\n        jLen,\n        k,\n        kLen,\n        sDataType,\n        nTh,\n        aiOrig = [],\n        oExtSort = DataTable.ext.type.order,\n        aoData = oSettings.aoData,\n        aoColumns = oSettings.aoColumns,\n        aDataSort,\n        data,\n        iCol,\n        sType,\n        oSort,\n        formatters = 0,\n        sortCol,\n        displayMaster = oSettings.aiDisplayMaster,\n        aSort; // Resolve any column types that are unknown due to addition or invalidation\n    // @todo Can this be moved into a 'data-ready' handler which is called when\n    //   data is going to be used in the table?\n\n    _fnColumnTypes(oSettings);\n\n    aSort = _fnSortFlatten(oSettings);\n\n    for (i = 0, ien = aSort.length; i < ien; i++) {\n      sortCol = aSort[i]; // Track if we can use the fast sort algorithm\n\n      if (sortCol.formatter) {\n        formatters++;\n      } // Load the data needed for the sort, for each cell\n\n\n      _fnSortData(oSettings, sortCol.col);\n    }\n    /* No sorting required if server-side or no sorting array */\n\n\n    if (_fnDataSource(oSettings) != 'ssp' && aSort.length !== 0) {\n      // Create a value - key array of the current row positions such that we can use their\n      // current position during the sort, if values match, in order to perform stable sorting\n      for (i = 0, iLen = displayMaster.length; i < iLen; i++) {\n        aiOrig[displayMaster[i]] = i;\n      }\n      /* Do the sort - here we want multi-column sorting based on a given data source (column)\n       * and sorting function (from oSort) in a certain direction. It's reasonably complex to\n       * follow on it's own, but this is what we want (example two column sorting):\n       *  fnLocalSorting = function(a,b){\n       *    var iTest;\n       *    iTest = oSort['string-asc']('data11', 'data12');\n       *      if (iTest !== 0)\n       *        return iTest;\n       *    iTest = oSort['numeric-desc']('data21', 'data22');\n       *    if (iTest !== 0)\n       *      return iTest;\n       *    return oSort['numeric-asc']( aiOrig[a], aiOrig[b] );\n       *  }\n       * Basically we have a test for each sorting column, if the data in that column is equal,\n       * test the next column. If all columns match, then we use a numeric sort on the row\n       * positions in the original data array to provide a stable sort.\n       *\n       * Note - I know it seems excessive to have two sorting methods, but the first is around\n       * 15% faster, so the second is only maintained for backwards compatibility with sorting\n       * methods which do not have a pre-sort formatting function.\n       */\n\n\n      if (formatters === aSort.length) {\n        // All sort types have formatting functions\n        displayMaster.sort(function (a, b) {\n          var x,\n              y,\n              k,\n              test,\n              sort,\n              len = aSort.length,\n              dataA = aoData[a]._aSortData,\n              dataB = aoData[b]._aSortData;\n\n          for (k = 0; k < len; k++) {\n            sort = aSort[k];\n            x = dataA[sort.col];\n            y = dataB[sort.col];\n            test = x < y ? -1 : x > y ? 1 : 0;\n\n            if (test !== 0) {\n              return sort.dir === 'asc' ? test : -test;\n            }\n          }\n\n          x = aiOrig[a];\n          y = aiOrig[b];\n          return x < y ? -1 : x > y ? 1 : 0;\n        });\n      } else {\n        // Depreciated - remove in 1.11 (providing a plug-in option)\n        // Not all sort types have formatting methods, so we have to call their sorting\n        // methods.\n        displayMaster.sort(function (a, b) {\n          var x,\n              y,\n              k,\n              l,\n              test,\n              sort,\n              fn,\n              len = aSort.length,\n              dataA = aoData[a]._aSortData,\n              dataB = aoData[b]._aSortData;\n\n          for (k = 0; k < len; k++) {\n            sort = aSort[k];\n            x = dataA[sort.col];\n            y = dataB[sort.col];\n            fn = oExtSort[sort.type + \"-\" + sort.dir] || oExtSort[\"string-\" + sort.dir];\n            test = fn(x, y);\n\n            if (test !== 0) {\n              return test;\n            }\n          }\n\n          x = aiOrig[a];\n          y = aiOrig[b];\n          return x < y ? -1 : x > y ? 1 : 0;\n        });\n      }\n    }\n    /* Tell the draw function that we have sorted the data */\n\n\n    oSettings.bSorted = true;\n  }\n\n  function _fnSortAria(settings) {\n    var label;\n    var nextSort;\n    var columns = settings.aoColumns;\n\n    var aSort = _fnSortFlatten(settings);\n\n    var oAria = settings.oLanguage.oAria; // ARIA attributes - need to loop all columns, to update all (removing old\n    // attributes as needed)\n\n    for (var i = 0, iLen = columns.length; i < iLen; i++) {\n      var col = columns[i];\n      var asSorting = col.asSorting;\n      var sTitle = col.sTitle.replace(/<.*?>/g, \"\");\n      var th = col.nTh; // IE7 is throwing an error when setting these properties with jQuery's\n      // attr() and removeAttr() methods...\n\n      th.removeAttribute('aria-sort');\n      /* In ARIA only the first sorting column can be marked as sorting - no multi-sort option */\n\n      if (col.bSortable) {\n        if (aSort.length > 0 && aSort[0].col == i) {\n          th.setAttribute('aria-sort', aSort[0].dir == \"asc\" ? \"ascending\" : \"descending\");\n          nextSort = asSorting[aSort[0].index + 1] || asSorting[0];\n        } else {\n          nextSort = asSorting[0];\n        }\n\n        label = sTitle + (nextSort === \"asc\" ? oAria.sSortAscending : oAria.sSortDescending);\n      } else {\n        label = sTitle;\n      }\n\n      th.setAttribute('aria-label', label);\n    }\n  }\n  /**\n   * Function to run on user sort request\n   *  @param {object} settings dataTables settings object\n   *  @param {node} attachTo node to attach the handler to\n   *  @param {int} colIdx column sorting index\n   *  @param {boolean} [append=false] Append the requested sort to the existing\n   *    sort if true (i.e. multi-column sort)\n   *  @param {function} [callback] callback function\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnSortListener(settings, colIdx, append, callback) {\n    var col = settings.aoColumns[colIdx];\n    var sorting = settings.aaSorting;\n    var asSorting = col.asSorting;\n    var nextSortIdx;\n\n    var next = function next(a, overflow) {\n      var idx = a._idx;\n\n      if (idx === undefined) {\n        idx = $.inArray(a[1], asSorting);\n      }\n\n      return idx + 1 < asSorting.length ? idx + 1 : overflow ? null : 0;\n    }; // Convert to 2D array if needed\n\n\n    if (typeof sorting[0] === 'number') {\n      sorting = settings.aaSorting = [sorting];\n    } // If appending the sort then we are multi-column sorting\n\n\n    if (append && settings.oFeatures.bSortMulti) {\n      // Are we already doing some kind of sort on this column?\n      var sortIdx = $.inArray(colIdx, _pluck(sorting, '0'));\n\n      if (sortIdx !== -1) {\n        // Yes, modify the sort\n        nextSortIdx = next(sorting[sortIdx], true);\n\n        if (nextSortIdx === null && sorting.length === 1) {\n          nextSortIdx = 0; // can't remove sorting completely\n        }\n\n        if (nextSortIdx === null) {\n          sorting.splice(sortIdx, 1);\n        } else {\n          sorting[sortIdx][1] = asSorting[nextSortIdx];\n          sorting[sortIdx]._idx = nextSortIdx;\n        }\n      } else {\n        // No sort on this column yet\n        sorting.push([colIdx, asSorting[0], 0]);\n        sorting[sorting.length - 1]._idx = 0;\n      }\n    } else if (sorting.length && sorting[0][0] == colIdx) {\n      // Single column - already sorting on this column, modify the sort\n      nextSortIdx = next(sorting[0]);\n      sorting.length = 1;\n      sorting[0][1] = asSorting[nextSortIdx];\n      sorting[0]._idx = nextSortIdx;\n    } else {\n      // Single column - sort only on this column\n      sorting.length = 0;\n      sorting.push([colIdx, asSorting[0]]);\n      sorting[0]._idx = 0;\n    } // Run the sort by calling a full redraw\n\n\n    _fnReDraw(settings); // callback used for async user interaction\n\n\n    if (typeof callback == 'function') {\n      callback(settings);\n    }\n  }\n  /**\n   * Attach a sort handler (click) to a node\n   *  @param {object} settings dataTables settings object\n   *  @param {node} attachTo node to attach the handler to\n   *  @param {int} colIdx column sorting index\n   *  @param {function} [callback] callback function\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnSortAttachListener(settings, attachTo, colIdx, callback) {\n    var col = settings.aoColumns[colIdx];\n\n    _fnBindAction(attachTo, {}, function (e) {\n      /* If the column is not sortable - don't to anything */\n      if (col.bSortable === false) {\n        return;\n      } // If processing is enabled use a timeout to allow the processing\n      // display to be shown - otherwise to it synchronously\n\n\n      if (settings.oFeatures.bProcessing) {\n        _fnProcessingDisplay(settings, true);\n\n        setTimeout(function () {\n          _fnSortListener(settings, colIdx, e.shiftKey, callback); // In server-side processing, the draw callback will remove the\n          // processing display\n\n\n          if (_fnDataSource(settings) !== 'ssp') {\n            _fnProcessingDisplay(settings, false);\n          }\n        }, 0);\n      } else {\n        _fnSortListener(settings, colIdx, e.shiftKey, callback);\n      }\n    });\n  }\n  /**\n   * Set the sorting classes on table's body, Note: it is safe to call this function\n   * when bSort and bSortClasses are false\n   *  @param {object} oSettings dataTables settings object\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnSortingClasses(settings) {\n    var oldSort = settings.aLastSort;\n    var sortClass = settings.oClasses.sSortColumn;\n\n    var sort = _fnSortFlatten(settings);\n\n    var features = settings.oFeatures;\n    var i, ien, colIdx;\n\n    if (features.bSort && features.bSortClasses) {\n      // Remove old sorting classes\n      for (i = 0, ien = oldSort.length; i < ien; i++) {\n        colIdx = oldSort[i].src; // Remove column sorting\n\n        $(_pluck(settings.aoData, 'anCells', colIdx)).removeClass(sortClass + (i < 2 ? i + 1 : 3));\n      } // Add new column sorting\n\n\n      for (i = 0, ien = sort.length; i < ien; i++) {\n        colIdx = sort[i].src;\n        $(_pluck(settings.aoData, 'anCells', colIdx)).addClass(sortClass + (i < 2 ? i + 1 : 3));\n      }\n    }\n\n    settings.aLastSort = sort;\n  } // Get the data to sort a column, be it from cache, fresh (populating the\n  // cache), or from a sort formatter\n\n\n  function _fnSortData(settings, idx) {\n    // Custom sorting function - provided by the sort data type\n    var column = settings.aoColumns[idx];\n    var customSort = DataTable.ext.order[column.sSortDataType];\n    var customData;\n\n    if (customSort) {\n      customData = customSort.call(settings.oInstance, settings, idx, _fnColumnIndexToVisible(settings, idx));\n    } // Use / populate cache\n\n\n    var row, cellData;\n    var formatter = DataTable.ext.type.order[column.sType + \"-pre\"];\n\n    for (var i = 0, ien = settings.aoData.length; i < ien; i++) {\n      row = settings.aoData[i];\n\n      if (!row._aSortData) {\n        row._aSortData = [];\n      }\n\n      if (!row._aSortData[idx] || customSort) {\n        cellData = customSort ? customData[i] : // If there was a custom sort function, use data from there\n        _fnGetCellData(settings, i, idx, 'sort');\n        row._aSortData[idx] = formatter ? formatter(cellData) : cellData;\n      }\n    }\n  }\n  /**\n   * Save the state of a table\n   *  @param {object} oSettings dataTables settings object\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnSaveState(settings) {\n    if (!settings.oFeatures.bStateSave || settings.bDestroying) {\n      return;\n    }\n    /* Store the interesting variables */\n\n\n    var state = {\n      time: +new Date(),\n      start: settings._iDisplayStart,\n      length: settings._iDisplayLength,\n      order: $.extend(true, [], settings.aaSorting),\n      search: _fnSearchToCamel(settings.oPreviousSearch),\n      columns: $.map(settings.aoColumns, function (col, i) {\n        return {\n          visible: col.bVisible,\n          search: _fnSearchToCamel(settings.aoPreSearchCols[i])\n        };\n      })\n    };\n\n    _fnCallbackFire(settings, \"aoStateSaveParams\", 'stateSaveParams', [settings, state]);\n\n    settings.oSavedState = state;\n    settings.fnStateSaveCallback.call(settings.oInstance, settings, state);\n  }\n  /**\n   * Attempt to load a saved table state\n   *  @param {object} oSettings dataTables settings object\n   *  @param {object} oInit DataTables init object so we can override settings\n   *  @param {function} callback Callback to execute when the state has been loaded\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnLoadState(settings, oInit, callback) {\n    var i, ien;\n    var columns = settings.aoColumns;\n\n    var loaded = function loaded(s) {\n      if (!s || !s.time) {\n        callback();\n        return;\n      } // Allow custom and plug-in manipulation functions to alter the saved data set and\n      // cancelling of loading by returning false\n\n\n      var abStateLoad = _fnCallbackFire(settings, 'aoStateLoadParams', 'stateLoadParams', [settings, s]);\n\n      if ($.inArray(false, abStateLoad) !== -1) {\n        callback();\n        return;\n      } // Reject old data\n\n\n      var duration = settings.iStateDuration;\n\n      if (duration > 0 && s.time < +new Date() - duration * 1000) {\n        callback();\n        return;\n      } // Number of columns have changed - all bets are off, no restore of settings\n\n\n      if (s.columns && columns.length !== s.columns.length) {\n        callback();\n        return;\n      } // Store the saved state so it might be accessed at any time\n\n\n      settings.oLoadedState = $.extend(true, {}, s); // Restore key features - todo - for 1.11 this needs to be done by\n      // subscribed events\n\n      if (s.start !== undefined) {\n        settings._iDisplayStart = s.start;\n        settings.iInitDisplayStart = s.start;\n      }\n\n      if (s.length !== undefined) {\n        settings._iDisplayLength = s.length;\n      } // Order\n\n\n      if (s.order !== undefined) {\n        settings.aaSorting = [];\n        $.each(s.order, function (i, col) {\n          settings.aaSorting.push(col[0] >= columns.length ? [0, col[1]] : col);\n        });\n      } // Search\n\n\n      if (s.search !== undefined) {\n        $.extend(settings.oPreviousSearch, _fnSearchToHung(s.search));\n      } // Columns\n      //\n\n\n      if (s.columns) {\n        for (i = 0, ien = s.columns.length; i < ien; i++) {\n          var col = s.columns[i]; // Visibility\n\n          if (col.visible !== undefined) {\n            columns[i].bVisible = col.visible;\n          } // Search\n\n\n          if (col.search !== undefined) {\n            $.extend(settings.aoPreSearchCols[i], _fnSearchToHung(col.search));\n          }\n        }\n      }\n\n      _fnCallbackFire(settings, 'aoStateLoaded', 'stateLoaded', [settings, s]);\n\n      callback();\n    };\n\n    if (!settings.oFeatures.bStateSave) {\n      callback();\n      return;\n    }\n\n    var state = settings.fnStateLoadCallback.call(settings.oInstance, settings, loaded);\n\n    if (state !== undefined) {\n      loaded(state);\n    } // otherwise, wait for the loaded callback to be executed\n\n  }\n  /**\n   * Return the settings object for a particular table\n   *  @param {node} table table we are using as a dataTable\n   *  @returns {object} Settings object - or null if not found\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnSettingsFromNode(table) {\n    var settings = DataTable.settings;\n    var idx = $.inArray(table, _pluck(settings, 'nTable'));\n    return idx !== -1 ? settings[idx] : null;\n  }\n  /**\n   * Log an error message\n   *  @param {object} settings dataTables settings object\n   *  @param {int} level log error messages, or display them to the user\n   *  @param {string} msg error message\n   *  @param {int} tn Technical note id to get more information about the error.\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnLog(settings, level, msg, tn) {\n    msg = 'DataTables warning: ' + (settings ? 'table id=' + settings.sTableId + ' - ' : '') + msg;\n\n    if (tn) {\n      msg += '. For more information about this error, please see ' + 'http://datatables.net/tn/' + tn;\n    }\n\n    if (!level) {\n      // Backwards compatibility pre 1.10\n      var ext = DataTable.ext;\n      var type = ext.sErrMode || ext.errMode;\n\n      if (settings) {\n        _fnCallbackFire(settings, null, 'error', [settings, tn, msg]);\n      }\n\n      if (type == 'alert') {\n        alert(msg);\n      } else if (type == 'throw') {\n        throw new Error(msg);\n      } else if (typeof type == 'function') {\n        type(settings, tn, msg);\n      }\n    } else if (window.console && console.log) {\n      console.log(msg);\n    }\n  }\n  /**\n   * See if a property is defined on one object, if so assign it to the other object\n   *  @param {object} ret target object\n   *  @param {object} src source object\n   *  @param {string} name property\n   *  @param {string} [mappedName] name to map too - optional, name used if not given\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnMap(ret, src, name, mappedName) {\n    if ($.isArray(name)) {\n      $.each(name, function (i, val) {\n        if ($.isArray(val)) {\n          _fnMap(ret, src, val[0], val[1]);\n        } else {\n          _fnMap(ret, src, val);\n        }\n      });\n      return;\n    }\n\n    if (mappedName === undefined) {\n      mappedName = name;\n    }\n\n    if (src[name] !== undefined) {\n      ret[mappedName] = src[name];\n    }\n  }\n  /**\n   * Extend objects - very similar to jQuery.extend, but deep copy objects, and\n   * shallow copy arrays. The reason we need to do this, is that we don't want to\n   * deep copy array init values (such as aaSorting) since the dev wouldn't be\n   * able to override them, but we do want to deep copy arrays.\n   *  @param {object} out Object to extend\n   *  @param {object} extender Object from which the properties will be applied to\n   *      out\n   *  @param {boolean} breakRefs If true, then arrays will be sliced to take an\n   *      independent copy with the exception of the `data` or `aaData` parameters\n   *      if they are present. This is so you can pass in a collection to\n   *      DataTables and have that used as your data source without breaking the\n   *      references\n   *  @returns {object} out Reference, just for convenience - out === the return.\n   *  @memberof DataTable#oApi\n   *  @todo This doesn't take account of arrays inside the deep copied objects.\n   */\n\n\n  function _fnExtend(out, extender, breakRefs) {\n    var val;\n\n    for (var prop in extender) {\n      if (extender.hasOwnProperty(prop)) {\n        val = extender[prop];\n\n        if ($.isPlainObject(val)) {\n          if (!$.isPlainObject(out[prop])) {\n            out[prop] = {};\n          }\n\n          $.extend(true, out[prop], val);\n        } else if (breakRefs && prop !== 'data' && prop !== 'aaData' && $.isArray(val)) {\n          out[prop] = val.slice();\n        } else {\n          out[prop] = val;\n        }\n      }\n    }\n\n    return out;\n  }\n  /**\n   * Bind an event handers to allow a click or return key to activate the callback.\n   * This is good for accessibility since a return on the keyboard will have the\n   * same effect as a click, if the element has focus.\n   *  @param {element} n Element to bind the action to\n   *  @param {object} oData Data object to pass to the triggered function\n   *  @param {function} fn Callback function for when the event is triggered\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnBindAction(n, oData, fn) {\n    $(n).on('click.DT', oData, function (e) {\n      $(n).blur(); // Remove focus outline for mouse users\n\n      fn(e);\n    }).on('keypress.DT', oData, function (e) {\n      if (e.which === 13) {\n        e.preventDefault();\n        fn(e);\n      }\n    }).on('selectstart.DT', function () {\n      /* Take the brutal approach to cancelling text selection */\n      return false;\n    });\n  }\n  /**\n   * Register a callback function. Easily allows a callback function to be added to\n   * an array store of callback functions that can then all be called together.\n   *  @param {object} oSettings dataTables settings object\n   *  @param {string} sStore Name of the array storage for the callbacks in oSettings\n   *  @param {function} fn Function to be called back\n   *  @param {string} sName Identifying name for the callback (i.e. a label)\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnCallbackReg(oSettings, sStore, fn, sName) {\n    if (fn) {\n      oSettings[sStore].push({\n        \"fn\": fn,\n        \"sName\": sName\n      });\n    }\n  }\n  /**\n   * Fire callback functions and trigger events. Note that the loop over the\n   * callback array store is done backwards! Further note that you do not want to\n   * fire off triggers in time sensitive applications (for example cell creation)\n   * as its slow.\n   *  @param {object} settings dataTables settings object\n   *  @param {string} callbackArr Name of the array storage for the callbacks in\n   *      oSettings\n   *  @param {string} eventName Name of the jQuery custom event to trigger. If\n   *      null no trigger is fired\n   *  @param {array} args Array of arguments to pass to the callback function /\n   *      trigger\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnCallbackFire(settings, callbackArr, eventName, args) {\n    var ret = [];\n\n    if (callbackArr) {\n      ret = $.map(settings[callbackArr].slice().reverse(), function (val, i) {\n        return val.fn.apply(settings.oInstance, args);\n      });\n    }\n\n    if (eventName !== null) {\n      var e = $.Event(eventName + '.dt');\n      $(settings.nTable).trigger(e, args);\n      ret.push(e.result);\n    }\n\n    return ret;\n  }\n\n  function _fnLengthOverflow(settings) {\n    var start = settings._iDisplayStart,\n        end = settings.fnDisplayEnd(),\n        len = settings._iDisplayLength;\n    /* If we have space to show extra rows (backing up from the end point - then do so */\n\n    if (start >= end) {\n      start = end - len;\n    } // Keep the start record on the current page\n\n\n    start -= start % len;\n\n    if (len === -1 || start < 0) {\n      start = 0;\n    }\n\n    settings._iDisplayStart = start;\n  }\n\n  function _fnRenderer(settings, type) {\n    var renderer = settings.renderer;\n    var host = DataTable.ext.renderer[type];\n\n    if ($.isPlainObject(renderer) && renderer[type]) {\n      // Specific renderer for this type. If available use it, otherwise use\n      // the default.\n      return host[renderer[type]] || host._;\n    } else if (typeof renderer === 'string') {\n      // Common renderer - if there is one available for this type use it,\n      // otherwise use the default\n      return host[renderer] || host._;\n    } // Use the default\n\n\n    return host._;\n  }\n  /**\n   * Detect the data source being used for the table. Used to simplify the code\n   * a little (ajax) and to make it compress a little smaller.\n   *\n   *  @param {object} settings dataTables settings object\n   *  @returns {string} Data source\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnDataSource(settings) {\n    if (settings.oFeatures.bServerSide) {\n      return 'ssp';\n    } else if (settings.ajax || settings.sAjaxSource) {\n      return 'ajax';\n    }\n\n    return 'dom';\n  }\n  /**\n   * Computed structure of the DataTables API, defined by the options passed to\n   * `DataTable.Api.register()` when building the API.\n   *\n   * The structure is built in order to speed creation and extension of the Api\n   * objects since the extensions are effectively pre-parsed.\n   *\n   * The array is an array of objects with the following structure, where this\n   * base array represents the Api prototype base:\n   *\n   *     [\n   *       {\n   *         name:      'data'                -- string   - Property name\n   *         val:       function () {},       -- function - Api method (or undefined if just an object\n   *         methodExt: [ ... ],              -- array    - Array of Api object definitions to extend the method result\n   *         propExt:   [ ... ]               -- array    - Array of Api object definitions to extend the property\n   *       },\n   *       {\n   *         name:     'row'\n   *         val:       {},\n   *         methodExt: [ ... ],\n   *         propExt:   [\n   *           {\n   *             name:      'data'\n   *             val:       function () {},\n   *             methodExt: [ ... ],\n   *             propExt:   [ ... ]\n   *           },\n   *           ...\n   *         ]\n   *       }\n   *     ]\n   *\n   * @type {Array}\n   * @ignore\n   */\n\n\n  var __apiStruct = [];\n  /**\n   * `Array.prototype` reference.\n   *\n   * @type object\n   * @ignore\n   */\n\n  var __arrayProto = Array.prototype;\n  /**\n   * Abstraction for `context` parameter of the `Api` constructor to allow it to\n   * take several different forms for ease of use.\n   *\n   * Each of the input parameter types will be converted to a DataTables settings\n   * object where possible.\n   *\n   * @param  {string|node|jQuery|object} mixed DataTable identifier. Can be one\n   *   of:\n   *\n   *   * `string` - jQuery selector. Any DataTables' matching the given selector\n   *     with be found and used.\n   *   * `node` - `TABLE` node which has already been formed into a DataTable.\n   *   * `jQuery` - A jQuery object of `TABLE` nodes.\n   *   * `object` - DataTables settings object\n   *   * `DataTables.Api` - API instance\n   * @return {array|null} Matching DataTables settings objects. `null` or\n   *   `undefined` is returned if no matching DataTable is found.\n   * @ignore\n   */\n\n  var _toSettings = function _toSettings(mixed) {\n    var idx, jq;\n    var settings = DataTable.settings;\n    var tables = $.map(settings, function (el, i) {\n      return el.nTable;\n    });\n\n    if (!mixed) {\n      return [];\n    } else if (mixed.nTable && mixed.oApi) {\n      // DataTables settings object\n      return [mixed];\n    } else if (mixed.nodeName && mixed.nodeName.toLowerCase() === 'table') {\n      // Table node\n      idx = $.inArray(mixed, tables);\n      return idx !== -1 ? [settings[idx]] : null;\n    } else if (mixed && typeof mixed.settings === 'function') {\n      return mixed.settings().toArray();\n    } else if (typeof mixed === 'string') {\n      // jQuery selector\n      jq = $(mixed);\n    } else if (mixed instanceof $) {\n      // jQuery object (also DataTables instance)\n      jq = mixed;\n    }\n\n    if (jq) {\n      return jq.map(function (i) {\n        idx = $.inArray(this, tables);\n        return idx !== -1 ? settings[idx] : null;\n      }).toArray();\n    }\n  };\n  /**\n   * DataTables API class - used to control and interface with  one or more\n   * DataTables enhanced tables.\n   *\n   * The API class is heavily based on jQuery, presenting a chainable interface\n   * that you can use to interact with tables. Each instance of the API class has\n   * a \"context\" - i.e. the tables that it will operate on. This could be a single\n   * table, all tables on a page or a sub-set thereof.\n   *\n   * Additionally the API is designed to allow you to easily work with the data in\n   * the tables, retrieving and manipulating it as required. This is done by\n   * presenting the API class as an array like interface. The contents of the\n   * array depend upon the actions requested by each method (for example\n   * `rows().nodes()` will return an array of nodes, while `rows().data()` will\n   * return an array of objects or arrays depending upon your table's\n   * configuration). The API object has a number of array like methods (`push`,\n   * `pop`, `reverse` etc) as well as additional helper methods (`each`, `pluck`,\n   * `unique` etc) to assist your working with the data held in a table.\n   *\n   * Most methods (those which return an Api instance) are chainable, which means\n   * the return from a method call also has all of the methods available that the\n   * top level object had. For example, these two calls are equivalent:\n   *\n   *     // Not chained\n   *     api.row.add( {...} );\n   *     api.draw();\n   *\n   *     // Chained\n   *     api.row.add( {...} ).draw();\n   *\n   * @class DataTable.Api\n   * @param {array|object|string|jQuery} context DataTable identifier. This is\n   *   used to define which DataTables enhanced tables this API will operate on.\n   *   Can be one of:\n   *\n   *   * `string` - jQuery selector. Any DataTables' matching the given selector\n   *     with be found and used.\n   *   * `node` - `TABLE` node which has already been formed into a DataTable.\n   *   * `jQuery` - A jQuery object of `TABLE` nodes.\n   *   * `object` - DataTables settings object\n   * @param {array} [data] Data to initialise the Api instance with.\n   *\n   * @example\n   *   // Direct initialisation during DataTables construction\n   *   var api = $('#example').DataTable();\n   *\n   * @example\n   *   // Initialisation using a DataTables jQuery object\n   *   var api = $('#example').dataTable().api();\n   *\n   * @example\n   *   // Initialisation as a constructor\n   *   var api = new $.fn.DataTable.Api( 'table.dataTable' );\n   */\n\n\n  _Api2 = function _Api(context, data) {\n    if (!(this instanceof _Api2)) {\n      return new _Api2(context, data);\n    }\n\n    var settings = [];\n\n    var ctxSettings = function ctxSettings(o) {\n      var a = _toSettings(o);\n\n      if (a) {\n        settings = settings.concat(a);\n      }\n    };\n\n    if ($.isArray(context)) {\n      for (var i = 0, ien = context.length; i < ien; i++) {\n        ctxSettings(context[i]);\n      }\n    } else {\n      ctxSettings(context);\n    } // Remove duplicates\n\n\n    this.context = _unique(settings); // Initial data\n\n    if (data) {\n      $.merge(this, data);\n    } // selector\n\n\n    this.selector = {\n      rows: null,\n      cols: null,\n      opts: null\n    };\n\n    _Api2.extend(this, this, __apiStruct);\n  };\n\n  DataTable.Api = _Api2; // Don't destroy the existing prototype, just extend it. Required for jQuery 2's\n  // isPlainObject.\n\n  $.extend(_Api2.prototype, {\n    any: function any() {\n      return this.count() !== 0;\n    },\n    concat: __arrayProto.concat,\n    context: [],\n    // array of table settings objects\n    count: function count() {\n      return this.flatten().length;\n    },\n    each: function each(fn) {\n      for (var i = 0, ien = this.length; i < ien; i++) {\n        fn.call(this, this[i], i, this);\n      }\n\n      return this;\n    },\n    eq: function eq(idx) {\n      var ctx = this.context;\n      return ctx.length > idx ? new _Api2(ctx[idx], this[idx]) : null;\n    },\n    filter: function filter(fn) {\n      var a = [];\n\n      if (__arrayProto.filter) {\n        a = __arrayProto.filter.call(this, fn, this);\n      } else {\n        // Compatibility for browsers without EMCA-252-5 (JS 1.6)\n        for (var i = 0, ien = this.length; i < ien; i++) {\n          if (fn.call(this, this[i], i, this)) {\n            a.push(this[i]);\n          }\n        }\n      }\n\n      return new _Api2(this.context, a);\n    },\n    flatten: function flatten() {\n      var a = [];\n      return new _Api2(this.context, a.concat.apply(a, this.toArray()));\n    },\n    join: __arrayProto.join,\n    indexOf: __arrayProto.indexOf || function (obj, start) {\n      for (var i = start || 0, ien = this.length; i < ien; i++) {\n        if (this[i] === obj) {\n          return i;\n        }\n      }\n\n      return -1;\n    },\n    iterator: function iterator(flatten, type, fn, alwaysNew) {\n      var a = [],\n          ret,\n          i,\n          ien,\n          j,\n          jen,\n          context = this.context,\n          rows,\n          items,\n          item,\n          selector = this.selector; // Argument shifting\n\n      if (typeof flatten === 'string') {\n        alwaysNew = fn;\n        fn = type;\n        type = flatten;\n        flatten = false;\n      }\n\n      for (i = 0, ien = context.length; i < ien; i++) {\n        var apiInst = new _Api2(context[i]);\n\n        if (type === 'table') {\n          ret = fn.call(apiInst, context[i], i);\n\n          if (ret !== undefined) {\n            a.push(ret);\n          }\n        } else if (type === 'columns' || type === 'rows') {\n          // this has same length as context - one entry for each table\n          ret = fn.call(apiInst, context[i], this[i], i);\n\n          if (ret !== undefined) {\n            a.push(ret);\n          }\n        } else if (type === 'column' || type === 'column-rows' || type === 'row' || type === 'cell') {\n          // columns and rows share the same structure.\n          // 'this' is an array of column indexes for each context\n          items = this[i];\n\n          if (type === 'column-rows') {\n            rows = _selector_row_indexes(context[i], selector.opts);\n          }\n\n          for (j = 0, jen = items.length; j < jen; j++) {\n            item = items[j];\n\n            if (type === 'cell') {\n              ret = fn.call(apiInst, context[i], item.row, item.column, i, j);\n            } else {\n              ret = fn.call(apiInst, context[i], item, i, j, rows);\n            }\n\n            if (ret !== undefined) {\n              a.push(ret);\n            }\n          }\n        }\n      }\n\n      if (a.length || alwaysNew) {\n        var api = new _Api2(context, flatten ? a.concat.apply([], a) : a);\n        var apiSelector = api.selector;\n        apiSelector.rows = selector.rows;\n        apiSelector.cols = selector.cols;\n        apiSelector.opts = selector.opts;\n        return api;\n      }\n\n      return this;\n    },\n    lastIndexOf: __arrayProto.lastIndexOf || function (obj, start) {\n      // Bit cheeky...\n      return this.indexOf.apply(this.toArray.reverse(), arguments);\n    },\n    length: 0,\n    map: function map(fn) {\n      var a = [];\n\n      if (__arrayProto.map) {\n        a = __arrayProto.map.call(this, fn, this);\n      } else {\n        // Compatibility for browsers without EMCA-252-5 (JS 1.6)\n        for (var i = 0, ien = this.length; i < ien; i++) {\n          a.push(fn.call(this, this[i], i));\n        }\n      }\n\n      return new _Api2(this.context, a);\n    },\n    pluck: function pluck(prop) {\n      return this.map(function (el) {\n        return el[prop];\n      });\n    },\n    pop: __arrayProto.pop,\n    push: __arrayProto.push,\n    // Does not return an API instance\n    reduce: __arrayProto.reduce || function (fn, init) {\n      return _fnReduce(this, fn, init, 0, this.length, 1);\n    },\n    reduceRight: __arrayProto.reduceRight || function (fn, init) {\n      return _fnReduce(this, fn, init, this.length - 1, -1, -1);\n    },\n    reverse: __arrayProto.reverse,\n    // Object with rows, columns and opts\n    selector: null,\n    shift: __arrayProto.shift,\n    slice: function slice() {\n      return new _Api2(this.context, this);\n    },\n    sort: __arrayProto.sort,\n    // ? name - order?\n    splice: __arrayProto.splice,\n    toArray: function toArray() {\n      return __arrayProto.slice.call(this);\n    },\n    to$: function to$() {\n      return $(this);\n    },\n    toJQuery: function toJQuery() {\n      return $(this);\n    },\n    unique: function unique() {\n      return new _Api2(this.context, _unique(this));\n    },\n    unshift: __arrayProto.unshift\n  });\n\n  _Api2.extend = function (scope, obj, ext) {\n    // Only extend API instances and static properties of the API\n    if (!ext.length || !obj || !(obj instanceof _Api2) && !obj.__dt_wrapper) {\n      return;\n    }\n\n    var i,\n        ien,\n        j,\n        jen,\n        struct,\n        inner,\n        methodScoping = function methodScoping(scope, fn, struc) {\n      return function () {\n        var ret = fn.apply(scope, arguments); // Method extension\n\n        _Api2.extend(ret, ret, struc.methodExt);\n\n        return ret;\n      };\n    };\n\n    for (i = 0, ien = ext.length; i < ien; i++) {\n      struct = ext[i]; // Value\n\n      obj[struct.name] = typeof struct.val === 'function' ? methodScoping(scope, struct.val, struct) : $.isPlainObject(struct.val) ? {} : struct.val;\n      obj[struct.name].__dt_wrapper = true; // Property extension\n\n      _Api2.extend(scope, obj[struct.name], struct.propExt);\n    }\n  }; // @todo - Is there need for an augment function?\n  // _Api.augment = function ( inst, name )\n  // {\n  // \t// Find src object in the structure from the name\n  // \tvar parts = name.split('.');\n  // \t_Api.extend( inst, obj );\n  // };\n  //     [\n  //       {\n  //         name:      'data'                -- string   - Property name\n  //         val:       function () {},       -- function - Api method (or undefined if just an object\n  //         methodExt: [ ... ],              -- array    - Array of Api object definitions to extend the method result\n  //         propExt:   [ ... ]               -- array    - Array of Api object definitions to extend the property\n  //       },\n  //       {\n  //         name:     'row'\n  //         val:       {},\n  //         methodExt: [ ... ],\n  //         propExt:   [\n  //           {\n  //             name:      'data'\n  //             val:       function () {},\n  //             methodExt: [ ... ],\n  //             propExt:   [ ... ]\n  //           },\n  //           ...\n  //         ]\n  //       }\n  //     ]\n\n\n  _Api2.register = _api_register = function _api_register(name, val) {\n    if ($.isArray(name)) {\n      for (var j = 0, jen = name.length; j < jen; j++) {\n        _Api2.register(name[j], val);\n      }\n\n      return;\n    }\n\n    var i,\n        ien,\n        heir = name.split('.'),\n        struct = __apiStruct,\n        key,\n        method;\n\n    var find = function find(src, name) {\n      for (var i = 0, ien = src.length; i < ien; i++) {\n        if (src[i].name === name) {\n          return src[i];\n        }\n      }\n\n      return null;\n    };\n\n    for (i = 0, ien = heir.length; i < ien; i++) {\n      method = heir[i].indexOf('()') !== -1;\n      key = method ? heir[i].replace('()', '') : heir[i];\n      var src = find(struct, key);\n\n      if (!src) {\n        src = {\n          name: key,\n          val: {},\n          methodExt: [],\n          propExt: []\n        };\n        struct.push(src);\n      }\n\n      if (i === ien - 1) {\n        src.val = val;\n      } else {\n        struct = method ? src.methodExt : src.propExt;\n      }\n    }\n  };\n\n  _Api2.registerPlural = _api_registerPlural = function _api_registerPlural(pluralName, singularName, val) {\n    _Api2.register(pluralName, val);\n\n    _Api2.register(singularName, function () {\n      var ret = val.apply(this, arguments);\n\n      if (ret === this) {\n        // Returned item is the API instance that was passed in, return it\n        return this;\n      } else if (ret instanceof _Api2) {\n        // New API instance returned, want the value from the first item\n        // in the returned array for the singular result.\n        return ret.length ? $.isArray(ret[0]) ? new _Api2(ret.context, ret[0]) : // Array results are 'enhanced'\n        ret[0] : undefined;\n      } // Non-API return - just fire it back\n\n\n      return ret;\n    });\n  };\n  /**\n   * Selector for HTML tables. Apply the given selector to the give array of\n   * DataTables settings objects.\n   *\n   * @param {string|integer} [selector] jQuery selector string or integer\n   * @param  {array} Array of DataTables settings objects to be filtered\n   * @return {array}\n   * @ignore\n   */\n\n\n  var __table_selector = function __table_selector(selector, a) {\n    // Integer is used to pick out a table by index\n    if (typeof selector === 'number') {\n      return [a[selector]];\n    } // Perform a jQuery selector on the table nodes\n\n\n    var nodes = $.map(a, function (el, i) {\n      return el.nTable;\n    });\n    return $(nodes).filter(selector).map(function (i) {\n      // Need to translate back from the table node to the settings\n      var idx = $.inArray(this, nodes);\n      return a[idx];\n    }).toArray();\n  };\n  /**\n   * Context selector for the API's context (i.e. the tables the API instance\n   * refers to.\n   *\n   * @name    DataTable.Api#tables\n   * @param {string|integer} [selector] Selector to pick which tables the iterator\n   *   should operate on. If not given, all tables in the current context are\n   *   used. This can be given as a jQuery selector (for example `':gt(0)'`) to\n   *   select multiple tables or as an integer to select a single table.\n   * @returns {DataTable.Api} Returns a new API instance if a selector is given.\n   */\n\n\n  _api_register('tables()', function (selector) {\n    // A new instance is created if there was a selector specified\n    return selector ? new _Api2(__table_selector(selector, this.context)) : this;\n  });\n\n  _api_register('table()', function (selector) {\n    var tables = this.tables(selector);\n    var ctx = tables.context; // Truncate to the first matched table\n\n    return ctx.length ? new _Api2(ctx[0]) : tables;\n  });\n\n  _api_registerPlural('tables().nodes()', 'table().node()', function () {\n    return this.iterator('table', function (ctx) {\n      return ctx.nTable;\n    }, 1);\n  });\n\n  _api_registerPlural('tables().body()', 'table().body()', function () {\n    return this.iterator('table', function (ctx) {\n      return ctx.nTBody;\n    }, 1);\n  });\n\n  _api_registerPlural('tables().header()', 'table().header()', function () {\n    return this.iterator('table', function (ctx) {\n      return ctx.nTHead;\n    }, 1);\n  });\n\n  _api_registerPlural('tables().footer()', 'table().footer()', function () {\n    return this.iterator('table', function (ctx) {\n      return ctx.nTFoot;\n    }, 1);\n  });\n\n  _api_registerPlural('tables().containers()', 'table().container()', function () {\n    return this.iterator('table', function (ctx) {\n      return ctx.nTableWrapper;\n    }, 1);\n  });\n  /**\n   * Redraw the tables in the current context.\n   */\n\n\n  _api_register('draw()', function (paging) {\n    return this.iterator('table', function (settings) {\n      if (paging === 'page') {\n        _fnDraw(settings);\n      } else {\n        if (typeof paging === 'string') {\n          paging = paging === 'full-hold' ? false : true;\n        }\n\n        _fnReDraw(settings, paging === false);\n      }\n    });\n  });\n  /**\n   * Get the current page index.\n   *\n   * @return {integer} Current page index (zero based)\n   */\n\n  /**\n  * Set the current page.\n  *\n  * Note that if you attempt to show a page which does not exist, DataTables will\n  * not throw an error, but rather reset the paging.\n  *\n  * @param {integer|string} action The paging action to take. This can be one of:\n  *  * `integer` - The page index to jump to\n  *  * `string` - An action to take:\n  *    * `first` - Jump to first page.\n  *    * `next` - Jump to the next page\n  *    * `previous` - Jump to previous page\n  *    * `last` - Jump to the last page.\n  * @returns {DataTables.Api} this\n  */\n\n\n  _api_register('page()', function (action) {\n    if (action === undefined) {\n      return this.page.info().page; // not an expensive call\n    } // else, have an action to take on all tables\n\n\n    return this.iterator('table', function (settings) {\n      _fnPageChange(settings, action);\n    });\n  });\n  /**\n   * Paging information for the first table in the current context.\n   *\n   * If you require paging information for another table, use the `table()` method\n   * with a suitable selector.\n   *\n   * @return {object} Object with the following properties set:\n   *  * `page` - Current page index (zero based - i.e. the first page is `0`)\n   *  * `pages` - Total number of pages\n   *  * `start` - Display index for the first record shown on the current page\n   *  * `end` - Display index for the last record shown on the current page\n   *  * `length` - Display length (number of records). Note that generally `start\n   *    + length = end`, but this is not always true, for example if there are\n   *    only 2 records to show on the final page, with a length of 10.\n   *  * `recordsTotal` - Full data set length\n   *  * `recordsDisplay` - Data set length once the current filtering criterion\n   *    are applied.\n   */\n\n\n  _api_register('page.info()', function (action) {\n    if (this.context.length === 0) {\n      return undefined;\n    }\n\n    var settings = this.context[0],\n        start = settings._iDisplayStart,\n        len = settings.oFeatures.bPaginate ? settings._iDisplayLength : -1,\n        visRecords = settings.fnRecordsDisplay(),\n        all = len === -1;\n    return {\n      \"page\": all ? 0 : Math.floor(start / len),\n      \"pages\": all ? 1 : Math.ceil(visRecords / len),\n      \"start\": start,\n      \"end\": settings.fnDisplayEnd(),\n      \"length\": len,\n      \"recordsTotal\": settings.fnRecordsTotal(),\n      \"recordsDisplay\": visRecords,\n      \"serverSide\": _fnDataSource(settings) === 'ssp'\n    };\n  });\n  /**\n   * Get the current page length.\n   *\n   * @return {integer} Current page length. Note `-1` indicates that all records\n   *   are to be shown.\n   */\n\n  /**\n  * Set the current page length.\n  *\n  * @param {integer} Page length to set. Use `-1` to show all records.\n  * @returns {DataTables.Api} this\n  */\n\n\n  _api_register('page.len()', function (len) {\n    // Note that we can't call this function 'length()' because `length`\n    // is a Javascript property of functions which defines how many arguments\n    // the function expects.\n    if (len === undefined) {\n      return this.context.length !== 0 ? this.context[0]._iDisplayLength : undefined;\n    } // else, set the page length\n\n\n    return this.iterator('table', function (settings) {\n      _fnLengthChange(settings, len);\n    });\n  });\n\n  var __reload = function __reload(settings, holdPosition, callback) {\n    // Use the draw event to trigger a callback\n    if (callback) {\n      var api = new _Api2(settings);\n      api.one('draw', function () {\n        callback(api.ajax.json());\n      });\n    }\n\n    if (_fnDataSource(settings) == 'ssp') {\n      _fnReDraw(settings, holdPosition);\n    } else {\n      _fnProcessingDisplay(settings, true); // Cancel an existing request\n\n\n      var xhr = settings.jqXHR;\n\n      if (xhr && xhr.readyState !== 4) {\n        xhr.abort();\n      } // Trigger xhr\n\n\n      _fnBuildAjax(settings, [], function (json) {\n        _fnClearTable(settings);\n\n        var data = _fnAjaxDataSrc(settings, json);\n\n        for (var i = 0, ien = data.length; i < ien; i++) {\n          _fnAddData(settings, data[i]);\n        }\n\n        _fnReDraw(settings, holdPosition);\n\n        _fnProcessingDisplay(settings, false);\n      });\n    }\n  };\n  /**\n   * Get the JSON response from the last Ajax request that DataTables made to the\n   * server. Note that this returns the JSON from the first table in the current\n   * context.\n   *\n   * @return {object} JSON received from the server.\n   */\n\n\n  _api_register('ajax.json()', function () {\n    var ctx = this.context;\n\n    if (ctx.length > 0) {\n      return ctx[0].json;\n    } // else return undefined;\n\n  });\n  /**\n   * Get the data submitted in the last Ajax request\n   */\n\n\n  _api_register('ajax.params()', function () {\n    var ctx = this.context;\n\n    if (ctx.length > 0) {\n      return ctx[0].oAjaxData;\n    } // else return undefined;\n\n  });\n  /**\n   * Reload tables from the Ajax data source. Note that this function will\n   * automatically re-draw the table when the remote data has been loaded.\n   *\n   * @param {boolean} [reset=true] Reset (default) or hold the current paging\n   *   position. A full re-sort and re-filter is performed when this method is\n   *   called, which is why the pagination reset is the default action.\n   * @returns {DataTables.Api} this\n   */\n\n\n  _api_register('ajax.reload()', function (callback, resetPaging) {\n    return this.iterator('table', function (settings) {\n      __reload(settings, resetPaging === false, callback);\n    });\n  });\n  /**\n   * Get the current Ajax URL. Note that this returns the URL from the first\n   * table in the current context.\n   *\n   * @return {string} Current Ajax source URL\n   */\n\n  /**\n  * Set the Ajax URL. Note that this will set the URL for all tables in the\n  * current context.\n  *\n  * @param {string} url URL to set.\n  * @returns {DataTables.Api} this\n  */\n\n\n  _api_register('ajax.url()', function (url) {\n    var ctx = this.context;\n\n    if (url === undefined) {\n      // get\n      if (ctx.length === 0) {\n        return undefined;\n      }\n\n      ctx = ctx[0];\n      return ctx.ajax ? $.isPlainObject(ctx.ajax) ? ctx.ajax.url : ctx.ajax : ctx.sAjaxSource;\n    } // set\n\n\n    return this.iterator('table', function (settings) {\n      if ($.isPlainObject(settings.ajax)) {\n        settings.ajax.url = url;\n      } else {\n        settings.ajax = url;\n      } // No need to consider sAjaxSource here since DataTables gives priority\n      // to `ajax` over `sAjaxSource`. So setting `ajax` here, renders any\n      // value of `sAjaxSource` redundant.\n\n    });\n  });\n  /**\n   * Load data from the newly set Ajax URL. Note that this method is only\n   * available when `ajax.url()` is used to set a URL. Additionally, this method\n   * has the same effect as calling `ajax.reload()` but is provided for\n   * convenience when setting a new URL. Like `ajax.reload()` it will\n   * automatically redraw the table once the remote data has been loaded.\n   *\n   * @returns {DataTables.Api} this\n   */\n\n\n  _api_register('ajax.url().load()', function (callback, resetPaging) {\n    // Same as a reload, but makes sense to present it for easy access after a\n    // url change\n    return this.iterator('table', function (ctx) {\n      __reload(ctx, resetPaging === false, callback);\n    });\n  });\n\n  var _selector_run = function _selector_run(type, selector, selectFn, settings, opts) {\n    var out = [],\n        res,\n        a,\n        i,\n        ien,\n        j,\n        jen,\n        selectorType = typeof selector; // Can't just check for isArray here, as an API or jQuery instance might be\n    // given with their array like look\n\n    if (!selector || selectorType === 'string' || selectorType === 'function' || selector.length === undefined) {\n      selector = [selector];\n    }\n\n    for (i = 0, ien = selector.length; i < ien; i++) {\n      // Only split on simple strings - complex expressions will be jQuery selectors\n      a = selector[i] && selector[i].split && !selector[i].match(/[\\[\\(:]/) ? selector[i].split(',') : [selector[i]];\n\n      for (j = 0, jen = a.length; j < jen; j++) {\n        res = selectFn(typeof a[j] === 'string' ? $.trim(a[j]) : a[j]);\n\n        if (res && res.length) {\n          out = out.concat(res);\n        }\n      }\n    } // selector extensions\n\n\n    var ext = _ext.selector[type];\n\n    if (ext.length) {\n      for (i = 0, ien = ext.length; i < ien; i++) {\n        out = ext[i](settings, opts, out);\n      }\n    }\n\n    return _unique(out);\n  };\n\n  var _selector_opts = function _selector_opts(opts) {\n    if (!opts) {\n      opts = {};\n    } // Backwards compatibility for 1.9- which used the terminology filter rather\n    // than search\n\n\n    if (opts.filter && opts.search === undefined) {\n      opts.search = opts.filter;\n    }\n\n    return $.extend({\n      search: 'none',\n      order: 'current',\n      page: 'all'\n    }, opts);\n  };\n\n  var _selector_first = function _selector_first(inst) {\n    // Reduce the API instance to the first item found\n    for (var i = 0, ien = inst.length; i < ien; i++) {\n      if (inst[i].length > 0) {\n        // Assign the first element to the first item in the instance\n        // and truncate the instance and context\n        inst[0] = inst[i];\n        inst[0].length = 1;\n        inst.length = 1;\n        inst.context = [inst.context[i]];\n        return inst;\n      }\n    } // Not found - return an empty instance\n\n\n    inst.length = 0;\n    return inst;\n  };\n\n  var _selector_row_indexes = function _selector_row_indexes(settings, opts) {\n    var i,\n        ien,\n        tmp,\n        a = [],\n        displayFiltered = settings.aiDisplay,\n        displayMaster = settings.aiDisplayMaster;\n    var search = opts.search,\n        // none, applied, removed\n    order = opts.order,\n        // applied, current, index (original - compatibility with 1.9)\n    page = opts.page; // all, current\n\n    if (_fnDataSource(settings) == 'ssp') {\n      // In server-side processing mode, most options are irrelevant since\n      // rows not shown don't exist and the index order is the applied order\n      // Removed is a special case - for consistency just return an empty\n      // array\n      return search === 'removed' ? [] : _range(0, displayMaster.length);\n    } else if (page == 'current') {\n      // Current page implies that order=current and fitler=applied, since it is\n      // fairly senseless otherwise, regardless of what order and search actually\n      // are\n      for (i = settings._iDisplayStart, ien = settings.fnDisplayEnd(); i < ien; i++) {\n        a.push(displayFiltered[i]);\n      }\n    } else if (order == 'current' || order == 'applied') {\n      if (search == 'none') {\n        a = displayMaster.slice();\n      } else if (search == 'applied') {\n        a = displayFiltered.slice();\n      } else if (search == 'removed') {\n        // O(n+m) solution by creating a hash map\n        var displayFilteredMap = {};\n\n        for (var i = 0, ien = displayFiltered.length; i < ien; i++) {\n          displayFilteredMap[displayFiltered[i]] = null;\n        }\n\n        a = $.map(displayMaster, function (el) {\n          return !displayFilteredMap.hasOwnProperty(el) ? el : null;\n        });\n      }\n    } else if (order == 'index' || order == 'original') {\n      for (i = 0, ien = settings.aoData.length; i < ien; i++) {\n        if (search == 'none') {\n          a.push(i);\n        } else {\n          // applied | removed\n          tmp = $.inArray(i, displayFiltered);\n\n          if (tmp === -1 && search == 'removed' || tmp >= 0 && search == 'applied') {\n            a.push(i);\n          }\n        }\n      }\n    }\n\n    return a;\n  };\n  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n   * Rows\n   *\n   * {}          - no selector - use all available rows\n   * {integer}   - row aoData index\n   * {node}      - TR node\n   * {string}    - jQuery selector to apply to the TR elements\n   * {array}     - jQuery array of nodes, or simply an array of TR nodes\n   *\n   */\n\n\n  var __row_selector = function __row_selector(settings, selector, opts) {\n    var rows;\n\n    var run = function run(sel) {\n      var selInt = _intVal(sel);\n\n      var i, ien;\n      var aoData = settings.aoData; // Short cut - selector is a number and no options provided (default is\n      // all records, so no need to check if the index is in there, since it\n      // must be - dev error if the index doesn't exist).\n\n      if (selInt !== null && !opts) {\n        return [selInt];\n      }\n\n      if (!rows) {\n        rows = _selector_row_indexes(settings, opts);\n      }\n\n      if (selInt !== null && $.inArray(selInt, rows) !== -1) {\n        // Selector - integer\n        return [selInt];\n      } else if (sel === null || sel === undefined || sel === '') {\n        // Selector - none\n        return rows;\n      } // Selector - function\n\n\n      if (typeof sel === 'function') {\n        return $.map(rows, function (idx) {\n          var row = aoData[idx];\n          return sel(idx, row._aData, row.nTr) ? idx : null;\n        });\n      } // Selector - node\n\n\n      if (sel.nodeName) {\n        var rowIdx = sel._DT_RowIndex; // Property added by DT for fast lookup\n\n        var cellIdx = sel._DT_CellIndex;\n\n        if (rowIdx !== undefined) {\n          // Make sure that the row is actually still present in the table\n          return aoData[rowIdx] && aoData[rowIdx].nTr === sel ? [rowIdx] : [];\n        } else if (cellIdx) {\n          return aoData[cellIdx.row] && aoData[cellIdx.row].nTr === sel ? [cellIdx.row] : [];\n        } else {\n          var host = $(sel).closest('*[data-dt-row]');\n          return host.length ? [host.data('dt-row')] : [];\n        }\n      } // ID selector. Want to always be able to select rows by id, regardless\n      // of if the tr element has been created or not, so can't rely upon\n      // jQuery here - hence a custom implementation. This does not match\n      // Sizzle's fast selector or HTML4 - in HTML5 the ID can be anything,\n      // but to select it using a CSS selector engine (like Sizzle or\n      // querySelect) it would need to need to be escaped for some characters.\n      // DataTables simplifies this for row selectors since you can select\n      // only a row. A # indicates an id any anything that follows is the id -\n      // unescaped.\n\n\n      if (typeof sel === 'string' && sel.charAt(0) === '#') {\n        // get row index from id\n        var rowObj = settings.aIds[sel.replace(/^#/, '')];\n\n        if (rowObj !== undefined) {\n          return [rowObj.idx];\n        } // need to fall through to jQuery in case there is DOM id that\n        // matches\n\n      } // Get nodes in the order from the `rows` array with null values removed\n\n\n      var nodes = _removeEmpty(_pluck_order(settings.aoData, rows, 'nTr')); // Selector - jQuery selector string, array of nodes or jQuery object/\n      // As jQuery's .filter() allows jQuery objects to be passed in filter,\n      // it also allows arrays, so this will cope with all three options\n\n\n      return $(nodes).filter(sel).map(function () {\n        return this._DT_RowIndex;\n      }).toArray();\n    };\n\n    return _selector_run('row', selector, run, settings, opts);\n  };\n\n  _api_register('rows()', function (selector, opts) {\n    // argument shifting\n    if (selector === undefined) {\n      selector = '';\n    } else if ($.isPlainObject(selector)) {\n      opts = selector;\n      selector = '';\n    }\n\n    opts = _selector_opts(opts);\n    var inst = this.iterator('table', function (settings) {\n      return __row_selector(settings, selector, opts);\n    }, 1); // Want argument shifting here and in __row_selector?\n\n    inst.selector.rows = selector;\n    inst.selector.opts = opts;\n    return inst;\n  });\n\n  _api_register('rows().nodes()', function () {\n    return this.iterator('row', function (settings, row) {\n      return settings.aoData[row].nTr || undefined;\n    }, 1);\n  });\n\n  _api_register('rows().data()', function () {\n    return this.iterator(true, 'rows', function (settings, rows) {\n      return _pluck_order(settings.aoData, rows, '_aData');\n    }, 1);\n  });\n\n  _api_registerPlural('rows().cache()', 'row().cache()', function (type) {\n    return this.iterator('row', function (settings, row) {\n      var r = settings.aoData[row];\n      return type === 'search' ? r._aFilterData : r._aSortData;\n    }, 1);\n  });\n\n  _api_registerPlural('rows().invalidate()', 'row().invalidate()', function (src) {\n    return this.iterator('row', function (settings, row) {\n      _fnInvalidate(settings, row, src);\n    });\n  });\n\n  _api_registerPlural('rows().indexes()', 'row().index()', function () {\n    return this.iterator('row', function (settings, row) {\n      return row;\n    }, 1);\n  });\n\n  _api_registerPlural('rows().ids()', 'row().id()', function (hash) {\n    var a = [];\n    var context = this.context; // `iterator` will drop undefined values, but in this case we want them\n\n    for (var i = 0, ien = context.length; i < ien; i++) {\n      for (var j = 0, jen = this[i].length; j < jen; j++) {\n        var id = context[i].rowIdFn(context[i].aoData[this[i][j]]._aData);\n        a.push((hash === true ? '#' : '') + id);\n      }\n    }\n\n    return new _Api2(context, a);\n  });\n\n  _api_registerPlural('rows().remove()', 'row().remove()', function () {\n    var that = this;\n    this.iterator('row', function (settings, row, thatIdx) {\n      var data = settings.aoData;\n      var rowData = data[row];\n      var i, ien, j, jen;\n      var loopRow, loopCells;\n      data.splice(row, 1); // Update the cached indexes\n\n      for (i = 0, ien = data.length; i < ien; i++) {\n        loopRow = data[i];\n        loopCells = loopRow.anCells; // Rows\n\n        if (loopRow.nTr !== null) {\n          loopRow.nTr._DT_RowIndex = i;\n        } // Cells\n\n\n        if (loopCells !== null) {\n          for (j = 0, jen = loopCells.length; j < jen; j++) {\n            loopCells[j]._DT_CellIndex.row = i;\n          }\n        }\n      } // Delete from the display arrays\n\n\n      _fnDeleteIndex(settings.aiDisplayMaster, row);\n\n      _fnDeleteIndex(settings.aiDisplay, row);\n\n      _fnDeleteIndex(that[thatIdx], row, false); // maintain local indexes\n      // For server-side processing tables - subtract the deleted row from the count\n\n\n      if (settings._iRecordsDisplay > 0) {\n        settings._iRecordsDisplay--;\n      } // Check for an 'overflow' they case for displaying the table\n\n\n      _fnLengthOverflow(settings); // Remove the row's ID reference if there is one\n\n\n      var id = settings.rowIdFn(rowData._aData);\n\n      if (id !== undefined) {\n        delete settings.aIds[id];\n      }\n    });\n    this.iterator('table', function (settings) {\n      for (var i = 0, ien = settings.aoData.length; i < ien; i++) {\n        settings.aoData[i].idx = i;\n      }\n    });\n    return this;\n  });\n\n  _api_register('rows.add()', function (rows) {\n    var newRows = this.iterator('table', function (settings) {\n      var row, i, ien;\n      var out = [];\n\n      for (i = 0, ien = rows.length; i < ien; i++) {\n        row = rows[i];\n\n        if (row.nodeName && row.nodeName.toUpperCase() === 'TR') {\n          out.push(_fnAddTr(settings, row)[0]);\n        } else {\n          out.push(_fnAddData(settings, row));\n        }\n      }\n\n      return out;\n    }, 1); // Return an Api.rows() extended instance, so rows().nodes() etc can be used\n\n    var modRows = this.rows(-1);\n    modRows.pop();\n    $.merge(modRows, newRows);\n    return modRows;\n  });\n  /**\n   *\n   */\n\n\n  _api_register('row()', function (selector, opts) {\n    return _selector_first(this.rows(selector, opts));\n  });\n\n  _api_register('row().data()', function (data) {\n    var ctx = this.context;\n\n    if (data === undefined) {\n      // Get\n      return ctx.length && this.length ? ctx[0].aoData[this[0]]._aData : undefined;\n    } // Set\n\n\n    var row = ctx[0].aoData[this[0]];\n    row._aData = data; // If the DOM has an id, and the data source is an array\n\n    if ($.isArray(data) && row.nTr.id) {\n      _fnSetObjectDataFn(ctx[0].rowId)(data, row.nTr.id);\n    } // Automatically invalidate\n\n\n    _fnInvalidate(ctx[0], this[0], 'data');\n\n    return this;\n  });\n\n  _api_register('row().node()', function () {\n    var ctx = this.context;\n    return ctx.length && this.length ? ctx[0].aoData[this[0]].nTr || null : null;\n  });\n\n  _api_register('row.add()', function (row) {\n    // Allow a jQuery object to be passed in - only a single row is added from\n    // it though - the first element in the set\n    if (row instanceof $ && row.length) {\n      row = row[0];\n    }\n\n    var rows = this.iterator('table', function (settings) {\n      if (row.nodeName && row.nodeName.toUpperCase() === 'TR') {\n        return _fnAddTr(settings, row)[0];\n      }\n\n      return _fnAddData(settings, row);\n    }); // Return an Api.rows() extended instance, with the newly added row selected\n\n    return this.row(rows[0]);\n  });\n\n  var __details_add = function __details_add(ctx, row, data, klass) {\n    // Convert to array of TR elements\n    var rows = [];\n\n    var addRow = function addRow(r, k) {\n      // Recursion to allow for arrays of jQuery objects\n      if ($.isArray(r) || r instanceof $) {\n        for (var i = 0, ien = r.length; i < ien; i++) {\n          addRow(r[i], k);\n        }\n\n        return;\n      } // If we get a TR element, then just add it directly - up to the dev\n      // to add the correct number of columns etc\n\n\n      if (r.nodeName && r.nodeName.toLowerCase() === 'tr') {\n        rows.push(r);\n      } else {\n        // Otherwise create a row with a wrapper\n        var created = $('<tr><td/></tr>').addClass(k);\n        $('td', created).addClass(k).html(r)[0].colSpan = _fnVisbleColumns(ctx);\n        rows.push(created[0]);\n      }\n    };\n\n    addRow(data, klass);\n\n    if (row._details) {\n      row._details.detach();\n    }\n\n    row._details = $(rows); // If the children were already shown, that state should be retained\n\n    if (row._detailsShow) {\n      row._details.insertAfter(row.nTr);\n    }\n  };\n\n  var __details_remove = function __details_remove(api, idx) {\n    var ctx = api.context;\n\n    if (ctx.length) {\n      var row = ctx[0].aoData[idx !== undefined ? idx : api[0]];\n\n      if (row && row._details) {\n        row._details.remove();\n\n        row._detailsShow = undefined;\n        row._details = undefined;\n      }\n    }\n  };\n\n  var __details_display = function __details_display(api, show) {\n    var ctx = api.context;\n\n    if (ctx.length && api.length) {\n      var row = ctx[0].aoData[api[0]];\n\n      if (row._details) {\n        row._detailsShow = show;\n\n        if (show) {\n          row._details.insertAfter(row.nTr);\n        } else {\n          row._details.detach();\n        }\n\n        __details_events(ctx[0]);\n      }\n    }\n  };\n\n  var __details_events = function __details_events(settings) {\n    var api = new _Api2(settings);\n    var namespace = '.dt.DT_details';\n    var drawEvent = 'draw' + namespace;\n    var colvisEvent = 'column-visibility' + namespace;\n    var destroyEvent = 'destroy' + namespace;\n    var data = settings.aoData;\n    api.off(drawEvent + ' ' + colvisEvent + ' ' + destroyEvent);\n\n    if (_pluck(data, '_details').length > 0) {\n      // On each draw, insert the required elements into the document\n      api.on(drawEvent, function (e, ctx) {\n        if (settings !== ctx) {\n          return;\n        }\n\n        api.rows({\n          page: 'current'\n        }).eq(0).each(function (idx) {\n          // Internal data grab\n          var row = data[idx];\n\n          if (row._detailsShow) {\n            row._details.insertAfter(row.nTr);\n          }\n        });\n      }); // Column visibility change - update the colspan\n\n      api.on(colvisEvent, function (e, ctx, idx, vis) {\n        if (settings !== ctx) {\n          return;\n        } // Update the colspan for the details rows (note, only if it already has\n        // a colspan)\n\n\n        var row,\n            visible = _fnVisbleColumns(ctx);\n\n        for (var i = 0, ien = data.length; i < ien; i++) {\n          row = data[i];\n\n          if (row._details) {\n            row._details.children('td[colspan]').attr('colspan', visible);\n          }\n        }\n      }); // Table destroyed - nuke any child rows\n\n      api.on(destroyEvent, function (e, ctx) {\n        if (settings !== ctx) {\n          return;\n        }\n\n        for (var i = 0, ien = data.length; i < ien; i++) {\n          if (data[i]._details) {\n            __details_remove(api, i);\n          }\n        }\n      });\n    }\n  }; // Strings for the method names to help minification\n\n\n  var _emp = '';\n\n  var _child_obj = _emp + 'row().child';\n\n  var _child_mth = _child_obj + '()'; // data can be:\n  //  tr\n  //  string\n  //  jQuery or array of any of the above\n\n\n  _api_register(_child_mth, function (data, klass) {\n    var ctx = this.context;\n\n    if (data === undefined) {\n      // get\n      return ctx.length && this.length ? ctx[0].aoData[this[0]]._details : undefined;\n    } else if (data === true) {\n      // show\n      this.child.show();\n    } else if (data === false) {\n      // remove\n      __details_remove(this);\n    } else if (ctx.length && this.length) {\n      // set\n      __details_add(ctx[0], ctx[0].aoData[this[0]], data, klass);\n    }\n\n    return this;\n  });\n\n  _api_register([_child_obj + '.show()', _child_mth + '.show()' // only when `child()` was called with parameters (without\n  ], function (show) {\n    // it returns an object and this method is not executed)\n    __details_display(this, true);\n\n    return this;\n  });\n\n  _api_register([_child_obj + '.hide()', _child_mth + '.hide()' // only when `child()` was called with parameters (without\n  ], function () {\n    // it returns an object and this method is not executed)\n    __details_display(this, false);\n\n    return this;\n  });\n\n  _api_register([_child_obj + '.remove()', _child_mth + '.remove()' // only when `child()` was called with parameters (without\n  ], function () {\n    // it returns an object and this method is not executed)\n    __details_remove(this);\n\n    return this;\n  });\n\n  _api_register(_child_obj + '.isShown()', function () {\n    var ctx = this.context;\n\n    if (ctx.length && this.length) {\n      // _detailsShown as false or undefined will fall through to return false\n      return ctx[0].aoData[this[0]]._detailsShow || false;\n    }\n\n    return false;\n  });\n  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n   * Columns\n   *\n   * {integer}           - column index (>=0 count from left, <0 count from right)\n   * \"{integer}:visIdx\"  - visible column index (i.e. translate to column index)  (>=0 count from left, <0 count from right)\n   * \"{integer}:visible\" - alias for {integer}:visIdx  (>=0 count from left, <0 count from right)\n   * \"{string}:name\"     - column name\n   * \"{string}\"          - jQuery selector on column header nodes\n   *\n   */\n  // can be an array of these items, comma separated list, or an array of comma\n  // separated lists\n\n\n  var __re_column_selector = /^([^:]+):(name|visIdx|visible)$/; // r1 and r2 are redundant - but it means that the parameters match for the\n  // iterator callback in columns().data()\n\n  var __columnData = function __columnData(settings, column, r1, r2, rows) {\n    var a = [];\n\n    for (var row = 0, ien = rows.length; row < ien; row++) {\n      a.push(_fnGetCellData(settings, rows[row], column));\n    }\n\n    return a;\n  };\n\n  var __column_selector = function __column_selector(settings, selector, opts) {\n    var columns = settings.aoColumns,\n        names = _pluck(columns, 'sName'),\n        nodes = _pluck(columns, 'nTh');\n\n    var run = function run(s) {\n      var selInt = _intVal(s); // Selector - all\n\n\n      if (s === '') {\n        return _range(columns.length);\n      } // Selector - index\n\n\n      if (selInt !== null) {\n        return [selInt >= 0 ? selInt : // Count from left\n        columns.length + selInt // Count from right (+ because its a negative value)\n        ];\n      } // Selector = function\n\n\n      if (typeof s === 'function') {\n        var rows = _selector_row_indexes(settings, opts);\n\n        return $.map(columns, function (col, idx) {\n          return s(idx, __columnData(settings, idx, 0, 0, rows), nodes[idx]) ? idx : null;\n        });\n      } // jQuery or string selector\n\n\n      var match = typeof s === 'string' ? s.match(__re_column_selector) : '';\n\n      if (match) {\n        switch (match[2]) {\n          case 'visIdx':\n          case 'visible':\n            var idx = parseInt(match[1], 10); // Visible index given, convert to column index\n\n            if (idx < 0) {\n              // Counting from the right\n              var visColumns = $.map(columns, function (col, i) {\n                return col.bVisible ? i : null;\n              });\n              return [visColumns[visColumns.length + idx]];\n            } // Counting from the left\n\n\n            return [_fnVisibleToColumnIndex(settings, idx)];\n\n          case 'name':\n            // match by name. `names` is column index complete and in order\n            return $.map(names, function (name, i) {\n              return name === match[1] ? i : null;\n            });\n\n          default:\n            return [];\n        }\n      } // Cell in the table body\n\n\n      if (s.nodeName && s._DT_CellIndex) {\n        return [s._DT_CellIndex.column];\n      } // jQuery selector on the TH elements for the columns\n\n\n      var jqResult = $(nodes).filter(s).map(function () {\n        return $.inArray(this, nodes); // `nodes` is column index complete and in order\n      }).toArray();\n\n      if (jqResult.length || !s.nodeName) {\n        return jqResult;\n      } // Otherwise a node which might have a `dt-column` data attribute, or be\n      // a child or such an element\n\n\n      var host = $(s).closest('*[data-dt-column]');\n      return host.length ? [host.data('dt-column')] : [];\n    };\n\n    return _selector_run('column', selector, run, settings, opts);\n  };\n\n  var __setColumnVis = function __setColumnVis(settings, column, vis) {\n    var cols = settings.aoColumns,\n        col = cols[column],\n        data = settings.aoData,\n        row,\n        cells,\n        i,\n        ien,\n        tr; // Get\n\n    if (vis === undefined) {\n      return col.bVisible;\n    } // Set\n    // No change\n\n\n    if (col.bVisible === vis) {\n      return;\n    }\n\n    if (vis) {\n      // Insert column\n      // Need to decide if we should use appendChild or insertBefore\n      var insertBefore = $.inArray(true, _pluck(cols, 'bVisible'), column + 1);\n\n      for (i = 0, ien = data.length; i < ien; i++) {\n        tr = data[i].nTr;\n        cells = data[i].anCells;\n\n        if (tr) {\n          // insertBefore can act like appendChild if 2nd arg is null\n          tr.insertBefore(cells[column], cells[insertBefore] || null);\n        }\n      }\n    } else {\n      // Remove column\n      $(_pluck(settings.aoData, 'anCells', column)).detach();\n    } // Common actions\n\n\n    col.bVisible = vis;\n\n    _fnDrawHead(settings, settings.aoHeader);\n\n    _fnDrawHead(settings, settings.aoFooter); // Update colspan for no records display. Child rows and extensions will use their own\n    // listeners to do this - only need to update the empty table item here\n\n\n    if (!settings.aiDisplay.length) {\n      $(settings.nTBody).find('td[colspan]').attr('colspan', _fnVisbleColumns(settings));\n    }\n\n    _fnSaveState(settings);\n  };\n\n  _api_register('columns()', function (selector, opts) {\n    // argument shifting\n    if (selector === undefined) {\n      selector = '';\n    } else if ($.isPlainObject(selector)) {\n      opts = selector;\n      selector = '';\n    }\n\n    opts = _selector_opts(opts);\n    var inst = this.iterator('table', function (settings) {\n      return __column_selector(settings, selector, opts);\n    }, 1); // Want argument shifting here and in _row_selector?\n\n    inst.selector.cols = selector;\n    inst.selector.opts = opts;\n    return inst;\n  });\n\n  _api_registerPlural('columns().header()', 'column().header()', function (selector, opts) {\n    return this.iterator('column', function (settings, column) {\n      return settings.aoColumns[column].nTh;\n    }, 1);\n  });\n\n  _api_registerPlural('columns().footer()', 'column().footer()', function (selector, opts) {\n    return this.iterator('column', function (settings, column) {\n      return settings.aoColumns[column].nTf;\n    }, 1);\n  });\n\n  _api_registerPlural('columns().data()', 'column().data()', function () {\n    return this.iterator('column-rows', __columnData, 1);\n  });\n\n  _api_registerPlural('columns().dataSrc()', 'column().dataSrc()', function () {\n    return this.iterator('column', function (settings, column) {\n      return settings.aoColumns[column].mData;\n    }, 1);\n  });\n\n  _api_registerPlural('columns().cache()', 'column().cache()', function (type) {\n    return this.iterator('column-rows', function (settings, column, i, j, rows) {\n      return _pluck_order(settings.aoData, rows, type === 'search' ? '_aFilterData' : '_aSortData', column);\n    }, 1);\n  });\n\n  _api_registerPlural('columns().nodes()', 'column().nodes()', function () {\n    return this.iterator('column-rows', function (settings, column, i, j, rows) {\n      return _pluck_order(settings.aoData, rows, 'anCells', column);\n    }, 1);\n  });\n\n  _api_registerPlural('columns().visible()', 'column().visible()', function (vis, calc) {\n    var ret = this.iterator('column', function (settings, column) {\n      if (vis === undefined) {\n        return settings.aoColumns[column].bVisible;\n      } // else\n\n\n      __setColumnVis(settings, column, vis);\n    }); // Group the column visibility changes\n\n    if (vis !== undefined) {\n      // Second loop once the first is done for events\n      this.iterator('column', function (settings, column) {\n        _fnCallbackFire(settings, null, 'column-visibility', [settings, column, vis, calc]);\n      });\n\n      if (calc === undefined || calc) {\n        this.columns.adjust();\n      }\n    }\n\n    return ret;\n  });\n\n  _api_registerPlural('columns().indexes()', 'column().index()', function (type) {\n    return this.iterator('column', function (settings, column) {\n      return type === 'visible' ? _fnColumnIndexToVisible(settings, column) : column;\n    }, 1);\n  });\n\n  _api_register('columns.adjust()', function () {\n    return this.iterator('table', function (settings) {\n      _fnAdjustColumnSizing(settings);\n    }, 1);\n  });\n\n  _api_register('column.index()', function (type, idx) {\n    if (this.context.length !== 0) {\n      var ctx = this.context[0];\n\n      if (type === 'fromVisible' || type === 'toData') {\n        return _fnVisibleToColumnIndex(ctx, idx);\n      } else if (type === 'fromData' || type === 'toVisible') {\n        return _fnColumnIndexToVisible(ctx, idx);\n      }\n    }\n  });\n\n  _api_register('column()', function (selector, opts) {\n    return _selector_first(this.columns(selector, opts));\n  });\n\n  var __cell_selector = function __cell_selector(settings, selector, opts) {\n    var data = settings.aoData;\n\n    var rows = _selector_row_indexes(settings, opts);\n\n    var cells = _removeEmpty(_pluck_order(data, rows, 'anCells'));\n\n    var allCells = $([].concat.apply([], cells));\n    var row;\n    var columns = settings.aoColumns.length;\n    var a, i, ien, j, o, host;\n\n    var run = function run(s) {\n      var fnSelector = typeof s === 'function';\n\n      if (s === null || s === undefined || fnSelector) {\n        // All cells and function selectors\n        a = [];\n\n        for (i = 0, ien = rows.length; i < ien; i++) {\n          row = rows[i];\n\n          for (j = 0; j < columns; j++) {\n            o = {\n              row: row,\n              column: j\n            };\n\n            if (fnSelector) {\n              // Selector - function\n              host = data[row];\n\n              if (s(o, _fnGetCellData(settings, row, j), host.anCells ? host.anCells[j] : null)) {\n                a.push(o);\n              }\n            } else {\n              // Selector - all\n              a.push(o);\n            }\n          }\n        }\n\n        return a;\n      } // Selector - index\n\n\n      if ($.isPlainObject(s)) {\n        // Valid cell index and its in the array of selectable rows\n        return s.column !== undefined && s.row !== undefined && $.inArray(s.row, rows) !== -1 ? [s] : [];\n      } // Selector - jQuery filtered cells\n\n\n      var jqResult = allCells.filter(s).map(function (i, el) {\n        return {\n          // use a new object, in case someone changes the values\n          row: el._DT_CellIndex.row,\n          column: el._DT_CellIndex.column\n        };\n      }).toArray();\n\n      if (jqResult.length || !s.nodeName) {\n        return jqResult;\n      } // Otherwise the selector is a node, and there is one last option - the\n      // element might be a child of an element which has dt-row and dt-column\n      // data attributes\n\n\n      host = $(s).closest('*[data-dt-row]');\n      return host.length ? [{\n        row: host.data('dt-row'),\n        column: host.data('dt-column')\n      }] : [];\n    };\n\n    return _selector_run('cell', selector, run, settings, opts);\n  };\n\n  _api_register('cells()', function (rowSelector, columnSelector, opts) {\n    // Argument shifting\n    if ($.isPlainObject(rowSelector)) {\n      // Indexes\n      if (rowSelector.row === undefined) {\n        // Selector options in first parameter\n        opts = rowSelector;\n        rowSelector = null;\n      } else {\n        // Cell index objects in first parameter\n        opts = columnSelector;\n        columnSelector = null;\n      }\n    }\n\n    if ($.isPlainObject(columnSelector)) {\n      opts = columnSelector;\n      columnSelector = null;\n    } // Cell selector\n\n\n    if (columnSelector === null || columnSelector === undefined) {\n      return this.iterator('table', function (settings) {\n        return __cell_selector(settings, rowSelector, _selector_opts(opts));\n      });\n    } // Row + column selector\n\n\n    var columns = this.columns(columnSelector);\n    var rows = this.rows(rowSelector);\n    var a, i, ien, j, jen;\n    this.iterator('table', function (settings, idx) {\n      a = [];\n\n      for (i = 0, ien = rows[idx].length; i < ien; i++) {\n        for (j = 0, jen = columns[idx].length; j < jen; j++) {\n          a.push({\n            row: rows[idx][i],\n            column: columns[idx][j]\n          });\n        }\n      }\n    }, 1); // Now pass through the cell selector for options\n\n    var cells = this.cells(a, opts);\n    $.extend(cells.selector, {\n      cols: columnSelector,\n      rows: rowSelector,\n      opts: opts\n    });\n    return cells;\n  });\n\n  _api_registerPlural('cells().nodes()', 'cell().node()', function () {\n    return this.iterator('cell', function (settings, row, column) {\n      var data = settings.aoData[row];\n      return data && data.anCells ? data.anCells[column] : undefined;\n    }, 1);\n  });\n\n  _api_register('cells().data()', function () {\n    return this.iterator('cell', function (settings, row, column) {\n      return _fnGetCellData(settings, row, column);\n    }, 1);\n  });\n\n  _api_registerPlural('cells().cache()', 'cell().cache()', function (type) {\n    type = type === 'search' ? '_aFilterData' : '_aSortData';\n    return this.iterator('cell', function (settings, row, column) {\n      return settings.aoData[row][type][column];\n    }, 1);\n  });\n\n  _api_registerPlural('cells().render()', 'cell().render()', function (type) {\n    return this.iterator('cell', function (settings, row, column) {\n      return _fnGetCellData(settings, row, column, type);\n    }, 1);\n  });\n\n  _api_registerPlural('cells().indexes()', 'cell().index()', function () {\n    return this.iterator('cell', function (settings, row, column) {\n      return {\n        row: row,\n        column: column,\n        columnVisible: _fnColumnIndexToVisible(settings, column)\n      };\n    }, 1);\n  });\n\n  _api_registerPlural('cells().invalidate()', 'cell().invalidate()', function (src) {\n    return this.iterator('cell', function (settings, row, column) {\n      _fnInvalidate(settings, row, src, column);\n    });\n  });\n\n  _api_register('cell()', function (rowSelector, columnSelector, opts) {\n    return _selector_first(this.cells(rowSelector, columnSelector, opts));\n  });\n\n  _api_register('cell().data()', function (data) {\n    var ctx = this.context;\n    var cell = this[0];\n\n    if (data === undefined) {\n      // Get\n      return ctx.length && cell.length ? _fnGetCellData(ctx[0], cell[0].row, cell[0].column) : undefined;\n    } // Set\n\n\n    _fnSetCellData(ctx[0], cell[0].row, cell[0].column, data);\n\n    _fnInvalidate(ctx[0], cell[0].row, 'data', cell[0].column);\n\n    return this;\n  });\n  /**\n   * Get current ordering (sorting) that has been applied to the table.\n   *\n   * @returns {array} 2D array containing the sorting information for the first\n   *   table in the current context. Each element in the parent array represents\n   *   a column being sorted upon (i.e. multi-sorting with two columns would have\n   *   2 inner arrays). The inner arrays may have 2 or 3 elements. The first is\n   *   the column index that the sorting condition applies to, the second is the\n   *   direction of the sort (`desc` or `asc`) and, optionally, the third is the\n   *   index of the sorting order from the `column.sorting` initialisation array.\n   */\n\n  /**\n  * Set the ordering for the table.\n  *\n  * @param {integer} order Column index to sort upon.\n  * @param {string} direction Direction of the sort to be applied (`asc` or `desc`)\n  * @returns {DataTables.Api} this\n  */\n\n  /**\n  * Set the ordering for the table.\n  *\n  * @param {array} order 1D array of sorting information to be applied.\n  * @param {array} [...] Optional additional sorting conditions\n  * @returns {DataTables.Api} this\n  */\n\n  /**\n  * Set the ordering for the table.\n  *\n  * @param {array} order 2D array of sorting information to be applied.\n  * @returns {DataTables.Api} this\n  */\n\n\n  _api_register('order()', function (order, dir) {\n    var ctx = this.context;\n\n    if (order === undefined) {\n      // get\n      return ctx.length !== 0 ? ctx[0].aaSorting : undefined;\n    } // set\n\n\n    if (typeof order === 'number') {\n      // Simple column / direction passed in\n      order = [[order, dir]];\n    } else if (order.length && !$.isArray(order[0])) {\n      // Arguments passed in (list of 1D arrays)\n      order = Array.prototype.slice.call(arguments);\n    } // otherwise a 2D array was passed in\n\n\n    return this.iterator('table', function (settings) {\n      settings.aaSorting = order.slice();\n    });\n  });\n  /**\n   * Attach a sort listener to an element for a given column\n   *\n   * @param {node|jQuery|string} node Identifier for the element(s) to attach the\n   *   listener to. This can take the form of a single DOM node, a jQuery\n   *   collection of nodes or a jQuery selector which will identify the node(s).\n   * @param {integer} column the column that a click on this node will sort on\n   * @param {function} [callback] callback function when sort is run\n   * @returns {DataTables.Api} this\n   */\n\n\n  _api_register('order.listener()', function (node, column, callback) {\n    return this.iterator('table', function (settings) {\n      _fnSortAttachListener(settings, node, column, callback);\n    });\n  });\n\n  _api_register('order.fixed()', function (set) {\n    if (!set) {\n      var ctx = this.context;\n      var fixed = ctx.length ? ctx[0].aaSortingFixed : undefined;\n      return $.isArray(fixed) ? {\n        pre: fixed\n      } : fixed;\n    }\n\n    return this.iterator('table', function (settings) {\n      settings.aaSortingFixed = $.extend(true, {}, set);\n    });\n  }); // Order by the selected column(s)\n\n\n  _api_register(['columns().order()', 'column().order()'], function (dir) {\n    var that = this;\n    return this.iterator('table', function (settings, i) {\n      var sort = [];\n      $.each(that[i], function (j, col) {\n        sort.push([col, dir]);\n      });\n      settings.aaSorting = sort;\n    });\n  });\n\n  _api_register('search()', function (input, regex, smart, caseInsen) {\n    var ctx = this.context;\n\n    if (input === undefined) {\n      // get\n      return ctx.length !== 0 ? ctx[0].oPreviousSearch.sSearch : undefined;\n    } // set\n\n\n    return this.iterator('table', function (settings) {\n      if (!settings.oFeatures.bFilter) {\n        return;\n      }\n\n      _fnFilterComplete(settings, $.extend({}, settings.oPreviousSearch, {\n        \"sSearch\": input + \"\",\n        \"bRegex\": regex === null ? false : regex,\n        \"bSmart\": smart === null ? true : smart,\n        \"bCaseInsensitive\": caseInsen === null ? true : caseInsen\n      }), 1);\n    });\n  });\n\n  _api_registerPlural('columns().search()', 'column().search()', function (input, regex, smart, caseInsen) {\n    return this.iterator('column', function (settings, column) {\n      var preSearch = settings.aoPreSearchCols;\n\n      if (input === undefined) {\n        // get\n        return preSearch[column].sSearch;\n      } // set\n\n\n      if (!settings.oFeatures.bFilter) {\n        return;\n      }\n\n      $.extend(preSearch[column], {\n        \"sSearch\": input + \"\",\n        \"bRegex\": regex === null ? false : regex,\n        \"bSmart\": smart === null ? true : smart,\n        \"bCaseInsensitive\": caseInsen === null ? true : caseInsen\n      });\n\n      _fnFilterComplete(settings, settings.oPreviousSearch, 1);\n    });\n  });\n  /*\n   * State API methods\n   */\n\n\n  _api_register('state()', function () {\n    return this.context.length ? this.context[0].oSavedState : null;\n  });\n\n  _api_register('state.clear()', function () {\n    return this.iterator('table', function (settings) {\n      // Save an empty object\n      settings.fnStateSaveCallback.call(settings.oInstance, settings, {});\n    });\n  });\n\n  _api_register('state.loaded()', function () {\n    return this.context.length ? this.context[0].oLoadedState : null;\n  });\n\n  _api_register('state.save()', function () {\n    return this.iterator('table', function (settings) {\n      _fnSaveState(settings);\n    });\n  });\n  /**\n   * Provide a common method for plug-ins to check the version of DataTables being\n   * used, in order to ensure compatibility.\n   *\n   *  @param {string} version Version string to check for, in the format \"X.Y.Z\".\n   *    Note that the formats \"X\" and \"X.Y\" are also acceptable.\n   *  @returns {boolean} true if this version of DataTables is greater or equal to\n   *    the required version, or false if this version of DataTales is not\n   *    suitable\n   *  @static\n   *  @dtopt API-Static\n   *\n   *  @example\n   *    alert( $.fn.dataTable.versionCheck( '1.9.0' ) );\n   */\n\n\n  DataTable.versionCheck = DataTable.fnVersionCheck = function (version) {\n    var aThis = DataTable.version.split('.');\n    var aThat = version.split('.');\n    var iThis, iThat;\n\n    for (var i = 0, iLen = aThat.length; i < iLen; i++) {\n      iThis = parseInt(aThis[i], 10) || 0;\n      iThat = parseInt(aThat[i], 10) || 0; // Parts are the same, keep comparing\n\n      if (iThis === iThat) {\n        continue;\n      } // Parts are different, return immediately\n\n\n      return iThis > iThat;\n    }\n\n    return true;\n  };\n  /**\n   * Check if a `<table>` node is a DataTable table already or not.\n   *\n   *  @param {node|jquery|string} table Table node, jQuery object or jQuery\n   *      selector for the table to test. Note that if more than more than one\n   *      table is passed on, only the first will be checked\n   *  @returns {boolean} true the table given is a DataTable, or false otherwise\n   *  @static\n   *  @dtopt API-Static\n   *\n   *  @example\n   *    if ( ! $.fn.DataTable.isDataTable( '#example' ) ) {\n   *      $('#example').dataTable();\n   *    }\n   */\n\n\n  DataTable.isDataTable = DataTable.fnIsDataTable = function (table) {\n    var t = $(table).get(0);\n    var is = false;\n\n    if (table instanceof DataTable.Api) {\n      return true;\n    }\n\n    $.each(DataTable.settings, function (i, o) {\n      var head = o.nScrollHead ? $('table', o.nScrollHead)[0] : null;\n      var foot = o.nScrollFoot ? $('table', o.nScrollFoot)[0] : null;\n\n      if (o.nTable === t || head === t || foot === t) {\n        is = true;\n      }\n    });\n    return is;\n  };\n  /**\n   * Get all DataTable tables that have been initialised - optionally you can\n   * select to get only currently visible tables.\n   *\n   *  @param {boolean} [visible=false] Flag to indicate if you want all (default)\n   *    or visible tables only.\n   *  @returns {array} Array of `table` nodes (not DataTable instances) which are\n   *    DataTables\n   *  @static\n   *  @dtopt API-Static\n   *\n   *  @example\n   *    $.each( $.fn.dataTable.tables(true), function () {\n   *      $(table).DataTable().columns.adjust();\n   *    } );\n   */\n\n\n  DataTable.tables = DataTable.fnTables = function (visible) {\n    var api = false;\n\n    if ($.isPlainObject(visible)) {\n      api = visible.api;\n      visible = visible.visible;\n    }\n\n    var a = $.map(DataTable.settings, function (o) {\n      if (!visible || visible && $(o.nTable).is(':visible')) {\n        return o.nTable;\n      }\n    });\n    return api ? new _Api2(a) : a;\n  };\n  /**\n   * Convert from camel case parameters to Hungarian notation. This is made public\n   * for the extensions to provide the same ability as DataTables core to accept\n   * either the 1.9 style Hungarian notation, or the 1.10+ style camelCase\n   * parameters.\n   *\n   *  @param {object} src The model object which holds all parameters that can be\n   *    mapped.\n   *  @param {object} user The object to convert from camel case to Hungarian.\n   *  @param {boolean} force When set to `true`, properties which already have a\n   *    Hungarian value in the `user` object will be overwritten. Otherwise they\n   *    won't be.\n   */\n\n\n  DataTable.camelToHungarian = _fnCamelToHungarian;\n  /**\n   *\n   */\n\n  _api_register('$()', function (selector, opts) {\n    var rows = this.rows(opts).nodes(),\n        // Get all rows\n    jqRows = $(rows);\n    return $([].concat(jqRows.filter(selector).toArray(), jqRows.find(selector).toArray()));\n  }); // jQuery functions to operate on the tables\n\n\n  $.each(['on', 'one', 'off'], function (i, key) {\n    _api_register(key + '()', function ()\n    /* event, handler */\n    {\n      var args = Array.prototype.slice.call(arguments); // Add the `dt` namespace automatically if it isn't already present\n\n      args[0] = $.map(args[0].split(/\\s/), function (e) {\n        return !e.match(/\\.dt\\b/) ? e + '.dt' : e;\n      }).join(' ');\n      var inst = $(this.tables().nodes());\n      inst[key].apply(inst, args);\n      return this;\n    });\n  });\n\n  _api_register('clear()', function () {\n    return this.iterator('table', function (settings) {\n      _fnClearTable(settings);\n    });\n  });\n\n  _api_register('settings()', function () {\n    return new _Api2(this.context, this.context);\n  });\n\n  _api_register('init()', function () {\n    var ctx = this.context;\n    return ctx.length ? ctx[0].oInit : null;\n  });\n\n  _api_register('data()', function () {\n    return this.iterator('table', function (settings) {\n      return _pluck(settings.aoData, '_aData');\n    }).flatten();\n  });\n\n  _api_register('destroy()', function (remove) {\n    remove = remove || false;\n    return this.iterator('table', function (settings) {\n      var orig = settings.nTableWrapper.parentNode;\n      var classes = settings.oClasses;\n      var table = settings.nTable;\n      var tbody = settings.nTBody;\n      var thead = settings.nTHead;\n      var tfoot = settings.nTFoot;\n      var jqTable = $(table);\n      var jqTbody = $(tbody);\n      var jqWrapper = $(settings.nTableWrapper);\n      var rows = $.map(settings.aoData, function (r) {\n        return r.nTr;\n      });\n      var i, ien; // Flag to note that the table is currently being destroyed - no action\n      // should be taken\n\n      settings.bDestroying = true; // Fire off the destroy callbacks for plug-ins etc\n\n      _fnCallbackFire(settings, \"aoDestroyCallback\", \"destroy\", [settings]); // If not being removed from the document, make all columns visible\n\n\n      if (!remove) {\n        new _Api2(settings).columns().visible(true);\n      } // Blitz all `DT` namespaced events (these are internal events, the\n      // lowercase, `dt` events are user subscribed and they are responsible\n      // for removing them\n\n\n      jqWrapper.off('.DT').find(':not(tbody *)').off('.DT');\n      $(window).off('.DT-' + settings.sInstance); // When scrolling we had to break the table up - restore it\n\n      if (table != thead.parentNode) {\n        jqTable.children('thead').detach();\n        jqTable.append(thead);\n      }\n\n      if (tfoot && table != tfoot.parentNode) {\n        jqTable.children('tfoot').detach();\n        jqTable.append(tfoot);\n      }\n\n      settings.aaSorting = [];\n      settings.aaSortingFixed = [];\n\n      _fnSortingClasses(settings);\n\n      $(rows).removeClass(settings.asStripeClasses.join(' '));\n      $('th, td', thead).removeClass(classes.sSortable + ' ' + classes.sSortableAsc + ' ' + classes.sSortableDesc + ' ' + classes.sSortableNone); // Add the TR elements back into the table in their original order\n\n      jqTbody.children().detach();\n      jqTbody.append(rows); // Remove the DataTables generated nodes, events and classes\n\n      var removedMethod = remove ? 'remove' : 'detach';\n      jqTable[removedMethod]();\n      jqWrapper[removedMethod](); // If we need to reattach the table to the document\n\n      if (!remove && orig) {\n        // insertBefore acts like appendChild if !arg[1]\n        orig.insertBefore(table, settings.nTableReinsertBefore); // Restore the width of the original table - was read from the style property,\n        // so we can restore directly to that\n\n        jqTable.css('width', settings.sDestroyWidth).removeClass(classes.sTable); // If the were originally stripe classes - then we add them back here.\n        // Note this is not fool proof (for example if not all rows had stripe\n        // classes - but it's a good effort without getting carried away\n\n        ien = settings.asDestroyStripes.length;\n\n        if (ien) {\n          jqTbody.children().each(function (i) {\n            $(this).addClass(settings.asDestroyStripes[i % ien]);\n          });\n        }\n      }\n      /* Remove the settings object from the settings array */\n\n\n      var idx = $.inArray(settings, DataTable.settings);\n\n      if (idx !== -1) {\n        DataTable.settings.splice(idx, 1);\n      }\n    });\n  }); // Add the `every()` method for rows, columns and cells in a compact form\n\n\n  $.each(['column', 'row', 'cell'], function (i, type) {\n    _api_register(type + 's().every()', function (fn) {\n      var opts = this.selector.opts;\n      var api = this;\n      return this.iterator(type, function (settings, arg1, arg2, arg3, arg4) {\n        // Rows and columns:\n        //  arg1 - index\n        //  arg2 - table counter\n        //  arg3 - loop counter\n        //  arg4 - undefined\n        // Cells:\n        //  arg1 - row index\n        //  arg2 - column index\n        //  arg3 - table counter\n        //  arg4 - loop counter\n        fn.call(api[type](arg1, type === 'cell' ? arg2 : opts, type === 'cell' ? opts : undefined), arg1, arg2, arg3, arg4);\n      });\n    });\n  }); // i18n method for extensions to be able to use the language object from the\n  // DataTable\n\n  _api_register('i18n()', function (token, def, plural) {\n    var ctx = this.context[0];\n\n    var resolved = _fnGetObjectDataFn(token)(ctx.oLanguage);\n\n    if (resolved === undefined) {\n      resolved = def;\n    }\n\n    if (plural !== undefined && $.isPlainObject(resolved)) {\n      resolved = resolved[plural] !== undefined ? resolved[plural] : resolved._;\n    }\n\n    return resolved.replace('%d', plural); // nb: plural might be undefined,\n  });\n  /**\n   * Version string for plug-ins to check compatibility. Allowed format is\n   * `a.b.c-d` where: a:int, b:int, c:int, d:string(dev|beta|alpha). `d` is used\n   * only for non-release builds. See http://semver.org/ for more information.\n   *  @member\n   *  @type string\n   *  @default Version number\n   */\n\n\n  DataTable.version = \"1.10.19\";\n  /**\n   * Private data store, containing all of the settings objects that are\n   * created for the tables on a given page.\n   *\n   * Note that the `DataTable.settings` object is aliased to\n   * `jQuery.fn.dataTableExt` through which it may be accessed and\n   * manipulated, or `jQuery.fn.dataTable.settings`.\n   *  @member\n   *  @type array\n   *  @default []\n   *  @private\n   */\n\n  DataTable.settings = [];\n  /**\n   * Object models container, for the various models that DataTables has\n   * available to it. These models define the objects that are used to hold\n   * the active state and configuration of the table.\n   *  @namespace\n   */\n\n  DataTable.models = {};\n  /**\n   * Template object for the way in which DataTables holds information about\n   * search information for the global filter and individual column filters.\n   *  @namespace\n   */\n\n  DataTable.models.oSearch = {\n    /**\n     * Flag to indicate if the filtering should be case insensitive or not\n     *  @type boolean\n     *  @default true\n     */\n    \"bCaseInsensitive\": true,\n\n    /**\n     * Applied search term\n     *  @type string\n     *  @default <i>Empty string</i>\n     */\n    \"sSearch\": \"\",\n\n    /**\n     * Flag to indicate if the search term should be interpreted as a\n     * regular expression (true) or not (false) and therefore and special\n     * regex characters escaped.\n     *  @type boolean\n     *  @default false\n     */\n    \"bRegex\": false,\n\n    /**\n     * Flag to indicate if DataTables is to use its smart filtering or not.\n     *  @type boolean\n     *  @default true\n     */\n    \"bSmart\": true\n  };\n  /**\n   * Template object for the way in which DataTables holds information about\n   * each individual row. This is the object format used for the settings\n   * aoData array.\n   *  @namespace\n   */\n\n  DataTable.models.oRow = {\n    /**\n     * TR element for the row\n     *  @type node\n     *  @default null\n     */\n    \"nTr\": null,\n\n    /**\n     * Array of TD elements for each row. This is null until the row has been\n     * created.\n     *  @type array nodes\n     *  @default []\n     */\n    \"anCells\": null,\n\n    /**\n     * Data object from the original data source for the row. This is either\n     * an array if using the traditional form of DataTables, or an object if\n     * using mData options. The exact type will depend on the passed in\n     * data from the data source, or will be an array if using DOM a data\n     * source.\n     *  @type array|object\n     *  @default []\n     */\n    \"_aData\": [],\n\n    /**\n     * Sorting data cache - this array is ostensibly the same length as the\n     * number of columns (although each index is generated only as it is\n     * needed), and holds the data that is used for sorting each column in the\n     * row. We do this cache generation at the start of the sort in order that\n     * the formatting of the sort data need be done only once for each cell\n     * per sort. This array should not be read from or written to by anything\n     * other than the master sorting methods.\n     *  @type array\n     *  @default null\n     *  @private\n     */\n    \"_aSortData\": null,\n\n    /**\n     * Per cell filtering data cache. As per the sort data cache, used to\n     * increase the performance of the filtering in DataTables\n     *  @type array\n     *  @default null\n     *  @private\n     */\n    \"_aFilterData\": null,\n\n    /**\n     * Filtering data cache. This is the same as the cell filtering cache, but\n     * in this case a string rather than an array. This is easily computed with\n     * a join on `_aFilterData`, but is provided as a cache so the join isn't\n     * needed on every search (memory traded for performance)\n     *  @type array\n     *  @default null\n     *  @private\n     */\n    \"_sFilterRow\": null,\n\n    /**\n     * Cache of the class name that DataTables has applied to the row, so we\n     * can quickly look at this variable rather than needing to do a DOM check\n     * on className for the nTr property.\n     *  @type string\n     *  @default <i>Empty string</i>\n     *  @private\n     */\n    \"_sRowStripe\": \"\",\n\n    /**\n     * Denote if the original data source was from the DOM, or the data source\n     * object. This is used for invalidating data, so DataTables can\n     * automatically read data from the original source, unless uninstructed\n     * otherwise.\n     *  @type string\n     *  @default null\n     *  @private\n     */\n    \"src\": null,\n\n    /**\n     * Index in the aoData array. This saves an indexOf lookup when we have the\n     * object, but want to know the index\n     *  @type integer\n     *  @default -1\n     *  @private\n     */\n    \"idx\": -1\n  };\n  /**\n   * Template object for the column information object in DataTables. This object\n   * is held in the settings aoColumns array and contains all the information that\n   * DataTables needs about each individual column.\n   *\n   * Note that this object is related to {@link DataTable.defaults.column}\n   * but this one is the internal data store for DataTables's cache of columns.\n   * It should NOT be manipulated outside of DataTables. Any configuration should\n   * be done through the initialisation options.\n   *  @namespace\n   */\n\n  DataTable.models.oColumn = {\n    /**\n     * Column index. This could be worked out on-the-fly with $.inArray, but it\n     * is faster to just hold it as a variable\n     *  @type integer\n     *  @default null\n     */\n    \"idx\": null,\n\n    /**\n     * A list of the columns that sorting should occur on when this column\n     * is sorted. That this property is an array allows multi-column sorting\n     * to be defined for a column (for example first name / last name columns\n     * would benefit from this). The values are integers pointing to the\n     * columns to be sorted on (typically it will be a single integer pointing\n     * at itself, but that doesn't need to be the case).\n     *  @type array\n     */\n    \"aDataSort\": null,\n\n    /**\n     * Define the sorting directions that are applied to the column, in sequence\n     * as the column is repeatedly sorted upon - i.e. the first value is used\n     * as the sorting direction when the column if first sorted (clicked on).\n     * Sort it again (click again) and it will move on to the next index.\n     * Repeat until loop.\n     *  @type array\n     */\n    \"asSorting\": null,\n\n    /**\n     * Flag to indicate if the column is searchable, and thus should be included\n     * in the filtering or not.\n     *  @type boolean\n     */\n    \"bSearchable\": null,\n\n    /**\n     * Flag to indicate if the column is sortable or not.\n     *  @type boolean\n     */\n    \"bSortable\": null,\n\n    /**\n     * Flag to indicate if the column is currently visible in the table or not\n     *  @type boolean\n     */\n    \"bVisible\": null,\n\n    /**\n     * Store for manual type assignment using the `column.type` option. This\n     * is held in store so we can manipulate the column's `sType` property.\n     *  @type string\n     *  @default null\n     *  @private\n     */\n    \"_sManualType\": null,\n\n    /**\n     * Flag to indicate if HTML5 data attributes should be used as the data\n     * source for filtering or sorting. True is either are.\n     *  @type boolean\n     *  @default false\n     *  @private\n     */\n    \"_bAttrSrc\": false,\n\n    /**\n     * Developer definable function that is called whenever a cell is created (Ajax source,\n     * etc) or processed for input (DOM source). This can be used as a compliment to mRender\n     * allowing you to modify the DOM element (add background colour for example) when the\n     * element is available.\n     *  @type function\n     *  @param {element} nTd The TD node that has been created\n     *  @param {*} sData The Data for the cell\n     *  @param {array|object} oData The data for the whole row\n     *  @param {int} iRow The row index for the aoData data store\n     *  @default null\n     */\n    \"fnCreatedCell\": null,\n\n    /**\n     * Function to get data from a cell in a column. You should <b>never</b>\n     * access data directly through _aData internally in DataTables - always use\n     * the method attached to this property. It allows mData to function as\n     * required. This function is automatically assigned by the column\n     * initialisation method\n     *  @type function\n     *  @param {array|object} oData The data array/object for the array\n     *    (i.e. aoData[]._aData)\n     *  @param {string} sSpecific The specific data type you want to get -\n     *    'display', 'type' 'filter' 'sort'\n     *  @returns {*} The data for the cell from the given row's data\n     *  @default null\n     */\n    \"fnGetData\": null,\n\n    /**\n     * Function to set data for a cell in the column. You should <b>never</b>\n     * set the data directly to _aData internally in DataTables - always use\n     * this method. It allows mData to function as required. This function\n     * is automatically assigned by the column initialisation method\n     *  @type function\n     *  @param {array|object} oData The data array/object for the array\n     *    (i.e. aoData[]._aData)\n     *  @param {*} sValue Value to set\n     *  @default null\n     */\n    \"fnSetData\": null,\n\n    /**\n     * Property to read the value for the cells in the column from the data\n     * source array / object. If null, then the default content is used, if a\n     * function is given then the return from the function is used.\n     *  @type function|int|string|null\n     *  @default null\n     */\n    \"mData\": null,\n\n    /**\n     * Partner property to mData which is used (only when defined) to get\n     * the data - i.e. it is basically the same as mData, but without the\n     * 'set' option, and also the data fed to it is the result from mData.\n     * This is the rendering method to match the data method of mData.\n     *  @type function|int|string|null\n     *  @default null\n     */\n    \"mRender\": null,\n\n    /**\n     * Unique header TH/TD element for this column - this is what the sorting\n     * listener is attached to (if sorting is enabled.)\n     *  @type node\n     *  @default null\n     */\n    \"nTh\": null,\n\n    /**\n     * Unique footer TH/TD element for this column (if there is one). Not used\n     * in DataTables as such, but can be used for plug-ins to reference the\n     * footer for each column.\n     *  @type node\n     *  @default null\n     */\n    \"nTf\": null,\n\n    /**\n     * The class to apply to all TD elements in the table's TBODY for the column\n     *  @type string\n     *  @default null\n     */\n    \"sClass\": null,\n\n    /**\n     * When DataTables calculates the column widths to assign to each column,\n     * it finds the longest string in each column and then constructs a\n     * temporary table and reads the widths from that. The problem with this\n     * is that \"mmm\" is much wider then \"iiii\", but the latter is a longer\n     * string - thus the calculation can go wrong (doing it properly and putting\n     * it into an DOM object and measuring that is horribly(!) slow). Thus as\n     * a \"work around\" we provide this option. It will append its value to the\n     * text that is found to be the longest string for the column - i.e. padding.\n     *  @type string\n     */\n    \"sContentPadding\": null,\n\n    /**\n     * Allows a default value to be given for a column's data, and will be used\n     * whenever a null data source is encountered (this can be because mData\n     * is set to null, or because the data source itself is null).\n     *  @type string\n     *  @default null\n     */\n    \"sDefaultContent\": null,\n\n    /**\n     * Name for the column, allowing reference to the column by name as well as\n     * by index (needs a lookup to work by name).\n     *  @type string\n     */\n    \"sName\": null,\n\n    /**\n     * Custom sorting data type - defines which of the available plug-ins in\n     * afnSortData the custom sorting will use - if any is defined.\n     *  @type string\n     *  @default std\n     */\n    \"sSortDataType\": 'std',\n\n    /**\n     * Class to be applied to the header element when sorting on this column\n     *  @type string\n     *  @default null\n     */\n    \"sSortingClass\": null,\n\n    /**\n     * Class to be applied to the header element when sorting on this column -\n     * when jQuery UI theming is used.\n     *  @type string\n     *  @default null\n     */\n    \"sSortingClassJUI\": null,\n\n    /**\n     * Title of the column - what is seen in the TH element (nTh).\n     *  @type string\n     */\n    \"sTitle\": null,\n\n    /**\n     * Column sorting and filtering type\n     *  @type string\n     *  @default null\n     */\n    \"sType\": null,\n\n    /**\n     * Width of the column\n     *  @type string\n     *  @default null\n     */\n    \"sWidth\": null,\n\n    /**\n     * Width of the column when it was first \"encountered\"\n     *  @type string\n     *  @default null\n     */\n    \"sWidthOrig\": null\n  };\n  /*\n   * Developer note: The properties of the object below are given in Hungarian\n   * notation, that was used as the interface for DataTables prior to v1.10, however\n   * from v1.10 onwards the primary interface is camel case. In order to avoid\n   * breaking backwards compatibility utterly with this change, the Hungarian\n   * version is still, internally the primary interface, but is is not documented\n   * - hence the @name tags in each doc comment. This allows a Javascript function\n   * to create a map from Hungarian notation to camel case (going the other direction\n   * would require each property to be listed, which would at around 3K to the size\n   * of DataTables, while this method is about a 0.5K hit.\n   *\n   * Ultimately this does pave the way for Hungarian notation to be dropped\n   * completely, but that is a massive amount of work and will break current\n   * installs (therefore is on-hold until v2).\n   */\n\n  /**\n   * Initialisation options that can be given to DataTables at initialisation\n   * time.\n   *  @namespace\n   */\n\n  DataTable.defaults = {\n    /**\n     * An array of data to use for the table, passed in at initialisation which\n     * will be used in preference to any data which is already in the DOM. This is\n     * particularly useful for constructing tables purely in Javascript, for\n     * example with a custom Ajax call.\n     *  @type array\n     *  @default null\n     *\n     *  @dtopt Option\n     *  @name DataTable.defaults.data\n     *\n     *  @example\n     *    // Using a 2D array data source\n     *    $(document).ready( function () {\n     *      $('#example').dataTable( {\n     *        \"data\": [\n     *          ['Trident', 'Internet Explorer 4.0', 'Win 95+', 4, 'X'],\n     *          ['Trident', 'Internet Explorer 5.0', 'Win 95+', 5, 'C'],\n     *        ],\n     *        \"columns\": [\n     *          { \"title\": \"Engine\" },\n     *          { \"title\": \"Browser\" },\n     *          { \"title\": \"Platform\" },\n     *          { \"title\": \"Version\" },\n     *          { \"title\": \"Grade\" }\n     *        ]\n     *      } );\n     *    } );\n     *\n     *  @example\n     *    // Using an array of objects as a data source (`data`)\n     *    $(document).ready( function () {\n     *      $('#example').dataTable( {\n     *        \"data\": [\n     *          {\n     *            \"engine\":   \"Trident\",\n     *            \"browser\":  \"Internet Explorer 4.0\",\n     *            \"platform\": \"Win 95+\",\n     *            \"version\":  4,\n     *            \"grade\":    \"X\"\n     *          },\n     *          {\n     *            \"engine\":   \"Trident\",\n     *            \"browser\":  \"Internet Explorer 5.0\",\n     *            \"platform\": \"Win 95+\",\n     *            \"version\":  5,\n     *            \"grade\":    \"C\"\n     *          }\n     *        ],\n     *        \"columns\": [\n     *          { \"title\": \"Engine\",   \"data\": \"engine\" },\n     *          { \"title\": \"Browser\",  \"data\": \"browser\" },\n     *          { \"title\": \"Platform\", \"data\": \"platform\" },\n     *          { \"title\": \"Version\",  \"data\": \"version\" },\n     *          { \"title\": \"Grade\",    \"data\": \"grade\" }\n     *        ]\n     *      } );\n     *    } );\n     */\n    \"aaData\": null,\n\n    /**\n     * If ordering is enabled, then DataTables will perform a first pass sort on\n     * initialisation. You can define which column(s) the sort is performed\n     * upon, and the sorting direction, with this variable. The `sorting` array\n     * should contain an array for each column to be sorted initially containing\n     * the column's index and a direction string ('asc' or 'desc').\n     *  @type array\n     *  @default [[0,'asc']]\n     *\n     *  @dtopt Option\n     *  @name DataTable.defaults.order\n     *\n     *  @example\n     *    // Sort by 3rd column first, and then 4th column\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"order\": [[2,'asc'], [3,'desc']]\n     *      } );\n     *    } );\n     *\n     *    // No initial sorting\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"order\": []\n     *      } );\n     *    } );\n     */\n    \"aaSorting\": [[0, 'asc']],\n\n    /**\n     * This parameter is basically identical to the `sorting` parameter, but\n     * cannot be overridden by user interaction with the table. What this means\n     * is that you could have a column (visible or hidden) which the sorting\n     * will always be forced on first - any sorting after that (from the user)\n     * will then be performed as required. This can be useful for grouping rows\n     * together.\n     *  @type array\n     *  @default null\n     *\n     *  @dtopt Option\n     *  @name DataTable.defaults.orderFixed\n     *\n     *  @example\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"orderFixed\": [[0,'asc']]\n     *      } );\n     *    } )\n     */\n    \"aaSortingFixed\": [],\n\n    /**\n     * DataTables can be instructed to load data to display in the table from a\n     * Ajax source. This option defines how that Ajax call is made and where to.\n     *\n     * The `ajax` property has three different modes of operation, depending on\n     * how it is defined. These are:\n     *\n     * * `string` - Set the URL from where the data should be loaded from.\n     * * `object` - Define properties for `jQuery.ajax`.\n     * * `function` - Custom data get function\n     *\n     * `string`\n     * --------\n     *\n     * As a string, the `ajax` property simply defines the URL from which\n     * DataTables will load data.\n     *\n     * `object`\n     * --------\n     *\n     * As an object, the parameters in the object are passed to\n     * [jQuery.ajax](http://api.jquery.com/jQuery.ajax/) allowing fine control\n     * of the Ajax request. DataTables has a number of default parameters which\n     * you can override using this option. Please refer to the jQuery\n     * documentation for a full description of the options available, although\n     * the following parameters provide additional options in DataTables or\n     * require special consideration:\n     *\n     * * `data` - As with jQuery, `data` can be provided as an object, but it\n     *   can also be used as a function to manipulate the data DataTables sends\n     *   to the server. The function takes a single parameter, an object of\n     *   parameters with the values that DataTables has readied for sending. An\n     *   object may be returned which will be merged into the DataTables\n     *   defaults, or you can add the items to the object that was passed in and\n     *   not return anything from the function. This supersedes `fnServerParams`\n     *   from DataTables 1.9-.\n     *\n     * * `dataSrc` - By default DataTables will look for the property `data` (or\n     *   `aaData` for compatibility with DataTables 1.9-) when obtaining data\n     *   from an Ajax source or for server-side processing - this parameter\n     *   allows that property to be changed. You can use Javascript dotted\n     *   object notation to get a data source for multiple levels of nesting, or\n     *   it my be used as a function. As a function it takes a single parameter,\n     *   the JSON returned from the server, which can be manipulated as\n     *   required, with the returned value being that used by DataTables as the\n     *   data source for the table. This supersedes `sAjaxDataProp` from\n     *   DataTables 1.9-.\n     *\n     * * `success` - Should not be overridden it is used internally in\n     *   DataTables. To manipulate / transform the data returned by the server\n     *   use `ajax.dataSrc`, or use `ajax` as a function (see below).\n     *\n     * `function`\n     * ----------\n     *\n     * As a function, making the Ajax call is left up to yourself allowing\n     * complete control of the Ajax request. Indeed, if desired, a method other\n     * than Ajax could be used to obtain the required data, such as Web storage\n     * or an AIR database.\n     *\n     * The function is given four parameters and no return is required. The\n     * parameters are:\n     *\n     * 1. _object_ - Data to send to the server\n     * 2. _function_ - Callback function that must be executed when the required\n     *    data has been obtained. That data should be passed into the callback\n     *    as the only parameter\n     * 3. _object_ - DataTables settings object for the table\n     *\n     * Note that this supersedes `fnServerData` from DataTables 1.9-.\n     *\n     *  @type string|object|function\n     *  @default null\n     *\n     *  @dtopt Option\n     *  @name DataTable.defaults.ajax\n     *  @since 1.10.0\n     *\n     * @example\n     *   // Get JSON data from a file via Ajax.\n     *   // Note DataTables expects data in the form `{ data: [ ...data... ] }` by default).\n     *   $('#example').dataTable( {\n     *     \"ajax\": \"data.json\"\n     *   } );\n     *\n     * @example\n     *   // Get JSON data from a file via Ajax, using `dataSrc` to change\n     *   // `data` to `tableData` (i.e. `{ tableData: [ ...data... ] }`)\n     *   $('#example').dataTable( {\n     *     \"ajax\": {\n     *       \"url\": \"data.json\",\n     *       \"dataSrc\": \"tableData\"\n     *     }\n     *   } );\n     *\n     * @example\n     *   // Get JSON data from a file via Ajax, using `dataSrc` to read data\n     *   // from a plain array rather than an array in an object\n     *   $('#example').dataTable( {\n     *     \"ajax\": {\n     *       \"url\": \"data.json\",\n     *       \"dataSrc\": \"\"\n     *     }\n     *   } );\n     *\n     * @example\n     *   // Manipulate the data returned from the server - add a link to data\n     *   // (note this can, should, be done using `render` for the column - this\n     *   // is just a simple example of how the data can be manipulated).\n     *   $('#example').dataTable( {\n     *     \"ajax\": {\n     *       \"url\": \"data.json\",\n     *       \"dataSrc\": function ( json ) {\n     *         for ( var i=0, ien=json.length ; i<ien ; i++ ) {\n     *           json[i][0] = '<a href=\"/message/'+json[i][0]+'>View message</a>';\n     *         }\n     *         return json;\n     *       }\n     *     }\n     *   } );\n     *\n     * @example\n     *   // Add data to the request\n     *   $('#example').dataTable( {\n     *     \"ajax\": {\n     *       \"url\": \"data.json\",\n     *       \"data\": function ( d ) {\n     *         return {\n     *           \"extra_search\": $('#extra').val()\n     *         };\n     *       }\n     *     }\n     *   } );\n     *\n     * @example\n     *   // Send request as POST\n     *   $('#example').dataTable( {\n     *     \"ajax\": {\n     *       \"url\": \"data.json\",\n     *       \"type\": \"POST\"\n     *     }\n     *   } );\n     *\n     * @example\n     *   // Get the data from localStorage (could interface with a form for\n     *   // adding, editing and removing rows).\n     *   $('#example').dataTable( {\n     *     \"ajax\": function (data, callback, settings) {\n     *       callback(\n     *         JSON.parse( localStorage.getItem('dataTablesData') )\n     *       );\n     *     }\n     *   } );\n     */\n    \"ajax\": null,\n\n    /**\n     * This parameter allows you to readily specify the entries in the length drop\n     * down menu that DataTables shows when pagination is enabled. It can be\n     * either a 1D array of options which will be used for both the displayed\n     * option and the value, or a 2D array which will use the array in the first\n     * position as the value, and the array in the second position as the\n     * displayed options (useful for language strings such as 'All').\n     *\n     * Note that the `pageLength` property will be automatically set to the\n     * first value given in this array, unless `pageLength` is also provided.\n     *  @type array\n     *  @default [ 10, 25, 50, 100 ]\n     *\n     *  @dtopt Option\n     *  @name DataTable.defaults.lengthMenu\n     *\n     *  @example\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"lengthMenu\": [[10, 25, 50, -1], [10, 25, 50, \"All\"]]\n     *      } );\n     *    } );\n     */\n    \"aLengthMenu\": [10, 25, 50, 100],\n\n    /**\n     * The `columns` option in the initialisation parameter allows you to define\n     * details about the way individual columns behave. For a full list of\n     * column options that can be set, please see\n     * {@link DataTable.defaults.column}. Note that if you use `columns` to\n     * define your columns, you must have an entry in the array for every single\n     * column that you have in your table (these can be null if you don't which\n     * to specify any options).\n     *  @member\n     *\n     *  @name DataTable.defaults.column\n     */\n    \"aoColumns\": null,\n\n    /**\n     * Very similar to `columns`, `columnDefs` allows you to target a specific\n     * column, multiple columns, or all columns, using the `targets` property of\n     * each object in the array. This allows great flexibility when creating\n     * tables, as the `columnDefs` arrays can be of any length, targeting the\n     * columns you specifically want. `columnDefs` may use any of the column\n     * options available: {@link DataTable.defaults.column}, but it _must_\n     * have `targets` defined in each object in the array. Values in the `targets`\n     * array may be:\n     *   <ul>\n     *     <li>a string - class name will be matched on the TH for the column</li>\n     *     <li>0 or a positive integer - column index counting from the left</li>\n     *     <li>a negative integer - column index counting from the right</li>\n     *     <li>the string \"_all\" - all columns (i.e. assign a default)</li>\n     *   </ul>\n     *  @member\n     *\n     *  @name DataTable.defaults.columnDefs\n     */\n    \"aoColumnDefs\": null,\n\n    /**\n     * Basically the same as `search`, this parameter defines the individual column\n     * filtering state at initialisation time. The array must be of the same size\n     * as the number of columns, and each element be an object with the parameters\n     * `search` and `escapeRegex` (the latter is optional). 'null' is also\n     * accepted and the default will be used.\n     *  @type array\n     *  @default []\n     *\n     *  @dtopt Option\n     *  @name DataTable.defaults.searchCols\n     *\n     *  @example\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"searchCols\": [\n     *          null,\n     *          { \"search\": \"My filter\" },\n     *          null,\n     *          { \"search\": \"^[0-9]\", \"escapeRegex\": false }\n     *        ]\n     *      } );\n     *    } )\n     */\n    \"aoSearchCols\": [],\n\n    /**\n     * An array of CSS classes that should be applied to displayed rows. This\n     * array may be of any length, and DataTables will apply each class\n     * sequentially, looping when required.\n     *  @type array\n     *  @default null <i>Will take the values determined by the `oClasses.stripe*`\n     *    options</i>\n     *\n     *  @dtopt Option\n     *  @name DataTable.defaults.stripeClasses\n     *\n     *  @example\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"stripeClasses\": [ 'strip1', 'strip2', 'strip3' ]\n     *      } );\n     *    } )\n     */\n    \"asStripeClasses\": null,\n\n    /**\n     * Enable or disable automatic column width calculation. This can be disabled\n     * as an optimisation (it takes some time to calculate the widths) if the\n     * tables widths are passed in using `columns`.\n     *  @type boolean\n     *  @default true\n     *\n     *  @dtopt Features\n     *  @name DataTable.defaults.autoWidth\n     *\n     *  @example\n     *    $(document).ready( function () {\n     *      $('#example').dataTable( {\n     *        \"autoWidth\": false\n     *      } );\n     *    } );\n     */\n    \"bAutoWidth\": true,\n\n    /**\n     * Deferred rendering can provide DataTables with a huge speed boost when you\n     * are using an Ajax or JS data source for the table. This option, when set to\n     * true, will cause DataTables to defer the creation of the table elements for\n     * each row until they are needed for a draw - saving a significant amount of\n     * time.\n     *  @type boolean\n     *  @default false\n     *\n     *  @dtopt Features\n     *  @name DataTable.defaults.deferRender\n     *\n     *  @example\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"ajax\": \"sources/arrays.txt\",\n     *        \"deferRender\": true\n     *      } );\n     *    } );\n     */\n    \"bDeferRender\": false,\n\n    /**\n     * Replace a DataTable which matches the given selector and replace it with\n     * one which has the properties of the new initialisation object passed. If no\n     * table matches the selector, then the new DataTable will be constructed as\n     * per normal.\n     *  @type boolean\n     *  @default false\n     *\n     *  @dtopt Options\n     *  @name DataTable.defaults.destroy\n     *\n     *  @example\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"srollY\": \"200px\",\n     *        \"paginate\": false\n     *      } );\n     *\n     *      // Some time later....\n     *      $('#example').dataTable( {\n     *        \"filter\": false,\n     *        \"destroy\": true\n     *      } );\n     *    } );\n     */\n    \"bDestroy\": false,\n\n    /**\n     * Enable or disable filtering of data. Filtering in DataTables is \"smart\" in\n     * that it allows the end user to input multiple words (space separated) and\n     * will match a row containing those words, even if not in the order that was\n     * specified (this allow matching across multiple columns). Note that if you\n     * wish to use filtering in DataTables this must remain 'true' - to remove the\n     * default filtering input box and retain filtering abilities, please use\n     * {@link DataTable.defaults.dom}.\n     *  @type boolean\n     *  @default true\n     *\n     *  @dtopt Features\n     *  @name DataTable.defaults.searching\n     *\n     *  @example\n     *    $(document).ready( function () {\n     *      $('#example').dataTable( {\n     *        \"searching\": false\n     *      } );\n     *    } );\n     */\n    \"bFilter\": true,\n\n    /**\n     * Enable or disable the table information display. This shows information\n     * about the data that is currently visible on the page, including information\n     * about filtered data if that action is being performed.\n     *  @type boolean\n     *  @default true\n     *\n     *  @dtopt Features\n     *  @name DataTable.defaults.info\n     *\n     *  @example\n     *    $(document).ready( function () {\n     *      $('#example').dataTable( {\n     *        \"info\": false\n     *      } );\n     *    } );\n     */\n    \"bInfo\": true,\n\n    /**\n     * Allows the end user to select the size of a formatted page from a select\n     * menu (sizes are 10, 25, 50 and 100). Requires pagination (`paginate`).\n     *  @type boolean\n     *  @default true\n     *\n     *  @dtopt Features\n     *  @name DataTable.defaults.lengthChange\n     *\n     *  @example\n     *    $(document).ready( function () {\n     *      $('#example').dataTable( {\n     *        \"lengthChange\": false\n     *      } );\n     *    } );\n     */\n    \"bLengthChange\": true,\n\n    /**\n     * Enable or disable pagination.\n     *  @type boolean\n     *  @default true\n     *\n     *  @dtopt Features\n     *  @name DataTable.defaults.paging\n     *\n     *  @example\n     *    $(document).ready( function () {\n     *      $('#example').dataTable( {\n     *        \"paging\": false\n     *      } );\n     *    } );\n     */\n    \"bPaginate\": true,\n\n    /**\n     * Enable or disable the display of a 'processing' indicator when the table is\n     * being processed (e.g. a sort). This is particularly useful for tables with\n     * large amounts of data where it can take a noticeable amount of time to sort\n     * the entries.\n     *  @type boolean\n     *  @default false\n     *\n     *  @dtopt Features\n     *  @name DataTable.defaults.processing\n     *\n     *  @example\n     *    $(document).ready( function () {\n     *      $('#example').dataTable( {\n     *        \"processing\": true\n     *      } );\n     *    } );\n     */\n    \"bProcessing\": false,\n\n    /**\n     * Retrieve the DataTables object for the given selector. Note that if the\n     * table has already been initialised, this parameter will cause DataTables\n     * to simply return the object that has already been set up - it will not take\n     * account of any changes you might have made to the initialisation object\n     * passed to DataTables (setting this parameter to true is an acknowledgement\n     * that you understand this). `destroy` can be used to reinitialise a table if\n     * you need.\n     *  @type boolean\n     *  @default false\n     *\n     *  @dtopt Options\n     *  @name DataTable.defaults.retrieve\n     *\n     *  @example\n     *    $(document).ready( function() {\n     *      initTable();\n     *      tableActions();\n     *    } );\n     *\n     *    function initTable ()\n     *    {\n     *      return $('#example').dataTable( {\n     *        \"scrollY\": \"200px\",\n     *        \"paginate\": false,\n     *        \"retrieve\": true\n     *      } );\n     *    }\n     *\n     *    function tableActions ()\n     *    {\n     *      var table = initTable();\n     *      // perform API operations with oTable\n     *    }\n     */\n    \"bRetrieve\": false,\n\n    /**\n     * When vertical (y) scrolling is enabled, DataTables will force the height of\n     * the table's viewport to the given height at all times (useful for layout).\n     * However, this can look odd when filtering data down to a small data set,\n     * and the footer is left \"floating\" further down. This parameter (when\n     * enabled) will cause DataTables to collapse the table's viewport down when\n     * the result set will fit within the given Y height.\n     *  @type boolean\n     *  @default false\n     *\n     *  @dtopt Options\n     *  @name DataTable.defaults.scrollCollapse\n     *\n     *  @example\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"scrollY\": \"200\",\n     *        \"scrollCollapse\": true\n     *      } );\n     *    } );\n     */\n    \"bScrollCollapse\": false,\n\n    /**\n     * Configure DataTables to use server-side processing. Note that the\n     * `ajax` parameter must also be given in order to give DataTables a\n     * source to obtain the required data for each draw.\n     *  @type boolean\n     *  @default false\n     *\n     *  @dtopt Features\n     *  @dtopt Server-side\n     *  @name DataTable.defaults.serverSide\n     *\n     *  @example\n     *    $(document).ready( function () {\n     *      $('#example').dataTable( {\n     *        \"serverSide\": true,\n     *        \"ajax\": \"xhr.php\"\n     *      } );\n     *    } );\n     */\n    \"bServerSide\": false,\n\n    /**\n     * Enable or disable sorting of columns. Sorting of individual columns can be\n     * disabled by the `sortable` option for each column.\n     *  @type boolean\n     *  @default true\n     *\n     *  @dtopt Features\n     *  @name DataTable.defaults.ordering\n     *\n     *  @example\n     *    $(document).ready( function () {\n     *      $('#example').dataTable( {\n     *        \"ordering\": false\n     *      } );\n     *    } );\n     */\n    \"bSort\": true,\n\n    /**\n     * Enable or display DataTables' ability to sort multiple columns at the\n     * same time (activated by shift-click by the user).\n     *  @type boolean\n     *  @default true\n     *\n     *  @dtopt Options\n     *  @name DataTable.defaults.orderMulti\n     *\n     *  @example\n     *    // Disable multiple column sorting ability\n     *    $(document).ready( function () {\n     *      $('#example').dataTable( {\n     *        \"orderMulti\": false\n     *      } );\n     *    } );\n     */\n    \"bSortMulti\": true,\n\n    /**\n     * Allows control over whether DataTables should use the top (true) unique\n     * cell that is found for a single column, or the bottom (false - default).\n     * This is useful when using complex headers.\n     *  @type boolean\n     *  @default false\n     *\n     *  @dtopt Options\n     *  @name DataTable.defaults.orderCellsTop\n     *\n     *  @example\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"orderCellsTop\": true\n     *      } );\n     *    } );\n     */\n    \"bSortCellsTop\": false,\n\n    /**\n     * Enable or disable the addition of the classes `sorting\\_1`, `sorting\\_2` and\n     * `sorting\\_3` to the columns which are currently being sorted on. This is\n     * presented as a feature switch as it can increase processing time (while\n     * classes are removed and added) so for large data sets you might want to\n     * turn this off.\n     *  @type boolean\n     *  @default true\n     *\n     *  @dtopt Features\n     *  @name DataTable.defaults.orderClasses\n     *\n     *  @example\n     *    $(document).ready( function () {\n     *      $('#example').dataTable( {\n     *        \"orderClasses\": false\n     *      } );\n     *    } );\n     */\n    \"bSortClasses\": true,\n\n    /**\n     * Enable or disable state saving. When enabled HTML5 `localStorage` will be\n     * used to save table display information such as pagination information,\n     * display length, filtering and sorting. As such when the end user reloads\n     * the page the display display will match what thy had previously set up.\n     *\n     * Due to the use of `localStorage` the default state saving is not supported\n     * in IE6 or 7. If state saving is required in those browsers, use\n     * `stateSaveCallback` to provide a storage solution such as cookies.\n     *  @type boolean\n     *  @default false\n     *\n     *  @dtopt Features\n     *  @name DataTable.defaults.stateSave\n     *\n     *  @example\n     *    $(document).ready( function () {\n     *      $('#example').dataTable( {\n     *        \"stateSave\": true\n     *      } );\n     *    } );\n     */\n    \"bStateSave\": false,\n\n    /**\n     * This function is called when a TR element is created (and all TD child\n     * elements have been inserted), or registered if using a DOM source, allowing\n     * manipulation of the TR element (adding classes etc).\n     *  @type function\n     *  @param {node} row \"TR\" element for the current row\n     *  @param {array} data Raw data array for this row\n     *  @param {int} dataIndex The index of this row in the internal aoData array\n     *\n     *  @dtopt Callbacks\n     *  @name DataTable.defaults.createdRow\n     *\n     *  @example\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"createdRow\": function( row, data, dataIndex ) {\n     *          // Bold the grade for all 'A' grade browsers\n     *          if ( data[4] == \"A\" )\n     *          {\n     *            $('td:eq(4)', row).html( '<b>A</b>' );\n     *          }\n     *        }\n     *      } );\n     *    } );\n     */\n    \"fnCreatedRow\": null,\n\n    /**\n     * This function is called on every 'draw' event, and allows you to\n     * dynamically modify any aspect you want about the created DOM.\n     *  @type function\n     *  @param {object} settings DataTables settings object\n     *\n     *  @dtopt Callbacks\n     *  @name DataTable.defaults.drawCallback\n     *\n     *  @example\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"drawCallback\": function( settings ) {\n     *          alert( 'DataTables has redrawn the table' );\n     *        }\n     *      } );\n     *    } );\n     */\n    \"fnDrawCallback\": null,\n\n    /**\n     * Identical to fnHeaderCallback() but for the table footer this function\n     * allows you to modify the table footer on every 'draw' event.\n     *  @type function\n     *  @param {node} foot \"TR\" element for the footer\n     *  @param {array} data Full table data (as derived from the original HTML)\n     *  @param {int} start Index for the current display starting point in the\n     *    display array\n     *  @param {int} end Index for the current display ending point in the\n     *    display array\n     *  @param {array int} display Index array to translate the visual position\n     *    to the full data array\n     *\n     *  @dtopt Callbacks\n     *  @name DataTable.defaults.footerCallback\n     *\n     *  @example\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"footerCallback\": function( tfoot, data, start, end, display ) {\n     *          tfoot.getElementsByTagName('th')[0].innerHTML = \"Starting index is \"+start;\n     *        }\n     *      } );\n     *    } )\n     */\n    \"fnFooterCallback\": null,\n\n    /**\n     * When rendering large numbers in the information element for the table\n     * (i.e. \"Showing 1 to 10 of 57 entries\") DataTables will render large numbers\n     * to have a comma separator for the 'thousands' units (e.g. 1 million is\n     * rendered as \"1,000,000\") to help readability for the end user. This\n     * function will override the default method DataTables uses.\n     *  @type function\n     *  @member\n     *  @param {int} toFormat number to be formatted\n     *  @returns {string} formatted string for DataTables to show the number\n     *\n     *  @dtopt Callbacks\n     *  @name DataTable.defaults.formatNumber\n     *\n     *  @example\n     *    // Format a number using a single quote for the separator (note that\n     *    // this can also be done with the language.thousands option)\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"formatNumber\": function ( toFormat ) {\n     *          return toFormat.toString().replace(\n     *            /\\B(?=(\\d{3})+(?!\\d))/g, \"'\"\n     *          );\n     *        };\n     *      } );\n     *    } );\n     */\n    \"fnFormatNumber\": function fnFormatNumber(toFormat) {\n      return toFormat.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, this.oLanguage.sThousands);\n    },\n\n    /**\n     * This function is called on every 'draw' event, and allows you to\n     * dynamically modify the header row. This can be used to calculate and\n     * display useful information about the table.\n     *  @type function\n     *  @param {node} head \"TR\" element for the header\n     *  @param {array} data Full table data (as derived from the original HTML)\n     *  @param {int} start Index for the current display starting point in the\n     *    display array\n     *  @param {int} end Index for the current display ending point in the\n     *    display array\n     *  @param {array int} display Index array to translate the visual position\n     *    to the full data array\n     *\n     *  @dtopt Callbacks\n     *  @name DataTable.defaults.headerCallback\n     *\n     *  @example\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"fheaderCallback\": function( head, data, start, end, display ) {\n     *          head.getElementsByTagName('th')[0].innerHTML = \"Displaying \"+(end-start)+\" records\";\n     *        }\n     *      } );\n     *    } )\n     */\n    \"fnHeaderCallback\": null,\n\n    /**\n     * The information element can be used to convey information about the current\n     * state of the table. Although the internationalisation options presented by\n     * DataTables are quite capable of dealing with most customisations, there may\n     * be times where you wish to customise the string further. This callback\n     * allows you to do exactly that.\n     *  @type function\n     *  @param {object} oSettings DataTables settings object\n     *  @param {int} start Starting position in data for the draw\n     *  @param {int} end End position in data for the draw\n     *  @param {int} max Total number of rows in the table (regardless of\n     *    filtering)\n     *  @param {int} total Total number of rows in the data set, after filtering\n     *  @param {string} pre The string that DataTables has formatted using it's\n     *    own rules\n     *  @returns {string} The string to be displayed in the information element.\n     *\n     *  @dtopt Callbacks\n     *  @name DataTable.defaults.infoCallback\n     *\n     *  @example\n     *    $('#example').dataTable( {\n     *      \"infoCallback\": function( settings, start, end, max, total, pre ) {\n     *        return start +\" to \"+ end;\n     *      }\n     *    } );\n     */\n    \"fnInfoCallback\": null,\n\n    /**\n     * Called when the table has been initialised. Normally DataTables will\n     * initialise sequentially and there will be no need for this function,\n     * however, this does not hold true when using external language information\n     * since that is obtained using an async XHR call.\n     *  @type function\n     *  @param {object} settings DataTables settings object\n     *  @param {object} json The JSON object request from the server - only\n     *    present if client-side Ajax sourced data is used\n     *\n     *  @dtopt Callbacks\n     *  @name DataTable.defaults.initComplete\n     *\n     *  @example\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"initComplete\": function(settings, json) {\n     *          alert( 'DataTables has finished its initialisation.' );\n     *        }\n     *      } );\n     *    } )\n     */\n    \"fnInitComplete\": null,\n\n    /**\n     * Called at the very start of each table draw and can be used to cancel the\n     * draw by returning false, any other return (including undefined) results in\n     * the full draw occurring).\n     *  @type function\n     *  @param {object} settings DataTables settings object\n     *  @returns {boolean} False will cancel the draw, anything else (including no\n     *    return) will allow it to complete.\n     *\n     *  @dtopt Callbacks\n     *  @name DataTable.defaults.preDrawCallback\n     *\n     *  @example\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"preDrawCallback\": function( settings ) {\n     *          if ( $('#test').val() == 1 ) {\n     *            return false;\n     *          }\n     *        }\n     *      } );\n     *    } );\n     */\n    \"fnPreDrawCallback\": null,\n\n    /**\n     * This function allows you to 'post process' each row after it have been\n     * generated for each table draw, but before it is rendered on screen. This\n     * function might be used for setting the row class name etc.\n     *  @type function\n     *  @param {node} row \"TR\" element for the current row\n     *  @param {array} data Raw data array for this row\n     *  @param {int} displayIndex The display index for the current table draw\n     *  @param {int} displayIndexFull The index of the data in the full list of\n     *    rows (after filtering)\n     *\n     *  @dtopt Callbacks\n     *  @name DataTable.defaults.rowCallback\n     *\n     *  @example\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"rowCallback\": function( row, data, displayIndex, displayIndexFull ) {\n     *          // Bold the grade for all 'A' grade browsers\n     *          if ( data[4] == \"A\" ) {\n     *            $('td:eq(4)', row).html( '<b>A</b>' );\n     *          }\n     *        }\n     *      } );\n     *    } );\n     */\n    \"fnRowCallback\": null,\n\n    /**\n     * __Deprecated__ The functionality provided by this parameter has now been\n     * superseded by that provided through `ajax`, which should be used instead.\n     *\n     * This parameter allows you to override the default function which obtains\n     * the data from the server so something more suitable for your application.\n     * For example you could use POST data, or pull information from a Gears or\n     * AIR database.\n     *  @type function\n     *  @member\n     *  @param {string} source HTTP source to obtain the data from (`ajax`)\n     *  @param {array} data A key/value pair object containing the data to send\n     *    to the server\n     *  @param {function} callback to be called on completion of the data get\n     *    process that will draw the data on the page.\n     *  @param {object} settings DataTables settings object\n     *\n     *  @dtopt Callbacks\n     *  @dtopt Server-side\n     *  @name DataTable.defaults.serverData\n     *\n     *  @deprecated 1.10. Please use `ajax` for this functionality now.\n     */\n    \"fnServerData\": null,\n\n    /**\n     * __Deprecated__ The functionality provided by this parameter has now been\n     * superseded by that provided through `ajax`, which should be used instead.\n     *\n     *  It is often useful to send extra data to the server when making an Ajax\n     * request - for example custom filtering information, and this callback\n     * function makes it trivial to send extra information to the server. The\n     * passed in parameter is the data set that has been constructed by\n     * DataTables, and you can add to this or modify it as you require.\n     *  @type function\n     *  @param {array} data Data array (array of objects which are name/value\n     *    pairs) that has been constructed by DataTables and will be sent to the\n     *    server. In the case of Ajax sourced data with server-side processing\n     *    this will be an empty array, for server-side processing there will be a\n     *    significant number of parameters!\n     *  @returns {undefined} Ensure that you modify the data array passed in,\n     *    as this is passed by reference.\n     *\n     *  @dtopt Callbacks\n     *  @dtopt Server-side\n     *  @name DataTable.defaults.serverParams\n     *\n     *  @deprecated 1.10. Please use `ajax` for this functionality now.\n     */\n    \"fnServerParams\": null,\n\n    /**\n     * Load the table state. With this function you can define from where, and how, the\n     * state of a table is loaded. By default DataTables will load from `localStorage`\n     * but you might wish to use a server-side database or cookies.\n     *  @type function\n     *  @member\n     *  @param {object} settings DataTables settings object\n     *  @param {object} callback Callback that can be executed when done. It\n     *    should be passed the loaded state object.\n     *  @return {object} The DataTables state object to be loaded\n     *\n     *  @dtopt Callbacks\n     *  @name DataTable.defaults.stateLoadCallback\n     *\n     *  @example\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"stateSave\": true,\n     *        \"stateLoadCallback\": function (settings, callback) {\n     *          $.ajax( {\n     *            \"url\": \"/state_load\",\n     *            \"dataType\": \"json\",\n     *            \"success\": function (json) {\n     *              callback( json );\n     *            }\n     *          } );\n     *        }\n     *      } );\n     *    } );\n     */\n    \"fnStateLoadCallback\": function fnStateLoadCallback(settings) {\n      try {\n        return JSON.parse((settings.iStateDuration === -1 ? sessionStorage : localStorage).getItem('DataTables_' + settings.sInstance + '_' + location.pathname));\n      } catch (e) {}\n    },\n\n    /**\n     * Callback which allows modification of the saved state prior to loading that state.\n     * This callback is called when the table is loading state from the stored data, but\n     * prior to the settings object being modified by the saved state. Note that for\n     * plug-in authors, you should use the `stateLoadParams` event to load parameters for\n     * a plug-in.\n     *  @type function\n     *  @param {object} settings DataTables settings object\n     *  @param {object} data The state object that is to be loaded\n     *\n     *  @dtopt Callbacks\n     *  @name DataTable.defaults.stateLoadParams\n     *\n     *  @example\n     *    // Remove a saved filter, so filtering is never loaded\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"stateSave\": true,\n     *        \"stateLoadParams\": function (settings, data) {\n     *          data.oSearch.sSearch = \"\";\n     *        }\n     *      } );\n     *    } );\n     *\n     *  @example\n     *    // Disallow state loading by returning false\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"stateSave\": true,\n     *        \"stateLoadParams\": function (settings, data) {\n     *          return false;\n     *        }\n     *      } );\n     *    } );\n     */\n    \"fnStateLoadParams\": null,\n\n    /**\n     * Callback that is called when the state has been loaded from the state saving method\n     * and the DataTables settings object has been modified as a result of the loaded state.\n     *  @type function\n     *  @param {object} settings DataTables settings object\n     *  @param {object} data The state object that was loaded\n     *\n     *  @dtopt Callbacks\n     *  @name DataTable.defaults.stateLoaded\n     *\n     *  @example\n     *    // Show an alert with the filtering value that was saved\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"stateSave\": true,\n     *        \"stateLoaded\": function (settings, data) {\n     *          alert( 'Saved filter was: '+data.oSearch.sSearch );\n     *        }\n     *      } );\n     *    } );\n     */\n    \"fnStateLoaded\": null,\n\n    /**\n     * Save the table state. This function allows you to define where and how the state\n     * information for the table is stored By default DataTables will use `localStorage`\n     * but you might wish to use a server-side database or cookies.\n     *  @type function\n     *  @member\n     *  @param {object} settings DataTables settings object\n     *  @param {object} data The state object to be saved\n     *\n     *  @dtopt Callbacks\n     *  @name DataTable.defaults.stateSaveCallback\n     *\n     *  @example\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"stateSave\": true,\n     *        \"stateSaveCallback\": function (settings, data) {\n     *          // Send an Ajax request to the server with the state object\n     *          $.ajax( {\n     *            \"url\": \"/state_save\",\n     *            \"data\": data,\n     *            \"dataType\": \"json\",\n     *            \"method\": \"POST\"\n     *            \"success\": function () {}\n     *          } );\n     *        }\n     *      } );\n     *    } );\n     */\n    \"fnStateSaveCallback\": function fnStateSaveCallback(settings, data) {\n      try {\n        (settings.iStateDuration === -1 ? sessionStorage : localStorage).setItem('DataTables_' + settings.sInstance + '_' + location.pathname, JSON.stringify(data));\n      } catch (e) {}\n    },\n\n    /**\n     * Callback which allows modification of the state to be saved. Called when the table\n     * has changed state a new state save is required. This method allows modification of\n     * the state saving object prior to actually doing the save, including addition or\n     * other state properties or modification. Note that for plug-in authors, you should\n     * use the `stateSaveParams` event to save parameters for a plug-in.\n     *  @type function\n     *  @param {object} settings DataTables settings object\n     *  @param {object} data The state object to be saved\n     *\n     *  @dtopt Callbacks\n     *  @name DataTable.defaults.stateSaveParams\n     *\n     *  @example\n     *    // Remove a saved filter, so filtering is never saved\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"stateSave\": true,\n     *        \"stateSaveParams\": function (settings, data) {\n     *          data.oSearch.sSearch = \"\";\n     *        }\n     *      } );\n     *    } );\n     */\n    \"fnStateSaveParams\": null,\n\n    /**\n     * Duration for which the saved state information is considered valid. After this period\n     * has elapsed the state will be returned to the default.\n     * Value is given in seconds.\n     *  @type int\n     *  @default 7200 <i>(2 hours)</i>\n     *\n     *  @dtopt Options\n     *  @name DataTable.defaults.stateDuration\n     *\n     *  @example\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"stateDuration\": 60*60*24; // 1 day\n     *      } );\n     *    } )\n     */\n    \"iStateDuration\": 7200,\n\n    /**\n     * When enabled DataTables will not make a request to the server for the first\n     * page draw - rather it will use the data already on the page (no sorting etc\n     * will be applied to it), thus saving on an XHR at load time. `deferLoading`\n     * is used to indicate that deferred loading is required, but it is also used\n     * to tell DataTables how many records there are in the full table (allowing\n     * the information element and pagination to be displayed correctly). In the case\n     * where a filtering is applied to the table on initial load, this can be\n     * indicated by giving the parameter as an array, where the first element is\n     * the number of records available after filtering and the second element is the\n     * number of records without filtering (allowing the table information element\n     * to be shown correctly).\n     *  @type int | array\n     *  @default null\n     *\n     *  @dtopt Options\n     *  @name DataTable.defaults.deferLoading\n     *\n     *  @example\n     *    // 57 records available in the table, no filtering applied\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"serverSide\": true,\n     *        \"ajax\": \"scripts/server_processing.php\",\n     *        \"deferLoading\": 57\n     *      } );\n     *    } );\n     *\n     *  @example\n     *    // 57 records after filtering, 100 without filtering (an initial filter applied)\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"serverSide\": true,\n     *        \"ajax\": \"scripts/server_processing.php\",\n     *        \"deferLoading\": [ 57, 100 ],\n     *        \"search\": {\n     *          \"search\": \"my_filter\"\n     *        }\n     *      } );\n     *    } );\n     */\n    \"iDeferLoading\": null,\n\n    /**\n     * Number of rows to display on a single page when using pagination. If\n     * feature enabled (`lengthChange`) then the end user will be able to override\n     * this to a custom setting using a pop-up menu.\n     *  @type int\n     *  @default 10\n     *\n     *  @dtopt Options\n     *  @name DataTable.defaults.pageLength\n     *\n     *  @example\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"pageLength\": 50\n     *      } );\n     *    } )\n     */\n    \"iDisplayLength\": 10,\n\n    /**\n     * Define the starting point for data display when using DataTables with\n     * pagination. Note that this parameter is the number of records, rather than\n     * the page number, so if you have 10 records per page and want to start on\n     * the third page, it should be \"20\".\n     *  @type int\n     *  @default 0\n     *\n     *  @dtopt Options\n     *  @name DataTable.defaults.displayStart\n     *\n     *  @example\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"displayStart\": 20\n     *      } );\n     *    } )\n     */\n    \"iDisplayStart\": 0,\n\n    /**\n     * By default DataTables allows keyboard navigation of the table (sorting, paging,\n     * and filtering) by adding a `tabindex` attribute to the required elements. This\n     * allows you to tab through the controls and press the enter key to activate them.\n     * The tabindex is default 0, meaning that the tab follows the flow of the document.\n     * You can overrule this using this parameter if you wish. Use a value of -1 to\n     * disable built-in keyboard navigation.\n     *  @type int\n     *  @default 0\n     *\n     *  @dtopt Options\n     *  @name DataTable.defaults.tabIndex\n     *\n     *  @example\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"tabIndex\": 1\n     *      } );\n     *    } );\n     */\n    \"iTabIndex\": 0,\n\n    /**\n     * Classes that DataTables assigns to the various components and features\n     * that it adds to the HTML table. This allows classes to be configured\n     * during initialisation in addition to through the static\n     * {@link DataTable.ext.oStdClasses} object).\n     *  @namespace\n     *  @name DataTable.defaults.classes\n     */\n    \"oClasses\": {},\n\n    /**\n     * All strings that DataTables uses in the user interface that it creates\n     * are defined in this object, allowing you to modified them individually or\n     * completely replace them all as required.\n     *  @namespace\n     *  @name DataTable.defaults.language\n     */\n    \"oLanguage\": {\n      /**\n       * Strings that are used for WAI-ARIA labels and controls only (these are not\n       * actually visible on the page, but will be read by screenreaders, and thus\n       * must be internationalised as well).\n       *  @namespace\n       *  @name DataTable.defaults.language.aria\n       */\n      \"oAria\": {\n        /**\n         * ARIA label that is added to the table headers when the column may be\n         * sorted ascending by activing the column (click or return when focused).\n         * Note that the column header is prefixed to this string.\n         *  @type string\n         *  @default : activate to sort column ascending\n         *\n         *  @dtopt Language\n         *  @name DataTable.defaults.language.aria.sortAscending\n         *\n         *  @example\n         *    $(document).ready( function() {\n         *      $('#example').dataTable( {\n         *        \"language\": {\n         *          \"aria\": {\n         *            \"sortAscending\": \" - click/return to sort ascending\"\n         *          }\n         *        }\n         *      } );\n         *    } );\n         */\n        \"sSortAscending\": \": activate to sort column ascending\",\n\n        /**\n         * ARIA label that is added to the table headers when the column may be\n         * sorted descending by activing the column (click or return when focused).\n         * Note that the column header is prefixed to this string.\n         *  @type string\n         *  @default : activate to sort column ascending\n         *\n         *  @dtopt Language\n         *  @name DataTable.defaults.language.aria.sortDescending\n         *\n         *  @example\n         *    $(document).ready( function() {\n         *      $('#example').dataTable( {\n         *        \"language\": {\n         *          \"aria\": {\n         *            \"sortDescending\": \" - click/return to sort descending\"\n         *          }\n         *        }\n         *      } );\n         *    } );\n         */\n        \"sSortDescending\": \": activate to sort column descending\"\n      },\n\n      /**\n       * Pagination string used by DataTables for the built-in pagination\n       * control types.\n       *  @namespace\n       *  @name DataTable.defaults.language.paginate\n       */\n      \"oPaginate\": {\n        /**\n         * Text to use when using the 'full_numbers' type of pagination for the\n         * button to take the user to the first page.\n         *  @type string\n         *  @default First\n         *\n         *  @dtopt Language\n         *  @name DataTable.defaults.language.paginate.first\n         *\n         *  @example\n         *    $(document).ready( function() {\n         *      $('#example').dataTable( {\n         *        \"language\": {\n         *          \"paginate\": {\n         *            \"first\": \"First page\"\n         *          }\n         *        }\n         *      } );\n         *    } );\n         */\n        \"sFirst\": \"First\",\n\n        /**\n         * Text to use when using the 'full_numbers' type of pagination for the\n         * button to take the user to the last page.\n         *  @type string\n         *  @default Last\n         *\n         *  @dtopt Language\n         *  @name DataTable.defaults.language.paginate.last\n         *\n         *  @example\n         *    $(document).ready( function() {\n         *      $('#example').dataTable( {\n         *        \"language\": {\n         *          \"paginate\": {\n         *            \"last\": \"Last page\"\n         *          }\n         *        }\n         *      } );\n         *    } );\n         */\n        \"sLast\": \"Last\",\n\n        /**\n         * Text to use for the 'next' pagination button (to take the user to the\n         * next page).\n         *  @type string\n         *  @default Next\n         *\n         *  @dtopt Language\n         *  @name DataTable.defaults.language.paginate.next\n         *\n         *  @example\n         *    $(document).ready( function() {\n         *      $('#example').dataTable( {\n         *        \"language\": {\n         *          \"paginate\": {\n         *            \"next\": \"Next page\"\n         *          }\n         *        }\n         *      } );\n         *    } );\n         */\n        \"sNext\": \"Next\",\n\n        /**\n         * Text to use for the 'previous' pagination button (to take the user to\n         * the previous page).\n         *  @type string\n         *  @default Previous\n         *\n         *  @dtopt Language\n         *  @name DataTable.defaults.language.paginate.previous\n         *\n         *  @example\n         *    $(document).ready( function() {\n         *      $('#example').dataTable( {\n         *        \"language\": {\n         *          \"paginate\": {\n         *            \"previous\": \"Previous page\"\n         *          }\n         *        }\n         *      } );\n         *    } );\n         */\n        \"sPrevious\": \"Previous\"\n      },\n\n      /**\n       * This string is shown in preference to `zeroRecords` when the table is\n       * empty of data (regardless of filtering). Note that this is an optional\n       * parameter - if it is not given, the value of `zeroRecords` will be used\n       * instead (either the default or given value).\n       *  @type string\n       *  @default No data available in table\n       *\n       *  @dtopt Language\n       *  @name DataTable.defaults.language.emptyTable\n       *\n       *  @example\n       *    $(document).ready( function() {\n       *      $('#example').dataTable( {\n       *        \"language\": {\n       *          \"emptyTable\": \"No data available in table\"\n       *        }\n       *      } );\n       *    } );\n       */\n      \"sEmptyTable\": \"No data available in table\",\n\n      /**\n       * This string gives information to the end user about the information\n       * that is current on display on the page. The following tokens can be\n       * used in the string and will be dynamically replaced as the table\n       * display updates. This tokens can be placed anywhere in the string, or\n       * removed as needed by the language requires:\n       *\n       * * `\\_START\\_` - Display index of the first record on the current page\n       * * `\\_END\\_` - Display index of the last record on the current page\n       * * `\\_TOTAL\\_` - Number of records in the table after filtering\n       * * `\\_MAX\\_` - Number of records in the table without filtering\n       * * `\\_PAGE\\_` - Current page number\n       * * `\\_PAGES\\_` - Total number of pages of data in the table\n       *\n       *  @type string\n       *  @default Showing _START_ to _END_ of _TOTAL_ entries\n       *\n       *  @dtopt Language\n       *  @name DataTable.defaults.language.info\n       *\n       *  @example\n       *    $(document).ready( function() {\n       *      $('#example').dataTable( {\n       *        \"language\": {\n       *          \"info\": \"Showing page _PAGE_ of _PAGES_\"\n       *        }\n       *      } );\n       *    } );\n       */\n      \"sInfo\": \"Showing _START_ to _END_ of _TOTAL_ entries\",\n\n      /**\n       * Display information string for when the table is empty. Typically the\n       * format of this string should match `info`.\n       *  @type string\n       *  @default Showing 0 to 0 of 0 entries\n       *\n       *  @dtopt Language\n       *  @name DataTable.defaults.language.infoEmpty\n       *\n       *  @example\n       *    $(document).ready( function() {\n       *      $('#example').dataTable( {\n       *        \"language\": {\n       *          \"infoEmpty\": \"No entries to show\"\n       *        }\n       *      } );\n       *    } );\n       */\n      \"sInfoEmpty\": \"Showing 0 to 0 of 0 entries\",\n\n      /**\n       * When a user filters the information in a table, this string is appended\n       * to the information (`info`) to give an idea of how strong the filtering\n       * is. The variable _MAX_ is dynamically updated.\n       *  @type string\n       *  @default (filtered from _MAX_ total entries)\n       *\n       *  @dtopt Language\n       *  @name DataTable.defaults.language.infoFiltered\n       *\n       *  @example\n       *    $(document).ready( function() {\n       *      $('#example').dataTable( {\n       *        \"language\": {\n       *          \"infoFiltered\": \" - filtering from _MAX_ records\"\n       *        }\n       *      } );\n       *    } );\n       */\n      \"sInfoFiltered\": \"(filtered from _MAX_ total entries)\",\n\n      /**\n       * If can be useful to append extra information to the info string at times,\n       * and this variable does exactly that. This information will be appended to\n       * the `info` (`infoEmpty` and `infoFiltered` in whatever combination they are\n       * being used) at all times.\n       *  @type string\n       *  @default <i>Empty string</i>\n       *\n       *  @dtopt Language\n       *  @name DataTable.defaults.language.infoPostFix\n       *\n       *  @example\n       *    $(document).ready( function() {\n       *      $('#example').dataTable( {\n       *        \"language\": {\n       *          \"infoPostFix\": \"All records shown are derived from real information.\"\n       *        }\n       *      } );\n       *    } );\n       */\n      \"sInfoPostFix\": \"\",\n\n      /**\n       * This decimal place operator is a little different from the other\n       * language options since DataTables doesn't output floating point\n       * numbers, so it won't ever use this for display of a number. Rather,\n       * what this parameter does is modify the sort methods of the table so\n       * that numbers which are in a format which has a character other than\n       * a period (`.`) as a decimal place will be sorted numerically.\n       *\n       * Note that numbers with different decimal places cannot be shown in\n       * the same table and still be sortable, the table must be consistent.\n       * However, multiple different tables on the page can use different\n       * decimal place characters.\n       *  @type string\n       *  @default \n       *\n       *  @dtopt Language\n       *  @name DataTable.defaults.language.decimal\n       *\n       *  @example\n       *    $(document).ready( function() {\n       *      $('#example').dataTable( {\n       *        \"language\": {\n       *          \"decimal\": \",\"\n       *          \"thousands\": \".\"\n       *        }\n       *      } );\n       *    } );\n       */\n      \"sDecimal\": \"\",\n\n      /**\n       * DataTables has a build in number formatter (`formatNumber`) which is\n       * used to format large numbers that are used in the table information.\n       * By default a comma is used, but this can be trivially changed to any\n       * character you wish with this parameter.\n       *  @type string\n       *  @default ,\n       *\n       *  @dtopt Language\n       *  @name DataTable.defaults.language.thousands\n       *\n       *  @example\n       *    $(document).ready( function() {\n       *      $('#example').dataTable( {\n       *        \"language\": {\n       *          \"thousands\": \"'\"\n       *        }\n       *      } );\n       *    } );\n       */\n      \"sThousands\": \",\",\n\n      /**\n       * Detail the action that will be taken when the drop down menu for the\n       * pagination length option is changed. The '_MENU_' variable is replaced\n       * with a default select list of 10, 25, 50 and 100, and can be replaced\n       * with a custom select box if required.\n       *  @type string\n       *  @default Show _MENU_ entries\n       *\n       *  @dtopt Language\n       *  @name DataTable.defaults.language.lengthMenu\n       *\n       *  @example\n       *    // Language change only\n       *    $(document).ready( function() {\n       *      $('#example').dataTable( {\n       *        \"language\": {\n       *          \"lengthMenu\": \"Display _MENU_ records\"\n       *        }\n       *      } );\n       *    } );\n       *\n       *  @example\n       *    // Language and options change\n       *    $(document).ready( function() {\n       *      $('#example').dataTable( {\n       *        \"language\": {\n       *          \"lengthMenu\": 'Display <select>'+\n       *            '<option value=\"10\">10</option>'+\n       *            '<option value=\"20\">20</option>'+\n       *            '<option value=\"30\">30</option>'+\n       *            '<option value=\"40\">40</option>'+\n       *            '<option value=\"50\">50</option>'+\n       *            '<option value=\"-1\">All</option>'+\n       *            '</select> records'\n       *        }\n       *      } );\n       *    } );\n       */\n      \"sLengthMenu\": \"Show _MENU_ entries\",\n\n      /**\n       * When using Ajax sourced data and during the first draw when DataTables is\n       * gathering the data, this message is shown in an empty row in the table to\n       * indicate to the end user the the data is being loaded. Note that this\n       * parameter is not used when loading data by server-side processing, just\n       * Ajax sourced data with client-side processing.\n       *  @type string\n       *  @default Loading...\n       *\n       *  @dtopt Language\n       *  @name DataTable.defaults.language.loadingRecords\n       *\n       *  @example\n       *    $(document).ready( function() {\n       *      $('#example').dataTable( {\n       *        \"language\": {\n       *          \"loadingRecords\": \"Please wait - loading...\"\n       *        }\n       *      } );\n       *    } );\n       */\n      \"sLoadingRecords\": \"Loading...\",\n\n      /**\n       * Text which is displayed when the table is processing a user action\n       * (usually a sort command or similar).\n       *  @type string\n       *  @default Processing...\n       *\n       *  @dtopt Language\n       *  @name DataTable.defaults.language.processing\n       *\n       *  @example\n       *    $(document).ready( function() {\n       *      $('#example').dataTable( {\n       *        \"language\": {\n       *          \"processing\": \"DataTables is currently busy\"\n       *        }\n       *      } );\n       *    } );\n       */\n      \"sProcessing\": \"Processing...\",\n\n      /**\n       * Details the actions that will be taken when the user types into the\n       * filtering input text box. The variable \"_INPUT_\", if used in the string,\n       * is replaced with the HTML text box for the filtering input allowing\n       * control over where it appears in the string. If \"_INPUT_\" is not given\n       * then the input box is appended to the string automatically.\n       *  @type string\n       *  @default Search:\n       *\n       *  @dtopt Language\n       *  @name DataTable.defaults.language.search\n       *\n       *  @example\n       *    // Input text box will be appended at the end automatically\n       *    $(document).ready( function() {\n       *      $('#example').dataTable( {\n       *        \"language\": {\n       *          \"search\": \"Filter records:\"\n       *        }\n       *      } );\n       *    } );\n       *\n       *  @example\n       *    // Specify where the filter should appear\n       *    $(document).ready( function() {\n       *      $('#example').dataTable( {\n       *        \"language\": {\n       *          \"search\": \"Apply filter _INPUT_ to table\"\n       *        }\n       *      } );\n       *    } );\n       */\n      \"sSearch\": \"Search:\",\n\n      /**\n       * Assign a `placeholder` attribute to the search `input` element\n       *  @type string\n       *  @default \n       *\n       *  @dtopt Language\n       *  @name DataTable.defaults.language.searchPlaceholder\n       */\n      \"sSearchPlaceholder\": \"\",\n\n      /**\n       * All of the language information can be stored in a file on the\n       * server-side, which DataTables will look up if this parameter is passed.\n       * It must store the URL of the language file, which is in a JSON format,\n       * and the object has the same properties as the oLanguage object in the\n       * initialiser object (i.e. the above parameters). Please refer to one of\n       * the example language files to see how this works in action.\n       *  @type string\n       *  @default <i>Empty string - i.e. disabled</i>\n       *\n       *  @dtopt Language\n       *  @name DataTable.defaults.language.url\n       *\n       *  @example\n       *    $(document).ready( function() {\n       *      $('#example').dataTable( {\n       *        \"language\": {\n       *          \"url\": \"http://www.sprymedia.co.uk/dataTables/lang.txt\"\n       *        }\n       *      } );\n       *    } );\n       */\n      \"sUrl\": \"\",\n\n      /**\n       * Text shown inside the table records when the is no information to be\n       * displayed after filtering. `emptyTable` is shown when there is simply no\n       * information in the table at all (regardless of filtering).\n       *  @type string\n       *  @default No matching records found\n       *\n       *  @dtopt Language\n       *  @name DataTable.defaults.language.zeroRecords\n       *\n       *  @example\n       *    $(document).ready( function() {\n       *      $('#example').dataTable( {\n       *        \"language\": {\n       *          \"zeroRecords\": \"No records to display\"\n       *        }\n       *      } );\n       *    } );\n       */\n      \"sZeroRecords\": \"No matching records found\"\n    },\n\n    /**\n     * This parameter allows you to have define the global filtering state at\n     * initialisation time. As an object the `search` parameter must be\n     * defined, but all other parameters are optional. When `regex` is true,\n     * the search string will be treated as a regular expression, when false\n     * (default) it will be treated as a straight string. When `smart`\n     * DataTables will use it's smart filtering methods (to word match at\n     * any point in the data), when false this will not be done.\n     *  @namespace\n     *  @extends DataTable.models.oSearch\n     *\n     *  @dtopt Options\n     *  @name DataTable.defaults.search\n     *\n     *  @example\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"search\": {\"search\": \"Initial search\"}\n     *      } );\n     *    } )\n     */\n    \"oSearch\": $.extend({}, DataTable.models.oSearch),\n\n    /**\n     * __Deprecated__ The functionality provided by this parameter has now been\n     * superseded by that provided through `ajax`, which should be used instead.\n     *\n     * By default DataTables will look for the property `data` (or `aaData` for\n     * compatibility with DataTables 1.9-) when obtaining data from an Ajax\n     * source or for server-side processing - this parameter allows that\n     * property to be changed. You can use Javascript dotted object notation to\n     * get a data source for multiple levels of nesting.\n     *  @type string\n     *  @default data\n     *\n     *  @dtopt Options\n     *  @dtopt Server-side\n     *  @name DataTable.defaults.ajaxDataProp\n     *\n     *  @deprecated 1.10. Please use `ajax` for this functionality now.\n     */\n    \"sAjaxDataProp\": \"data\",\n\n    /**\n     * __Deprecated__ The functionality provided by this parameter has now been\n     * superseded by that provided through `ajax`, which should be used instead.\n     *\n     * You can instruct DataTables to load data from an external\n     * source using this parameter (use aData if you want to pass data in you\n     * already have). Simply provide a url a JSON object can be obtained from.\n     *  @type string\n     *  @default null\n     *\n     *  @dtopt Options\n     *  @dtopt Server-side\n     *  @name DataTable.defaults.ajaxSource\n     *\n     *  @deprecated 1.10. Please use `ajax` for this functionality now.\n     */\n    \"sAjaxSource\": null,\n\n    /**\n     * This initialisation variable allows you to specify exactly where in the\n     * DOM you want DataTables to inject the various controls it adds to the page\n     * (for example you might want the pagination controls at the top of the\n     * table). DIV elements (with or without a custom class) can also be added to\n     * aid styling. The follow syntax is used:\n     *   <ul>\n     *     <li>The following options are allowed:\n     *       <ul>\n     *         <li>'l' - Length changing</li>\n     *         <li>'f' - Filtering input</li>\n     *         <li>'t' - The table!</li>\n     *         <li>'i' - Information</li>\n     *         <li>'p' - Pagination</li>\n     *         <li>'r' - pRocessing</li>\n     *       </ul>\n     *     </li>\n     *     <li>The following constants are allowed:\n     *       <ul>\n     *         <li>'H' - jQueryUI theme \"header\" classes ('fg-toolbar ui-widget-header ui-corner-tl ui-corner-tr ui-helper-clearfix')</li>\n     *         <li>'F' - jQueryUI theme \"footer\" classes ('fg-toolbar ui-widget-header ui-corner-bl ui-corner-br ui-helper-clearfix')</li>\n     *       </ul>\n     *     </li>\n     *     <li>The following syntax is expected:\n     *       <ul>\n     *         <li>'&lt;' and '&gt;' - div elements</li>\n     *         <li>'&lt;\"class\" and '&gt;' - div with a class</li>\n     *         <li>'&lt;\"#id\" and '&gt;' - div with an ID</li>\n     *       </ul>\n     *     </li>\n     *     <li>Examples:\n     *       <ul>\n     *         <li>'&lt;\"wrapper\"flipt&gt;'</li>\n     *         <li>'&lt;lf&lt;t&gt;ip&gt;'</li>\n     *       </ul>\n     *     </li>\n     *   </ul>\n     *  @type string\n     *  @default lfrtip <i>(when `jQueryUI` is false)</i> <b>or</b>\n     *    <\"H\"lfr>t<\"F\"ip> <i>(when `jQueryUI` is true)</i>\n     *\n     *  @dtopt Options\n     *  @name DataTable.defaults.dom\n     *\n     *  @example\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"dom\": '&lt;\"top\"i&gt;rt&lt;\"bottom\"flp&gt;&lt;\"clear\"&gt;'\n     *      } );\n     *    } );\n     */\n    \"sDom\": \"lfrtip\",\n\n    /**\n     * Search delay option. This will throttle full table searches that use the\n     * DataTables provided search input element (it does not effect calls to\n     * `dt-api search()`, providing a delay before the search is made.\n     *  @type integer\n     *  @default 0\n     *\n     *  @dtopt Options\n     *  @name DataTable.defaults.searchDelay\n     *\n     *  @example\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"searchDelay\": 200\n     *      } );\n     *    } )\n     */\n    \"searchDelay\": null,\n\n    /**\n     * DataTables features six different built-in options for the buttons to\n     * display for pagination control:\n     *\n     * * `numbers` - Page number buttons only\n     * * `simple` - 'Previous' and 'Next' buttons only\n     * * 'simple_numbers` - 'Previous' and 'Next' buttons, plus page numbers\n     * * `full` - 'First', 'Previous', 'Next' and 'Last' buttons\n     * * `full_numbers` - 'First', 'Previous', 'Next' and 'Last' buttons, plus page numbers\n     * * `first_last_numbers` - 'First' and 'Last' buttons, plus page numbers\n     *  \n     * Further methods can be added using {@link DataTable.ext.oPagination}.\n     *  @type string\n     *  @default simple_numbers\n     *\n     *  @dtopt Options\n     *  @name DataTable.defaults.pagingType\n     *\n     *  @example\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"pagingType\": \"full_numbers\"\n     *      } );\n     *    } )\n     */\n    \"sPaginationType\": \"simple_numbers\",\n\n    /**\n     * Enable horizontal scrolling. When a table is too wide to fit into a\n     * certain layout, or you have a large number of columns in the table, you\n     * can enable x-scrolling to show the table in a viewport, which can be\n     * scrolled. This property can be `true` which will allow the table to\n     * scroll horizontally when needed, or any CSS unit, or a number (in which\n     * case it will be treated as a pixel measurement). Setting as simply `true`\n     * is recommended.\n     *  @type boolean|string\n     *  @default <i>blank string - i.e. disabled</i>\n     *\n     *  @dtopt Features\n     *  @name DataTable.defaults.scrollX\n     *\n     *  @example\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"scrollX\": true,\n     *        \"scrollCollapse\": true\n     *      } );\n     *    } );\n     */\n    \"sScrollX\": \"\",\n\n    /**\n     * This property can be used to force a DataTable to use more width than it\n     * might otherwise do when x-scrolling is enabled. For example if you have a\n     * table which requires to be well spaced, this parameter is useful for\n     * \"over-sizing\" the table, and thus forcing scrolling. This property can by\n     * any CSS unit, or a number (in which case it will be treated as a pixel\n     * measurement).\n     *  @type string\n     *  @default <i>blank string - i.e. disabled</i>\n     *\n     *  @dtopt Options\n     *  @name DataTable.defaults.scrollXInner\n     *\n     *  @example\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"scrollX\": \"100%\",\n     *        \"scrollXInner\": \"110%\"\n     *      } );\n     *    } );\n     */\n    \"sScrollXInner\": \"\",\n\n    /**\n     * Enable vertical scrolling. Vertical scrolling will constrain the DataTable\n     * to the given height, and enable scrolling for any data which overflows the\n     * current viewport. This can be used as an alternative to paging to display\n     * a lot of data in a small area (although paging and scrolling can both be\n     * enabled at the same time). This property can be any CSS unit, or a number\n     * (in which case it will be treated as a pixel measurement).\n     *  @type string\n     *  @default <i>blank string - i.e. disabled</i>\n     *\n     *  @dtopt Features\n     *  @name DataTable.defaults.scrollY\n     *\n     *  @example\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"scrollY\": \"200px\",\n     *        \"paginate\": false\n     *      } );\n     *    } );\n     */\n    \"sScrollY\": \"\",\n\n    /**\n     * __Deprecated__ The functionality provided by this parameter has now been\n     * superseded by that provided through `ajax`, which should be used instead.\n     *\n     * Set the HTTP method that is used to make the Ajax call for server-side\n     * processing or Ajax sourced data.\n     *  @type string\n     *  @default GET\n     *\n     *  @dtopt Options\n     *  @dtopt Server-side\n     *  @name DataTable.defaults.serverMethod\n     *\n     *  @deprecated 1.10. Please use `ajax` for this functionality now.\n     */\n    \"sServerMethod\": \"GET\",\n\n    /**\n     * DataTables makes use of renderers when displaying HTML elements for\n     * a table. These renderers can be added or modified by plug-ins to\n     * generate suitable mark-up for a site. For example the Bootstrap\n     * integration plug-in for DataTables uses a paging button renderer to\n     * display pagination buttons in the mark-up required by Bootstrap.\n     *\n     * For further information about the renderers available see\n     * DataTable.ext.renderer\n     *  @type string|object\n     *  @default null\n     *\n     *  @name DataTable.defaults.renderer\n     *\n     */\n    \"renderer\": null,\n\n    /**\n     * Set the data property name that DataTables should use to get a row's id\n     * to set as the `id` property in the node.\n     *  @type string\n     *  @default DT_RowId\n     *\n     *  @name DataTable.defaults.rowId\n     */\n    \"rowId\": \"DT_RowId\"\n  };\n\n  _fnHungarianMap(DataTable.defaults);\n  /*\n   * Developer note - See note in model.defaults.js about the use of Hungarian\n   * notation and camel case.\n   */\n\n  /**\n   * Column options that can be given to DataTables at initialisation time.\n   *  @namespace\n   */\n\n\n  DataTable.defaults.column = {\n    /**\n     * Define which column(s) an order will occur on for this column. This\n     * allows a column's ordering to take multiple columns into account when\n     * doing a sort or use the data from a different column. For example first\n     * name / last name columns make sense to do a multi-column sort over the\n     * two columns.\n     *  @type array|int\n     *  @default null <i>Takes the value of the column index automatically</i>\n     *\n     *  @name DataTable.defaults.column.orderData\n     *  @dtopt Columns\n     *\n     *  @example\n     *    // Using `columnDefs`\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"columnDefs\": [\n     *          { \"orderData\": [ 0, 1 ], \"targets\": [ 0 ] },\n     *          { \"orderData\": [ 1, 0 ], \"targets\": [ 1 ] },\n     *          { \"orderData\": 2, \"targets\": [ 2 ] }\n     *        ]\n     *      } );\n     *    } );\n     *\n     *  @example\n     *    // Using `columns`\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"columns\": [\n     *          { \"orderData\": [ 0, 1 ] },\n     *          { \"orderData\": [ 1, 0 ] },\n     *          { \"orderData\": 2 },\n     *          null,\n     *          null\n     *        ]\n     *      } );\n     *    } );\n     */\n    \"aDataSort\": null,\n    \"iDataSort\": -1,\n\n    /**\n     * You can control the default ordering direction, and even alter the\n     * behaviour of the sort handler (i.e. only allow ascending ordering etc)\n     * using this parameter.\n     *  @type array\n     *  @default [ 'asc', 'desc' ]\n     *\n     *  @name DataTable.defaults.column.orderSequence\n     *  @dtopt Columns\n     *\n     *  @example\n     *    // Using `columnDefs`\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"columnDefs\": [\n     *          { \"orderSequence\": [ \"asc\" ], \"targets\": [ 1 ] },\n     *          { \"orderSequence\": [ \"desc\", \"asc\", \"asc\" ], \"targets\": [ 2 ] },\n     *          { \"orderSequence\": [ \"desc\" ], \"targets\": [ 3 ] }\n     *        ]\n     *      } );\n     *    } );\n     *\n     *  @example\n     *    // Using `columns`\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"columns\": [\n     *          null,\n     *          { \"orderSequence\": [ \"asc\" ] },\n     *          { \"orderSequence\": [ \"desc\", \"asc\", \"asc\" ] },\n     *          { \"orderSequence\": [ \"desc\" ] },\n     *          null\n     *        ]\n     *      } );\n     *    } );\n     */\n    \"asSorting\": ['asc', 'desc'],\n\n    /**\n     * Enable or disable filtering on the data in this column.\n     *  @type boolean\n     *  @default true\n     *\n     *  @name DataTable.defaults.column.searchable\n     *  @dtopt Columns\n     *\n     *  @example\n     *    // Using `columnDefs`\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"columnDefs\": [\n     *          { \"searchable\": false, \"targets\": [ 0 ] }\n     *        ] } );\n     *    } );\n     *\n     *  @example\n     *    // Using `columns`\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"columns\": [\n     *          { \"searchable\": false },\n     *          null,\n     *          null,\n     *          null,\n     *          null\n     *        ] } );\n     *    } );\n     */\n    \"bSearchable\": true,\n\n    /**\n     * Enable or disable ordering on this column.\n     *  @type boolean\n     *  @default true\n     *\n     *  @name DataTable.defaults.column.orderable\n     *  @dtopt Columns\n     *\n     *  @example\n     *    // Using `columnDefs`\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"columnDefs\": [\n     *          { \"orderable\": false, \"targets\": [ 0 ] }\n     *        ] } );\n     *    } );\n     *\n     *  @example\n     *    // Using `columns`\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"columns\": [\n     *          { \"orderable\": false },\n     *          null,\n     *          null,\n     *          null,\n     *          null\n     *        ] } );\n     *    } );\n     */\n    \"bSortable\": true,\n\n    /**\n     * Enable or disable the display of this column.\n     *  @type boolean\n     *  @default true\n     *\n     *  @name DataTable.defaults.column.visible\n     *  @dtopt Columns\n     *\n     *  @example\n     *    // Using `columnDefs`\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"columnDefs\": [\n     *          { \"visible\": false, \"targets\": [ 0 ] }\n     *        ] } );\n     *    } );\n     *\n     *  @example\n     *    // Using `columns`\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"columns\": [\n     *          { \"visible\": false },\n     *          null,\n     *          null,\n     *          null,\n     *          null\n     *        ] } );\n     *    } );\n     */\n    \"bVisible\": true,\n\n    /**\n     * Developer definable function that is called whenever a cell is created (Ajax source,\n     * etc) or processed for input (DOM source). This can be used as a compliment to mRender\n     * allowing you to modify the DOM element (add background colour for example) when the\n     * element is available.\n     *  @type function\n     *  @param {element} td The TD node that has been created\n     *  @param {*} cellData The Data for the cell\n     *  @param {array|object} rowData The data for the whole row\n     *  @param {int} row The row index for the aoData data store\n     *  @param {int} col The column index for aoColumns\n     *\n     *  @name DataTable.defaults.column.createdCell\n     *  @dtopt Columns\n     *\n     *  @example\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"columnDefs\": [ {\n     *          \"targets\": [3],\n     *          \"createdCell\": function (td, cellData, rowData, row, col) {\n     *            if ( cellData == \"1.7\" ) {\n     *              $(td).css('color', 'blue')\n     *            }\n     *          }\n     *        } ]\n     *      });\n     *    } );\n     */\n    \"fnCreatedCell\": null,\n\n    /**\n     * This parameter has been replaced by `data` in DataTables to ensure naming\n     * consistency. `dataProp` can still be used, as there is backwards\n     * compatibility in DataTables for this option, but it is strongly\n     * recommended that you use `data` in preference to `dataProp`.\n     *  @name DataTable.defaults.column.dataProp\n     */\n\n    /**\n     * This property can be used to read data from any data source property,\n     * including deeply nested objects / properties. `data` can be given in a\n     * number of different ways which effect its behaviour:\n     *\n     * * `integer` - treated as an array index for the data source. This is the\n     *   default that DataTables uses (incrementally increased for each column).\n     * * `string` - read an object property from the data source. There are\n     *   three 'special' options that can be used in the string to alter how\n     *   DataTables reads the data from the source object:\n     *    * `.` - Dotted Javascript notation. Just as you use a `.` in\n     *      Javascript to read from nested objects, so to can the options\n     *      specified in `data`. For example: `browser.version` or\n     *      `browser.name`. If your object parameter name contains a period, use\n     *      `\\\\` to escape it - i.e. `first\\\\.name`.\n     *    * `[]` - Array notation. DataTables can automatically combine data\n     *      from and array source, joining the data with the characters provided\n     *      between the two brackets. For example: `name[, ]` would provide a\n     *      comma-space separated list from the source array. If no characters\n     *      are provided between the brackets, the original array source is\n     *      returned.\n     *    * `()` - Function notation. Adding `()` to the end of a parameter will\n     *      execute a function of the name given. For example: `browser()` for a\n     *      simple function on the data source, `browser.version()` for a\n     *      function in a nested property or even `browser().version` to get an\n     *      object property if the function called returns an object. Note that\n     *      function notation is recommended for use in `render` rather than\n     *      `data` as it is much simpler to use as a renderer.\n     * * `null` - use the original data source for the row rather than plucking\n     *   data directly from it. This action has effects on two other\n     *   initialisation options:\n     *    * `defaultContent` - When null is given as the `data` option and\n     *      `defaultContent` is specified for the column, the value defined by\n     *      `defaultContent` will be used for the cell.\n     *    * `render` - When null is used for the `data` option and the `render`\n     *      option is specified for the column, the whole data source for the\n     *      row is used for the renderer.\n     * * `function` - the function given will be executed whenever DataTables\n     *   needs to set or get the data for a cell in the column. The function\n     *   takes three parameters:\n     *    * Parameters:\n     *      * `{array|object}` The data source for the row\n     *      * `{string}` The type call data requested - this will be 'set' when\n     *        setting data or 'filter', 'display', 'type', 'sort' or undefined\n     *        when gathering data. Note that when `undefined` is given for the\n     *        type DataTables expects to get the raw data for the object back<\n     *      * `{*}` Data to set when the second parameter is 'set'.\n     *    * Return:\n     *      * The return value from the function is not required when 'set' is\n     *        the type of call, but otherwise the return is what will be used\n     *        for the data requested.\n     *\n     * Note that `data` is a getter and setter option. If you just require\n     * formatting of data for output, you will likely want to use `render` which\n     * is simply a getter and thus simpler to use.\n     *\n     * Note that prior to DataTables 1.9.2 `data` was called `mDataProp`. The\n     * name change reflects the flexibility of this property and is consistent\n     * with the naming of mRender. If 'mDataProp' is given, then it will still\n     * be used by DataTables, as it automatically maps the old name to the new\n     * if required.\n     *\n     *  @type string|int|function|null\n     *  @default null <i>Use automatically calculated column index</i>\n     *\n     *  @name DataTable.defaults.column.data\n     *  @dtopt Columns\n     *\n     *  @example\n     *    // Read table data from objects\n     *    // JSON structure for each row:\n     *    //   {\n     *    //      \"engine\": {value},\n     *    //      \"browser\": {value},\n     *    //      \"platform\": {value},\n     *    //      \"version\": {value},\n     *    //      \"grade\": {value}\n     *    //   }\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"ajaxSource\": \"sources/objects.txt\",\n     *        \"columns\": [\n     *          { \"data\": \"engine\" },\n     *          { \"data\": \"browser\" },\n     *          { \"data\": \"platform\" },\n     *          { \"data\": \"version\" },\n     *          { \"data\": \"grade\" }\n     *        ]\n     *      } );\n     *    } );\n     *\n     *  @example\n     *    // Read information from deeply nested objects\n     *    // JSON structure for each row:\n     *    //   {\n     *    //      \"engine\": {value},\n     *    //      \"browser\": {value},\n     *    //      \"platform\": {\n     *    //         \"inner\": {value}\n     *    //      },\n     *    //      \"details\": [\n     *    //         {value}, {value}\n     *    //      ]\n     *    //   }\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"ajaxSource\": \"sources/deep.txt\",\n     *        \"columns\": [\n     *          { \"data\": \"engine\" },\n     *          { \"data\": \"browser\" },\n     *          { \"data\": \"platform.inner\" },\n     *          { \"data\": \"details.0\" },\n     *          { \"data\": \"details.1\" }\n     *        ]\n     *      } );\n     *    } );\n     *\n     *  @example\n     *    // Using `data` as a function to provide different information for\n     *    // sorting, filtering and display. In this case, currency (price)\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"columnDefs\": [ {\n     *          \"targets\": [ 0 ],\n     *          \"data\": function ( source, type, val ) {\n     *            if (type === 'set') {\n     *              source.price = val;\n     *              // Store the computed dislay and filter values for efficiency\n     *              source.price_display = val==\"\" ? \"\" : \"$\"+numberFormat(val);\n     *              source.price_filter  = val==\"\" ? \"\" : \"$\"+numberFormat(val)+\" \"+val;\n     *              return;\n     *            }\n     *            else if (type === 'display') {\n     *              return source.price_display;\n     *            }\n     *            else if (type === 'filter') {\n     *              return source.price_filter;\n     *            }\n     *            // 'sort', 'type' and undefined all just use the integer\n     *            return source.price;\n     *          }\n     *        } ]\n     *      } );\n     *    } );\n     *\n     *  @example\n     *    // Using default content\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"columnDefs\": [ {\n     *          \"targets\": [ 0 ],\n     *          \"data\": null,\n     *          \"defaultContent\": \"Click to edit\"\n     *        } ]\n     *      } );\n     *    } );\n     *\n     *  @example\n     *    // Using array notation - outputting a list from an array\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"columnDefs\": [ {\n     *          \"targets\": [ 0 ],\n     *          \"data\": \"name[, ]\"\n     *        } ]\n     *      } );\n     *    } );\n     *\n     */\n    \"mData\": null,\n\n    /**\n     * This property is the rendering partner to `data` and it is suggested that\n     * when you want to manipulate data for display (including filtering,\n     * sorting etc) without altering the underlying data for the table, use this\n     * property. `render` can be considered to be the the read only companion to\n     * `data` which is read / write (then as such more complex). Like `data`\n     * this option can be given in a number of different ways to effect its\n     * behaviour:\n     *\n     * * `integer` - treated as an array index for the data source. This is the\n     *   default that DataTables uses (incrementally increased for each column).\n     * * `string` - read an object property from the data source. There are\n     *   three 'special' options that can be used in the string to alter how\n     *   DataTables reads the data from the source object:\n     *    * `.` - Dotted Javascript notation. Just as you use a `.` in\n     *      Javascript to read from nested objects, so to can the options\n     *      specified in `data`. For example: `browser.version` or\n     *      `browser.name`. If your object parameter name contains a period, use\n     *      `\\\\` to escape it - i.e. `first\\\\.name`.\n     *    * `[]` - Array notation. DataTables can automatically combine data\n     *      from and array source, joining the data with the characters provided\n     *      between the two brackets. For example: `name[, ]` would provide a\n     *      comma-space separated list from the source array. If no characters\n     *      are provided between the brackets, the original array source is\n     *      returned.\n     *    * `()` - Function notation. Adding `()` to the end of a parameter will\n     *      execute a function of the name given. For example: `browser()` for a\n     *      simple function on the data source, `browser.version()` for a\n     *      function in a nested property or even `browser().version` to get an\n     *      object property if the function called returns an object.\n     * * `object` - use different data for the different data types requested by\n     *   DataTables ('filter', 'display', 'type' or 'sort'). The property names\n     *   of the object is the data type the property refers to and the value can\n     *   defined using an integer, string or function using the same rules as\n     *   `render` normally does. Note that an `_` option _must_ be specified.\n     *   This is the default value to use if you haven't specified a value for\n     *   the data type requested by DataTables.\n     * * `function` - the function given will be executed whenever DataTables\n     *   needs to set or get the data for a cell in the column. The function\n     *   takes three parameters:\n     *    * Parameters:\n     *      * {array|object} The data source for the row (based on `data`)\n     *      * {string} The type call data requested - this will be 'filter',\n     *        'display', 'type' or 'sort'.\n     *      * {array|object} The full data source for the row (not based on\n     *        `data`)\n     *    * Return:\n     *      * The return value from the function is what will be used for the\n     *        data requested.\n     *\n     *  @type string|int|function|object|null\n     *  @default null Use the data source value.\n     *\n     *  @name DataTable.defaults.column.render\n     *  @dtopt Columns\n     *\n     *  @example\n     *    // Create a comma separated list from an array of objects\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"ajaxSource\": \"sources/deep.txt\",\n     *        \"columns\": [\n     *          { \"data\": \"engine\" },\n     *          { \"data\": \"browser\" },\n     *          {\n     *            \"data\": \"platform\",\n     *            \"render\": \"[, ].name\"\n     *          }\n     *        ]\n     *      } );\n     *    } );\n     *\n     *  @example\n     *    // Execute a function to obtain data\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"columnDefs\": [ {\n     *          \"targets\": [ 0 ],\n     *          \"data\": null, // Use the full data source object for the renderer's source\n     *          \"render\": \"browserName()\"\n     *        } ]\n     *      } );\n     *    } );\n     *\n     *  @example\n     *    // As an object, extracting different data for the different types\n     *    // This would be used with a data source such as:\n     *    //   { \"phone\": 5552368, \"phone_filter\": \"5552368 555-2368\", \"phone_display\": \"555-2368\" }\n     *    // Here the `phone` integer is used for sorting and type detection, while `phone_filter`\n     *    // (which has both forms) is used for filtering for if a user inputs either format, while\n     *    // the formatted phone number is the one that is shown in the table.\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"columnDefs\": [ {\n     *          \"targets\": [ 0 ],\n     *          \"data\": null, // Use the full data source object for the renderer's source\n     *          \"render\": {\n     *            \"_\": \"phone\",\n     *            \"filter\": \"phone_filter\",\n     *            \"display\": \"phone_display\"\n     *          }\n     *        } ]\n     *      } );\n     *    } );\n     *\n     *  @example\n     *    // Use as a function to create a link from the data source\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"columnDefs\": [ {\n     *          \"targets\": [ 0 ],\n     *          \"data\": \"download_link\",\n     *          \"render\": function ( data, type, full ) {\n     *            return '<a href=\"'+data+'\">Download</a>';\n     *          }\n     *        } ]\n     *      } );\n     *    } );\n     */\n    \"mRender\": null,\n\n    /**\n     * Change the cell type created for the column - either TD cells or TH cells. This\n     * can be useful as TH cells have semantic meaning in the table body, allowing them\n     * to act as a header for a row (you may wish to add scope='row' to the TH elements).\n     *  @type string\n     *  @default td\n     *\n     *  @name DataTable.defaults.column.cellType\n     *  @dtopt Columns\n     *\n     *  @example\n     *    // Make the first column use TH cells\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"columnDefs\": [ {\n     *          \"targets\": [ 0 ],\n     *          \"cellType\": \"th\"\n     *        } ]\n     *      } );\n     *    } );\n     */\n    \"sCellType\": \"td\",\n\n    /**\n     * Class to give to each cell in this column.\n     *  @type string\n     *  @default <i>Empty string</i>\n     *\n     *  @name DataTable.defaults.column.class\n     *  @dtopt Columns\n     *\n     *  @example\n     *    // Using `columnDefs`\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"columnDefs\": [\n     *          { \"class\": \"my_class\", \"targets\": [ 0 ] }\n     *        ]\n     *      } );\n     *    } );\n     *\n     *  @example\n     *    // Using `columns`\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"columns\": [\n     *          { \"class\": \"my_class\" },\n     *          null,\n     *          null,\n     *          null,\n     *          null\n     *        ]\n     *      } );\n     *    } );\n     */\n    \"sClass\": \"\",\n\n    /**\n     * When DataTables calculates the column widths to assign to each column,\n     * it finds the longest string in each column and then constructs a\n     * temporary table and reads the widths from that. The problem with this\n     * is that \"mmm\" is much wider then \"iiii\", but the latter is a longer\n     * string - thus the calculation can go wrong (doing it properly and putting\n     * it into an DOM object and measuring that is horribly(!) slow). Thus as\n     * a \"work around\" we provide this option. It will append its value to the\n     * text that is found to be the longest string for the column - i.e. padding.\n     * Generally you shouldn't need this!\n     *  @type string\n     *  @default <i>Empty string<i>\n     *\n     *  @name DataTable.defaults.column.contentPadding\n     *  @dtopt Columns\n     *\n     *  @example\n     *    // Using `columns`\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"columns\": [\n     *          null,\n     *          null,\n     *          null,\n     *          {\n     *            \"contentPadding\": \"mmm\"\n     *          }\n     *        ]\n     *      } );\n     *    } );\n     */\n    \"sContentPadding\": \"\",\n\n    /**\n     * Allows a default value to be given for a column's data, and will be used\n     * whenever a null data source is encountered (this can be because `data`\n     * is set to null, or because the data source itself is null).\n     *  @type string\n     *  @default null\n     *\n     *  @name DataTable.defaults.column.defaultContent\n     *  @dtopt Columns\n     *\n     *  @example\n     *    // Using `columnDefs`\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"columnDefs\": [\n     *          {\n     *            \"data\": null,\n     *            \"defaultContent\": \"Edit\",\n     *            \"targets\": [ -1 ]\n     *          }\n     *        ]\n     *      } );\n     *    } );\n     *\n     *  @example\n     *    // Using `columns`\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"columns\": [\n     *          null,\n     *          null,\n     *          null,\n     *          {\n     *            \"data\": null,\n     *            \"defaultContent\": \"Edit\"\n     *          }\n     *        ]\n     *      } );\n     *    } );\n     */\n    \"sDefaultContent\": null,\n\n    /**\n     * This parameter is only used in DataTables' server-side processing. It can\n     * be exceptionally useful to know what columns are being displayed on the\n     * client side, and to map these to database fields. When defined, the names\n     * also allow DataTables to reorder information from the server if it comes\n     * back in an unexpected order (i.e. if you switch your columns around on the\n     * client-side, your server-side code does not also need updating).\n     *  @type string\n     *  @default <i>Empty string</i>\n     *\n     *  @name DataTable.defaults.column.name\n     *  @dtopt Columns\n     *\n     *  @example\n     *    // Using `columnDefs`\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"columnDefs\": [\n     *          { \"name\": \"engine\", \"targets\": [ 0 ] },\n     *          { \"name\": \"browser\", \"targets\": [ 1 ] },\n     *          { \"name\": \"platform\", \"targets\": [ 2 ] },\n     *          { \"name\": \"version\", \"targets\": [ 3 ] },\n     *          { \"name\": \"grade\", \"targets\": [ 4 ] }\n     *        ]\n     *      } );\n     *    } );\n     *\n     *  @example\n     *    // Using `columns`\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"columns\": [\n     *          { \"name\": \"engine\" },\n     *          { \"name\": \"browser\" },\n     *          { \"name\": \"platform\" },\n     *          { \"name\": \"version\" },\n     *          { \"name\": \"grade\" }\n     *        ]\n     *      } );\n     *    } );\n     */\n    \"sName\": \"\",\n\n    /**\n     * Defines a data source type for the ordering which can be used to read\n     * real-time information from the table (updating the internally cached\n     * version) prior to ordering. This allows ordering to occur on user\n     * editable elements such as form inputs.\n     *  @type string\n     *  @default std\n     *\n     *  @name DataTable.defaults.column.orderDataType\n     *  @dtopt Columns\n     *\n     *  @example\n     *    // Using `columnDefs`\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"columnDefs\": [\n     *          { \"orderDataType\": \"dom-text\", \"targets\": [ 2, 3 ] },\n     *          { \"type\": \"numeric\", \"targets\": [ 3 ] },\n     *          { \"orderDataType\": \"dom-select\", \"targets\": [ 4 ] },\n     *          { \"orderDataType\": \"dom-checkbox\", \"targets\": [ 5 ] }\n     *        ]\n     *      } );\n     *    } );\n     *\n     *  @example\n     *    // Using `columns`\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"columns\": [\n     *          null,\n     *          null,\n     *          { \"orderDataType\": \"dom-text\" },\n     *          { \"orderDataType\": \"dom-text\", \"type\": \"numeric\" },\n     *          { \"orderDataType\": \"dom-select\" },\n     *          { \"orderDataType\": \"dom-checkbox\" }\n     *        ]\n     *      } );\n     *    } );\n     */\n    \"sSortDataType\": \"std\",\n\n    /**\n     * The title of this column.\n     *  @type string\n     *  @default null <i>Derived from the 'TH' value for this column in the\n     *    original HTML table.</i>\n     *\n     *  @name DataTable.defaults.column.title\n     *  @dtopt Columns\n     *\n     *  @example\n     *    // Using `columnDefs`\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"columnDefs\": [\n     *          { \"title\": \"My column title\", \"targets\": [ 0 ] }\n     *        ]\n     *      } );\n     *    } );\n     *\n     *  @example\n     *    // Using `columns`\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"columns\": [\n     *          { \"title\": \"My column title\" },\n     *          null,\n     *          null,\n     *          null,\n     *          null\n     *        ]\n     *      } );\n     *    } );\n     */\n    \"sTitle\": null,\n\n    /**\n     * The type allows you to specify how the data for this column will be\n     * ordered. Four types (string, numeric, date and html (which will strip\n     * HTML tags before ordering)) are currently available. Note that only date\n     * formats understood by Javascript's Date() object will be accepted as type\n     * date. For example: \"Mar 26, 2008 5:03 PM\". May take the values: 'string',\n     * 'numeric', 'date' or 'html' (by default). Further types can be adding\n     * through plug-ins.\n     *  @type string\n     *  @default null <i>Auto-detected from raw data</i>\n     *\n     *  @name DataTable.defaults.column.type\n     *  @dtopt Columns\n     *\n     *  @example\n     *    // Using `columnDefs`\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"columnDefs\": [\n     *          { \"type\": \"html\", \"targets\": [ 0 ] }\n     *        ]\n     *      } );\n     *    } );\n     *\n     *  @example\n     *    // Using `columns`\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"columns\": [\n     *          { \"type\": \"html\" },\n     *          null,\n     *          null,\n     *          null,\n     *          null\n     *        ]\n     *      } );\n     *    } );\n     */\n    \"sType\": null,\n\n    /**\n     * Defining the width of the column, this parameter may take any CSS value\n     * (3em, 20px etc). DataTables applies 'smart' widths to columns which have not\n     * been given a specific width through this interface ensuring that the table\n     * remains readable.\n     *  @type string\n     *  @default null <i>Automatic</i>\n     *\n     *  @name DataTable.defaults.column.width\n     *  @dtopt Columns\n     *\n     *  @example\n     *    // Using `columnDefs`\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"columnDefs\": [\n     *          { \"width\": \"20%\", \"targets\": [ 0 ] }\n     *        ]\n     *      } );\n     *    } );\n     *\n     *  @example\n     *    // Using `columns`\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"columns\": [\n     *          { \"width\": \"20%\" },\n     *          null,\n     *          null,\n     *          null,\n     *          null\n     *        ]\n     *      } );\n     *    } );\n     */\n    \"sWidth\": null\n  };\n\n  _fnHungarianMap(DataTable.defaults.column);\n  /**\n   * DataTables settings object - this holds all the information needed for a\n   * given table, including configuration, data and current application of the\n   * table options. DataTables does not have a single instance for each DataTable\n   * with the settings attached to that instance, but rather instances of the\n   * DataTable \"class\" are created on-the-fly as needed (typically by a\n   * $().dataTable() call) and the settings object is then applied to that\n   * instance.\n   *\n   * Note that this object is related to {@link DataTable.defaults} but this\n   * one is the internal data store for DataTables's cache of columns. It should\n   * NOT be manipulated outside of DataTables. Any configuration should be done\n   * through the initialisation options.\n   *  @namespace\n   *  @todo Really should attach the settings object to individual instances so we\n   *    don't need to create new instances on each $().dataTable() call (if the\n   *    table already exists). It would also save passing oSettings around and\n   *    into every single function. However, this is a very significant\n   *    architecture change for DataTables and will almost certainly break\n   *    backwards compatibility with older installations. This is something that\n   *    will be done in 2.0.\n   */\n\n\n  DataTable.models.oSettings = {\n    /**\n     * Primary features of DataTables and their enablement state.\n     *  @namespace\n     */\n    \"oFeatures\": {\n      /**\n       * Flag to say if DataTables should automatically try to calculate the\n       * optimum table and columns widths (true) or not (false).\n       * Note that this parameter will be set by the initialisation routine. To\n       * set a default use {@link DataTable.defaults}.\n       *  @type boolean\n       */\n      \"bAutoWidth\": null,\n\n      /**\n       * Delay the creation of TR and TD elements until they are actually\n       * needed by a driven page draw. This can give a significant speed\n       * increase for Ajax source and Javascript source data, but makes no\n       * difference at all fro DOM and server-side processing tables.\n       * Note that this parameter will be set by the initialisation routine. To\n       * set a default use {@link DataTable.defaults}.\n       *  @type boolean\n       */\n      \"bDeferRender\": null,\n\n      /**\n       * Enable filtering on the table or not. Note that if this is disabled\n       * then there is no filtering at all on the table, including fnFilter.\n       * To just remove the filtering input use sDom and remove the 'f' option.\n       * Note that this parameter will be set by the initialisation routine. To\n       * set a default use {@link DataTable.defaults}.\n       *  @type boolean\n       */\n      \"bFilter\": null,\n\n      /**\n       * Table information element (the 'Showing x of y records' div) enable\n       * flag.\n       * Note that this parameter will be set by the initialisation routine. To\n       * set a default use {@link DataTable.defaults}.\n       *  @type boolean\n       */\n      \"bInfo\": null,\n\n      /**\n       * Present a user control allowing the end user to change the page size\n       * when pagination is enabled.\n       * Note that this parameter will be set by the initialisation routine. To\n       * set a default use {@link DataTable.defaults}.\n       *  @type boolean\n       */\n      \"bLengthChange\": null,\n\n      /**\n       * Pagination enabled or not. Note that if this is disabled then length\n       * changing must also be disabled.\n       * Note that this parameter will be set by the initialisation routine. To\n       * set a default use {@link DataTable.defaults}.\n       *  @type boolean\n       */\n      \"bPaginate\": null,\n\n      /**\n       * Processing indicator enable flag whenever DataTables is enacting a\n       * user request - typically an Ajax request for server-side processing.\n       * Note that this parameter will be set by the initialisation routine. To\n       * set a default use {@link DataTable.defaults}.\n       *  @type boolean\n       */\n      \"bProcessing\": null,\n\n      /**\n       * Server-side processing enabled flag - when enabled DataTables will\n       * get all data from the server for every draw - there is no filtering,\n       * sorting or paging done on the client-side.\n       * Note that this parameter will be set by the initialisation routine. To\n       * set a default use {@link DataTable.defaults}.\n       *  @type boolean\n       */\n      \"bServerSide\": null,\n\n      /**\n       * Sorting enablement flag.\n       * Note that this parameter will be set by the initialisation routine. To\n       * set a default use {@link DataTable.defaults}.\n       *  @type boolean\n       */\n      \"bSort\": null,\n\n      /**\n       * Multi-column sorting\n       * Note that this parameter will be set by the initialisation routine. To\n       * set a default use {@link DataTable.defaults}.\n       *  @type boolean\n       */\n      \"bSortMulti\": null,\n\n      /**\n       * Apply a class to the columns which are being sorted to provide a\n       * visual highlight or not. This can slow things down when enabled since\n       * there is a lot of DOM interaction.\n       * Note that this parameter will be set by the initialisation routine. To\n       * set a default use {@link DataTable.defaults}.\n       *  @type boolean\n       */\n      \"bSortClasses\": null,\n\n      /**\n       * State saving enablement flag.\n       * Note that this parameter will be set by the initialisation routine. To\n       * set a default use {@link DataTable.defaults}.\n       *  @type boolean\n       */\n      \"bStateSave\": null\n    },\n\n    /**\n     * Scrolling settings for a table.\n     *  @namespace\n     */\n    \"oScroll\": {\n      /**\n       * When the table is shorter in height than sScrollY, collapse the\n       * table container down to the height of the table (when true).\n       * Note that this parameter will be set by the initialisation routine. To\n       * set a default use {@link DataTable.defaults}.\n       *  @type boolean\n       */\n      \"bCollapse\": null,\n\n      /**\n       * Width of the scrollbar for the web-browser's platform. Calculated\n       * during table initialisation.\n       *  @type int\n       *  @default 0\n       */\n      \"iBarWidth\": 0,\n\n      /**\n       * Viewport width for horizontal scrolling. Horizontal scrolling is\n       * disabled if an empty string.\n       * Note that this parameter will be set by the initialisation routine. To\n       * set a default use {@link DataTable.defaults}.\n       *  @type string\n       */\n      \"sX\": null,\n\n      /**\n       * Width to expand the table to when using x-scrolling. Typically you\n       * should not need to use this.\n       * Note that this parameter will be set by the initialisation routine. To\n       * set a default use {@link DataTable.defaults}.\n       *  @type string\n       *  @deprecated\n       */\n      \"sXInner\": null,\n\n      /**\n       * Viewport height for vertical scrolling. Vertical scrolling is disabled\n       * if an empty string.\n       * Note that this parameter will be set by the initialisation routine. To\n       * set a default use {@link DataTable.defaults}.\n       *  @type string\n       */\n      \"sY\": null\n    },\n\n    /**\n     * Language information for the table.\n     *  @namespace\n     *  @extends DataTable.defaults.oLanguage\n     */\n    \"oLanguage\": {\n      /**\n       * Information callback function. See\n       * {@link DataTable.defaults.fnInfoCallback}\n       *  @type function\n       *  @default null\n       */\n      \"fnInfoCallback\": null\n    },\n\n    /**\n     * Browser support parameters\n     *  @namespace\n     */\n    \"oBrowser\": {\n      /**\n       * Indicate if the browser incorrectly calculates width:100% inside a\n       * scrolling element (IE6/7)\n       *  @type boolean\n       *  @default false\n       */\n      \"bScrollOversize\": false,\n\n      /**\n       * Determine if the vertical scrollbar is on the right or left of the\n       * scrolling container - needed for rtl language layout, although not\n       * all browsers move the scrollbar (Safari).\n       *  @type boolean\n       *  @default false\n       */\n      \"bScrollbarLeft\": false,\n\n      /**\n       * Flag for if `getBoundingClientRect` is fully supported or not\n       *  @type boolean\n       *  @default false\n       */\n      \"bBounding\": false,\n\n      /**\n       * Browser scrollbar width\n       *  @type integer\n       *  @default 0\n       */\n      \"barWidth\": 0\n    },\n    \"ajax\": null,\n\n    /**\n     * Array referencing the nodes which are used for the features. The\n     * parameters of this object match what is allowed by sDom - i.e.\n     *   <ul>\n     *     <li>'l' - Length changing</li>\n     *     <li>'f' - Filtering input</li>\n     *     <li>'t' - The table!</li>\n     *     <li>'i' - Information</li>\n     *     <li>'p' - Pagination</li>\n     *     <li>'r' - pRocessing</li>\n     *   </ul>\n     *  @type array\n     *  @default []\n     */\n    \"aanFeatures\": [],\n\n    /**\n     * Store data information - see {@link DataTable.models.oRow} for detailed\n     * information.\n     *  @type array\n     *  @default []\n     */\n    \"aoData\": [],\n\n    /**\n     * Array of indexes which are in the current display (after filtering etc)\n     *  @type array\n     *  @default []\n     */\n    \"aiDisplay\": [],\n\n    /**\n     * Array of indexes for display - no filtering\n     *  @type array\n     *  @default []\n     */\n    \"aiDisplayMaster\": [],\n\n    /**\n     * Map of row ids to data indexes\n     *  @type object\n     *  @default {}\n     */\n    \"aIds\": {},\n\n    /**\n     * Store information about each column that is in use\n     *  @type array\n     *  @default []\n     */\n    \"aoColumns\": [],\n\n    /**\n     * Store information about the table's header\n     *  @type array\n     *  @default []\n     */\n    \"aoHeader\": [],\n\n    /**\n     * Store information about the table's footer\n     *  @type array\n     *  @default []\n     */\n    \"aoFooter\": [],\n\n    /**\n     * Store the applied global search information in case we want to force a\n     * research or compare the old search to a new one.\n     * Note that this parameter will be set by the initialisation routine. To\n     * set a default use {@link DataTable.defaults}.\n     *  @namespace\n     *  @extends DataTable.models.oSearch\n     */\n    \"oPreviousSearch\": {},\n\n    /**\n     * Store the applied search for each column - see\n     * {@link DataTable.models.oSearch} for the format that is used for the\n     * filtering information for each column.\n     *  @type array\n     *  @default []\n     */\n    \"aoPreSearchCols\": [],\n\n    /**\n     * Sorting that is applied to the table. Note that the inner arrays are\n     * used in the following manner:\n     * <ul>\n     *   <li>Index 0 - column number</li>\n     *   <li>Index 1 - current sorting direction</li>\n     * </ul>\n     * Note that this parameter will be set by the initialisation routine. To\n     * set a default use {@link DataTable.defaults}.\n     *  @type array\n     *  @todo These inner arrays should really be objects\n     */\n    \"aaSorting\": null,\n\n    /**\n     * Sorting that is always applied to the table (i.e. prefixed in front of\n     * aaSorting).\n     * Note that this parameter will be set by the initialisation routine. To\n     * set a default use {@link DataTable.defaults}.\n     *  @type array\n     *  @default []\n     */\n    \"aaSortingFixed\": [],\n\n    /**\n     * Classes to use for the striping of a table.\n     * Note that this parameter will be set by the initialisation routine. To\n     * set a default use {@link DataTable.defaults}.\n     *  @type array\n     *  @default []\n     */\n    \"asStripeClasses\": null,\n\n    /**\n     * If restoring a table - we should restore its striping classes as well\n     *  @type array\n     *  @default []\n     */\n    \"asDestroyStripes\": [],\n\n    /**\n     * If restoring a table - we should restore its width\n     *  @type int\n     *  @default 0\n     */\n    \"sDestroyWidth\": 0,\n\n    /**\n     * Callback functions array for every time a row is inserted (i.e. on a draw).\n     *  @type array\n     *  @default []\n     */\n    \"aoRowCallback\": [],\n\n    /**\n     * Callback functions for the header on each draw.\n     *  @type array\n     *  @default []\n     */\n    \"aoHeaderCallback\": [],\n\n    /**\n     * Callback function for the footer on each draw.\n     *  @type array\n     *  @default []\n     */\n    \"aoFooterCallback\": [],\n\n    /**\n     * Array of callback functions for draw callback functions\n     *  @type array\n     *  @default []\n     */\n    \"aoDrawCallback\": [],\n\n    /**\n     * Array of callback functions for row created function\n     *  @type array\n     *  @default []\n     */\n    \"aoRowCreatedCallback\": [],\n\n    /**\n     * Callback functions for just before the table is redrawn. A return of\n     * false will be used to cancel the draw.\n     *  @type array\n     *  @default []\n     */\n    \"aoPreDrawCallback\": [],\n\n    /**\n     * Callback functions for when the table has been initialised.\n     *  @type array\n     *  @default []\n     */\n    \"aoInitComplete\": [],\n\n    /**\n     * Callbacks for modifying the settings to be stored for state saving, prior to\n     * saving state.\n     *  @type array\n     *  @default []\n     */\n    \"aoStateSaveParams\": [],\n\n    /**\n     * Callbacks for modifying the settings that have been stored for state saving\n     * prior to using the stored values to restore the state.\n     *  @type array\n     *  @default []\n     */\n    \"aoStateLoadParams\": [],\n\n    /**\n     * Callbacks for operating on the settings object once the saved state has been\n     * loaded\n     *  @type array\n     *  @default []\n     */\n    \"aoStateLoaded\": [],\n\n    /**\n     * Cache the table ID for quick access\n     *  @type string\n     *  @default <i>Empty string</i>\n     */\n    \"sTableId\": \"\",\n\n    /**\n     * The TABLE node for the main table\n     *  @type node\n     *  @default null\n     */\n    \"nTable\": null,\n\n    /**\n     * Permanent ref to the thead element\n     *  @type node\n     *  @default null\n     */\n    \"nTHead\": null,\n\n    /**\n     * Permanent ref to the tfoot element - if it exists\n     *  @type node\n     *  @default null\n     */\n    \"nTFoot\": null,\n\n    /**\n     * Permanent ref to the tbody element\n     *  @type node\n     *  @default null\n     */\n    \"nTBody\": null,\n\n    /**\n     * Cache the wrapper node (contains all DataTables controlled elements)\n     *  @type node\n     *  @default null\n     */\n    \"nTableWrapper\": null,\n\n    /**\n     * Indicate if when using server-side processing the loading of data\n     * should be deferred until the second draw.\n     * Note that this parameter will be set by the initialisation routine. To\n     * set a default use {@link DataTable.defaults}.\n     *  @type boolean\n     *  @default false\n     */\n    \"bDeferLoading\": false,\n\n    /**\n     * Indicate if all required information has been read in\n     *  @type boolean\n     *  @default false\n     */\n    \"bInitialised\": false,\n\n    /**\n     * Information about open rows. Each object in the array has the parameters\n     * 'nTr' and 'nParent'\n     *  @type array\n     *  @default []\n     */\n    \"aoOpenRows\": [],\n\n    /**\n     * Dictate the positioning of DataTables' control elements - see\n     * {@link DataTable.model.oInit.sDom}.\n     * Note that this parameter will be set by the initialisation routine. To\n     * set a default use {@link DataTable.defaults}.\n     *  @type string\n     *  @default null\n     */\n    \"sDom\": null,\n\n    /**\n     * Search delay (in mS)\n     *  @type integer\n     *  @default null\n     */\n    \"searchDelay\": null,\n\n    /**\n     * Which type of pagination should be used.\n     * Note that this parameter will be set by the initialisation routine. To\n     * set a default use {@link DataTable.defaults}.\n     *  @type string\n     *  @default two_button\n     */\n    \"sPaginationType\": \"two_button\",\n\n    /**\n     * The state duration (for `stateSave`) in seconds.\n     * Note that this parameter will be set by the initialisation routine. To\n     * set a default use {@link DataTable.defaults}.\n     *  @type int\n     *  @default 0\n     */\n    \"iStateDuration\": 0,\n\n    /**\n     * Array of callback functions for state saving. Each array element is an\n     * object with the following parameters:\n     *   <ul>\n     *     <li>function:fn - function to call. Takes two parameters, oSettings\n     *       and the JSON string to save that has been thus far created. Returns\n     *       a JSON string to be inserted into a json object\n     *       (i.e. '\"param\": [ 0, 1, 2]')</li>\n     *     <li>string:sName - name of callback</li>\n     *   </ul>\n     *  @type array\n     *  @default []\n     */\n    \"aoStateSave\": [],\n\n    /**\n     * Array of callback functions for state loading. Each array element is an\n     * object with the following parameters:\n     *   <ul>\n     *     <li>function:fn - function to call. Takes two parameters, oSettings\n     *       and the object stored. May return false to cancel state loading</li>\n     *     <li>string:sName - name of callback</li>\n     *   </ul>\n     *  @type array\n     *  @default []\n     */\n    \"aoStateLoad\": [],\n\n    /**\n     * State that was saved. Useful for back reference\n     *  @type object\n     *  @default null\n     */\n    \"oSavedState\": null,\n\n    /**\n     * State that was loaded. Useful for back reference\n     *  @type object\n     *  @default null\n     */\n    \"oLoadedState\": null,\n\n    /**\n     * Source url for AJAX data for the table.\n     * Note that this parameter will be set by the initialisation routine. To\n     * set a default use {@link DataTable.defaults}.\n     *  @type string\n     *  @default null\n     */\n    \"sAjaxSource\": null,\n\n    /**\n     * Property from a given object from which to read the table data from. This\n     * can be an empty string (when not server-side processing), in which case\n     * it is  assumed an an array is given directly.\n     * Note that this parameter will be set by the initialisation routine. To\n     * set a default use {@link DataTable.defaults}.\n     *  @type string\n     */\n    \"sAjaxDataProp\": null,\n\n    /**\n     * Note if draw should be blocked while getting data\n     *  @type boolean\n     *  @default true\n     */\n    \"bAjaxDataGet\": true,\n\n    /**\n     * The last jQuery XHR object that was used for server-side data gathering.\n     * This can be used for working with the XHR information in one of the\n     * callbacks\n     *  @type object\n     *  @default null\n     */\n    \"jqXHR\": null,\n\n    /**\n     * JSON returned from the server in the last Ajax request\n     *  @type object\n     *  @default undefined\n     */\n    \"json\": undefined,\n\n    /**\n     * Data submitted as part of the last Ajax request\n     *  @type object\n     *  @default undefined\n     */\n    \"oAjaxData\": undefined,\n\n    /**\n     * Function to get the server-side data.\n     * Note that this parameter will be set by the initialisation routine. To\n     * set a default use {@link DataTable.defaults}.\n     *  @type function\n     */\n    \"fnServerData\": null,\n\n    /**\n     * Functions which are called prior to sending an Ajax request so extra\n     * parameters can easily be sent to the server\n     *  @type array\n     *  @default []\n     */\n    \"aoServerParams\": [],\n\n    /**\n     * Send the XHR HTTP method - GET or POST (could be PUT or DELETE if\n     * required).\n     * Note that this parameter will be set by the initialisation routine. To\n     * set a default use {@link DataTable.defaults}.\n     *  @type string\n     */\n    \"sServerMethod\": null,\n\n    /**\n     * Format numbers for display.\n     * Note that this parameter will be set by the initialisation routine. To\n     * set a default use {@link DataTable.defaults}.\n     *  @type function\n     */\n    \"fnFormatNumber\": null,\n\n    /**\n     * List of options that can be used for the user selectable length menu.\n     * Note that this parameter will be set by the initialisation routine. To\n     * set a default use {@link DataTable.defaults}.\n     *  @type array\n     *  @default []\n     */\n    \"aLengthMenu\": null,\n\n    /**\n     * Counter for the draws that the table does. Also used as a tracker for\n     * server-side processing\n     *  @type int\n     *  @default 0\n     */\n    \"iDraw\": 0,\n\n    /**\n     * Indicate if a redraw is being done - useful for Ajax\n     *  @type boolean\n     *  @default false\n     */\n    \"bDrawing\": false,\n\n    /**\n     * Draw index (iDraw) of the last error when parsing the returned data\n     *  @type int\n     *  @default -1\n     */\n    \"iDrawError\": -1,\n\n    /**\n     * Paging display length\n     *  @type int\n     *  @default 10\n     */\n    \"_iDisplayLength\": 10,\n\n    /**\n     * Paging start point - aiDisplay index\n     *  @type int\n     *  @default 0\n     */\n    \"_iDisplayStart\": 0,\n\n    /**\n     * Server-side processing - number of records in the result set\n     * (i.e. before filtering), Use fnRecordsTotal rather than\n     * this property to get the value of the number of records, regardless of\n     * the server-side processing setting.\n     *  @type int\n     *  @default 0\n     *  @private\n     */\n    \"_iRecordsTotal\": 0,\n\n    /**\n     * Server-side processing - number of records in the current display set\n     * (i.e. after filtering). Use fnRecordsDisplay rather than\n     * this property to get the value of the number of records, regardless of\n     * the server-side processing setting.\n     *  @type boolean\n     *  @default 0\n     *  @private\n     */\n    \"_iRecordsDisplay\": 0,\n\n    /**\n     * The classes to use for the table\n     *  @type object\n     *  @default {}\n     */\n    \"oClasses\": {},\n\n    /**\n     * Flag attached to the settings object so you can check in the draw\n     * callback if filtering has been done in the draw. Deprecated in favour of\n     * events.\n     *  @type boolean\n     *  @default false\n     *  @deprecated\n     */\n    \"bFiltered\": false,\n\n    /**\n     * Flag attached to the settings object so you can check in the draw\n     * callback if sorting has been done in the draw. Deprecated in favour of\n     * events.\n     *  @type boolean\n     *  @default false\n     *  @deprecated\n     */\n    \"bSorted\": false,\n\n    /**\n     * Indicate that if multiple rows are in the header and there is more than\n     * one unique cell per column, if the top one (true) or bottom one (false)\n     * should be used for sorting / title by DataTables.\n     * Note that this parameter will be set by the initialisation routine. To\n     * set a default use {@link DataTable.defaults}.\n     *  @type boolean\n     */\n    \"bSortCellsTop\": null,\n\n    /**\n     * Initialisation object that is used for the table\n     *  @type object\n     *  @default null\n     */\n    \"oInit\": null,\n\n    /**\n     * Destroy callback functions - for plug-ins to attach themselves to the\n     * destroy so they can clean up markup and events.\n     *  @type array\n     *  @default []\n     */\n    \"aoDestroyCallback\": [],\n\n    /**\n     * Get the number of records in the current record set, before filtering\n     *  @type function\n     */\n    \"fnRecordsTotal\": function fnRecordsTotal() {\n      return _fnDataSource(this) == 'ssp' ? this._iRecordsTotal * 1 : this.aiDisplayMaster.length;\n    },\n\n    /**\n     * Get the number of records in the current record set, after filtering\n     *  @type function\n     */\n    \"fnRecordsDisplay\": function fnRecordsDisplay() {\n      return _fnDataSource(this) == 'ssp' ? this._iRecordsDisplay * 1 : this.aiDisplay.length;\n    },\n\n    /**\n     * Get the display end point - aiDisplay index\n     *  @type function\n     */\n    \"fnDisplayEnd\": function fnDisplayEnd() {\n      var len = this._iDisplayLength,\n          start = this._iDisplayStart,\n          calc = start + len,\n          records = this.aiDisplay.length,\n          features = this.oFeatures,\n          paginate = features.bPaginate;\n\n      if (features.bServerSide) {\n        return paginate === false || len === -1 ? start + records : Math.min(start + len, this._iRecordsDisplay);\n      } else {\n        return !paginate || calc > records || len === -1 ? records : calc;\n      }\n    },\n\n    /**\n     * The DataTables object for this table\n     *  @type object\n     *  @default null\n     */\n    \"oInstance\": null,\n\n    /**\n     * Unique identifier for each instance of the DataTables object. If there\n     * is an ID on the table node, then it takes that value, otherwise an\n     * incrementing internal counter is used.\n     *  @type string\n     *  @default null\n     */\n    \"sInstance\": null,\n\n    /**\n     * tabindex attribute value that is added to DataTables control elements, allowing\n     * keyboard navigation of the table and its controls.\n     */\n    \"iTabIndex\": 0,\n\n    /**\n     * DIV container for the footer scrolling table if scrolling\n     */\n    \"nScrollHead\": null,\n\n    /**\n     * DIV container for the footer scrolling table if scrolling\n     */\n    \"nScrollFoot\": null,\n\n    /**\n     * Last applied sort\n     *  @type array\n     *  @default []\n     */\n    \"aLastSort\": [],\n\n    /**\n     * Stored plug-in instances\n     *  @type object\n     *  @default {}\n     */\n    \"oPlugins\": {},\n\n    /**\n     * Function used to get a row's id from the row's data\n     *  @type function\n     *  @default null\n     */\n    \"rowIdFn\": null,\n\n    /**\n     * Data location where to store a row's id\n     *  @type string\n     *  @default null\n     */\n    \"rowId\": null\n  };\n  /**\n   * Extension object for DataTables that is used to provide all extension\n   * options.\n   *\n   * Note that the `DataTable.ext` object is available through\n   * `jQuery.fn.dataTable.ext` where it may be accessed and manipulated. It is\n   * also aliased to `jQuery.fn.dataTableExt` for historic reasons.\n   *  @namespace\n   *  @extends DataTable.models.ext\n   */\n\n  /**\n   * DataTables extensions\n   * \n   * This namespace acts as a collection area for plug-ins that can be used to\n   * extend DataTables capabilities. Indeed many of the build in methods\n   * use this method to provide their own capabilities (sorting methods for\n   * example).\n   *\n   * Note that this namespace is aliased to `jQuery.fn.dataTableExt` for legacy\n   * reasons\n   *\n   *  @namespace\n   */\n\n  DataTable.ext = _ext = {\n    /**\n     * Buttons. For use with the Buttons extension for DataTables. This is\n     * defined here so other extensions can define buttons regardless of load\n     * order. It is _not_ used by DataTables core.\n     *\n     *  @type object\n     *  @default {}\n     */\n    buttons: {},\n\n    /**\n     * Element class names\n     *\n     *  @type object\n     *  @default {}\n     */\n    classes: {},\n\n    /**\n     * DataTables build type (expanded by the download builder)\n     *\n     *  @type string\n     */\n    builder: \"-source-\",\n\n    /**\n     * Error reporting.\n     * \n     * How should DataTables report an error. Can take the value 'alert',\n     * 'throw', 'none' or a function.\n     *\n     *  @type string|function\n     *  @default alert\n     */\n    errMode: \"alert\",\n\n    /**\n     * Feature plug-ins.\n     * \n     * This is an array of objects which describe the feature plug-ins that are\n     * available to DataTables. These feature plug-ins are then available for\n     * use through the `dom` initialisation option.\n     * \n     * Each feature plug-in is described by an object which must have the\n     * following properties:\n     * \n     * * `fnInit` - function that is used to initialise the plug-in,\n     * * `cFeature` - a character so the feature can be enabled by the `dom`\n     *   instillation option. This is case sensitive.\n     *\n     * The `fnInit` function has the following input parameters:\n     *\n     * 1. `{object}` DataTables settings object: see\n     *    {@link DataTable.models.oSettings}\n     *\n     * And the following return is expected:\n     * \n     * * {node|null} The element which contains your feature. Note that the\n     *   return may also be void if your plug-in does not require to inject any\n     *   DOM elements into DataTables control (`dom`) - for example this might\n     *   be useful when developing a plug-in which allows table control via\n     *   keyboard entry\n     *\n     *  @type array\n     *\n     *  @example\n     *    $.fn.dataTable.ext.features.push( {\n     *      \"fnInit\": function( oSettings ) {\n     *        return new TableTools( { \"oDTSettings\": oSettings } );\n     *      },\n     *      \"cFeature\": \"T\"\n     *    } );\n     */\n    feature: [],\n\n    /**\n     * Row searching.\n     * \n     * This method of searching is complimentary to the default type based\n     * searching, and a lot more comprehensive as it allows you complete control\n     * over the searching logic. Each element in this array is a function\n     * (parameters described below) that is called for every row in the table,\n     * and your logic decides if it should be included in the searching data set\n     * or not.\n     *\n     * Searching functions have the following input parameters:\n     *\n     * 1. `{object}` DataTables settings object: see\n     *    {@link DataTable.models.oSettings}\n     * 2. `{array|object}` Data for the row to be processed (same as the\n     *    original format that was passed in as the data source, or an array\n     *    from a DOM data source\n     * 3. `{int}` Row index ({@link DataTable.models.oSettings.aoData}), which\n     *    can be useful to retrieve the `TR` element if you need DOM interaction.\n     *\n     * And the following return is expected:\n     *\n     * * {boolean} Include the row in the searched result set (true) or not\n     *   (false)\n     *\n     * Note that as with the main search ability in DataTables, technically this\n     * is \"filtering\", since it is subtractive. However, for consistency in\n     * naming we call it searching here.\n     *\n     *  @type array\n     *  @default []\n     *\n     *  @example\n     *    // The following example shows custom search being applied to the\n     *    // fourth column (i.e. the data[3] index) based on two input values\n     *    // from the end-user, matching the data in a certain range.\n     *    $.fn.dataTable.ext.search.push(\n     *      function( settings, data, dataIndex ) {\n     *        var min = document.getElementById('min').value * 1;\n     *        var max = document.getElementById('max').value * 1;\n     *        var version = data[3] == \"-\" ? 0 : data[3]*1;\n     *\n     *        if ( min == \"\" && max == \"\" ) {\n     *          return true;\n     *        }\n     *        else if ( min == \"\" && version < max ) {\n     *          return true;\n     *        }\n     *        else if ( min < version && \"\" == max ) {\n     *          return true;\n     *        }\n     *        else if ( min < version && version < max ) {\n     *          return true;\n     *        }\n     *        return false;\n     *      }\n     *    );\n     */\n    search: [],\n\n    /**\n     * Selector extensions\n     *\n     * The `selector` option can be used to extend the options available for the\n     * selector modifier options (`selector-modifier` object data type) that\n     * each of the three built in selector types offer (row, column and cell +\n     * their plural counterparts). For example the Select extension uses this\n     * mechanism to provide an option to select only rows, columns and cells\n     * that have been marked as selected by the end user (`{selected: true}`),\n     * which can be used in conjunction with the existing built in selector\n     * options.\n     *\n     * Each property is an array to which functions can be pushed. The functions\n     * take three attributes:\n     *\n     * * Settings object for the host table\n     * * Options object (`selector-modifier` object type)\n     * * Array of selected item indexes\n     *\n     * The return is an array of the resulting item indexes after the custom\n     * selector has been applied.\n     *\n     *  @type object\n     */\n    selector: {\n      cell: [],\n      column: [],\n      row: []\n    },\n\n    /**\n     * Internal functions, exposed for used in plug-ins.\n     * \n     * Please note that you should not need to use the internal methods for\n     * anything other than a plug-in (and even then, try to avoid if possible).\n     * The internal function may change between releases.\n     *\n     *  @type object\n     *  @default {}\n     */\n    internal: {},\n\n    /**\n     * Legacy configuration options. Enable and disable legacy options that\n     * are available in DataTables.\n     *\n     *  @type object\n     */\n    legacy: {\n      /**\n       * Enable / disable DataTables 1.9 compatible server-side processing\n       * requests\n       *\n       *  @type boolean\n       *  @default null\n       */\n      ajax: null\n    },\n\n    /**\n     * Pagination plug-in methods.\n     * \n     * Each entry in this object is a function and defines which buttons should\n     * be shown by the pagination rendering method that is used for the table:\n     * {@link DataTable.ext.renderer.pageButton}. The renderer addresses how the\n     * buttons are displayed in the document, while the functions here tell it\n     * what buttons to display. This is done by returning an array of button\n     * descriptions (what each button will do).\n     *\n     * Pagination types (the four built in options and any additional plug-in\n     * options defined here) can be used through the `paginationType`\n     * initialisation parameter.\n     *\n     * The functions defined take two parameters:\n     *\n     * 1. `{int} page` The current page index\n     * 2. `{int} pages` The number of pages in the table\n     *\n     * Each function is expected to return an array where each element of the\n     * array can be one of:\n     *\n     * * `first` - Jump to first page when activated\n     * * `last` - Jump to last page when activated\n     * * `previous` - Show previous page when activated\n     * * `next` - Show next page when activated\n     * * `{int}` - Show page of the index given\n     * * `{array}` - A nested array containing the above elements to add a\n     *   containing 'DIV' element (might be useful for styling).\n     *\n     * Note that DataTables v1.9- used this object slightly differently whereby\n     * an object with two functions would be defined for each plug-in. That\n     * ability is still supported by DataTables 1.10+ to provide backwards\n     * compatibility, but this option of use is now decremented and no longer\n     * documented in DataTables 1.10+.\n     *\n     *  @type object\n     *  @default {}\n     *\n     *  @example\n     *    // Show previous, next and current page buttons only\n     *    $.fn.dataTableExt.oPagination.current = function ( page, pages ) {\n     *      return [ 'previous', page, 'next' ];\n     *    };\n     */\n    pager: {},\n    renderer: {\n      pageButton: {},\n      header: {}\n    },\n\n    /**\n     * Ordering plug-ins - custom data source\n     * \n     * The extension options for ordering of data available here is complimentary\n     * to the default type based ordering that DataTables typically uses. It\n     * allows much greater control over the the data that is being used to\n     * order a column, but is necessarily therefore more complex.\n     * \n     * This type of ordering is useful if you want to do ordering based on data\n     * live from the DOM (for example the contents of an 'input' element) rather\n     * than just the static string that DataTables knows of.\n     * \n     * The way these plug-ins work is that you create an array of the values you\n     * wish to be ordering for the column in question and then return that\n     * array. The data in the array much be in the index order of the rows in\n     * the table (not the currently ordering order!). Which order data gathering\n     * function is run here depends on the `dt-init columns.orderDataType`\n     * parameter that is used for the column (if any).\n     *\n     * The functions defined take two parameters:\n     *\n     * 1. `{object}` DataTables settings object: see\n     *    {@link DataTable.models.oSettings}\n     * 2. `{int}` Target column index\n     *\n     * Each function is expected to return an array:\n     *\n     * * `{array}` Data for the column to be ordering upon\n     *\n     *  @type array\n     *\n     *  @example\n     *    // Ordering using `input` node values\n     *    $.fn.dataTable.ext.order['dom-text'] = function  ( settings, col )\n     *    {\n     *      return this.api().column( col, {order:'index'} ).nodes().map( function ( td, i ) {\n     *        return $('input', td).val();\n     *      } );\n     *    }\n     */\n    order: {},\n\n    /**\n     * Type based plug-ins.\n     *\n     * Each column in DataTables has a type assigned to it, either by automatic\n     * detection or by direct assignment using the `type` option for the column.\n     * The type of a column will effect how it is ordering and search (plug-ins\n     * can also make use of the column type if required).\n     *\n     * @namespace\n     */\n    type: {\n      /**\n       * Type detection functions.\n       *\n       * The functions defined in this object are used to automatically detect\n       * a column's type, making initialisation of DataTables super easy, even\n       * when complex data is in the table.\n       *\n       * The functions defined take two parameters:\n       *\n          *  1. `{*}` Data from the column cell to be analysed\n          *  2. `{settings}` DataTables settings object. This can be used to\n          *     perform context specific type detection - for example detection\n          *     based on language settings such as using a comma for a decimal\n          *     place. Generally speaking the options from the settings will not\n          *     be required\n       *\n       * Each function is expected to return:\n       *\n       * * `{string|null}` Data type detected, or null if unknown (and thus\n       *   pass it on to the other type detection functions.\n       *\n       *  @type array\n       *\n       *  @example\n       *    // Currency type detection plug-in:\n       *    $.fn.dataTable.ext.type.detect.push(\n       *      function ( data, settings ) {\n       *        // Check the numeric part\n       *        if ( ! data.substring(1).match(/[0-9]/) ) {\n       *          return null;\n       *        }\n       *\n       *        // Check prefixed by currency\n       *        if ( data.charAt(0) == '$' || data.charAt(0) == '&pound;' ) {\n       *          return 'currency';\n       *        }\n       *        return null;\n       *      }\n       *    );\n       */\n      detect: [],\n\n      /**\n       * Type based search formatting.\n       *\n       * The type based searching functions can be used to pre-format the\n       * data to be search on. For example, it can be used to strip HTML\n       * tags or to de-format telephone numbers for numeric only searching.\n       *\n       * Note that is a search is not defined for a column of a given type,\n       * no search formatting will be performed.\n       * \n       * Pre-processing of searching data plug-ins - When you assign the sType\n       * for a column (or have it automatically detected for you by DataTables\n       * or a type detection plug-in), you will typically be using this for\n       * custom sorting, but it can also be used to provide custom searching\n       * by allowing you to pre-processing the data and returning the data in\n       * the format that should be searched upon. This is done by adding\n       * functions this object with a parameter name which matches the sType\n       * for that target column. This is the corollary of <i>afnSortData</i>\n       * for searching data.\n       *\n       * The functions defined take a single parameter:\n       *\n          *  1. `{*}` Data from the column cell to be prepared for searching\n       *\n       * Each function is expected to return:\n       *\n       * * `{string|null}` Formatted string that will be used for the searching.\n       *\n       *  @type object\n       *  @default {}\n       *\n       *  @example\n       *    $.fn.dataTable.ext.type.search['title-numeric'] = function ( d ) {\n       *      return d.replace(/\\n/g,\" \").replace( /<.*?>/g, \"\" );\n       *    }\n       */\n      search: {},\n\n      /**\n       * Type based ordering.\n       *\n       * The column type tells DataTables what ordering to apply to the table\n       * when a column is sorted upon. The order for each type that is defined,\n       * is defined by the functions available in this object.\n       *\n       * Each ordering option can be described by three properties added to\n       * this object:\n       *\n       * * `{type}-pre` - Pre-formatting function\n       * * `{type}-asc` - Ascending order function\n       * * `{type}-desc` - Descending order function\n       *\n       * All three can be used together, only `{type}-pre` or only\n       * `{type}-asc` and `{type}-desc` together. It is generally recommended\n       * that only `{type}-pre` is used, as this provides the optimal\n       * implementation in terms of speed, although the others are provided\n       * for compatibility with existing Javascript sort functions.\n       *\n       * `{type}-pre`: Functions defined take a single parameter:\n       *\n          *  1. `{*}` Data from the column cell to be prepared for ordering\n       *\n       * And return:\n       *\n       * * `{*}` Data to be sorted upon\n       *\n       * `{type}-asc` and `{type}-desc`: Functions are typical Javascript sort\n       * functions, taking two parameters:\n       *\n          *  1. `{*}` Data to compare to the second parameter\n          *  2. `{*}` Data to compare to the first parameter\n       *\n       * And returning:\n       *\n       * * `{*}` Ordering match: <0 if first parameter should be sorted lower\n       *   than the second parameter, ===0 if the two parameters are equal and\n       *   >0 if the first parameter should be sorted height than the second\n       *   parameter.\n       * \n       *  @type object\n       *  @default {}\n       *\n       *  @example\n       *    // Numeric ordering of formatted numbers with a pre-formatter\n       *    $.extend( $.fn.dataTable.ext.type.order, {\n       *      \"string-pre\": function(x) {\n       *        a = (a === \"-\" || a === \"\") ? 0 : a.replace( /[^\\d\\-\\.]/g, \"\" );\n       *        return parseFloat( a );\n       *      }\n       *    } );\n       *\n       *  @example\n       *    // Case-sensitive string ordering, with no pre-formatting method\n       *    $.extend( $.fn.dataTable.ext.order, {\n       *      \"string-case-asc\": function(x,y) {\n       *        return ((x < y) ? -1 : ((x > y) ? 1 : 0));\n       *      },\n       *      \"string-case-desc\": function(x,y) {\n       *        return ((x < y) ? 1 : ((x > y) ? -1 : 0));\n       *      }\n       *    } );\n       */\n      order: {}\n    },\n\n    /**\n     * Unique DataTables instance counter\n     *\n     * @type int\n     * @private\n     */\n    _unique: 0,\n    //\n    // Depreciated\n    // The following properties are retained for backwards compatiblity only.\n    // The should not be used in new projects and will be removed in a future\n    // version\n    //\n\n    /**\n     * Version check function.\n     *  @type function\n     *  @depreciated Since 1.10\n     */\n    fnVersionCheck: DataTable.fnVersionCheck,\n\n    /**\n     * Index for what 'this' index API functions should use\n     *  @type int\n     *  @deprecated Since v1.10\n     */\n    iApiIndex: 0,\n\n    /**\n     * jQuery UI class container\n     *  @type object\n     *  @deprecated Since v1.10\n     */\n    oJUIClasses: {},\n\n    /**\n     * Software version\n     *  @type string\n     *  @deprecated Since v1.10\n     */\n    sVersion: DataTable.version\n  }; //\n  // Backwards compatibility. Alias to pre 1.10 Hungarian notation counter parts\n  //\n\n  $.extend(_ext, {\n    afnFiltering: _ext.search,\n    aTypes: _ext.type.detect,\n    ofnSearch: _ext.type.search,\n    oSort: _ext.type.order,\n    afnSortData: _ext.order,\n    aoFeatures: _ext.feature,\n    oApi: _ext.internal,\n    oStdClasses: _ext.classes,\n    oPagination: _ext.pager\n  });\n  $.extend(DataTable.ext.classes, {\n    \"sTable\": \"dataTable\",\n    \"sNoFooter\": \"no-footer\",\n\n    /* Paging buttons */\n    \"sPageButton\": \"paginate_button\",\n    \"sPageButtonActive\": \"current\",\n    \"sPageButtonDisabled\": \"disabled\",\n\n    /* Striping classes */\n    \"sStripeOdd\": \"odd\",\n    \"sStripeEven\": \"even\",\n\n    /* Empty row */\n    \"sRowEmpty\": \"dataTables_empty\",\n\n    /* Features */\n    \"sWrapper\": \"dataTables_wrapper\",\n    \"sFilter\": \"dataTables_filter\",\n    \"sInfo\": \"dataTables_info\",\n    \"sPaging\": \"dataTables_paginate paging_\",\n\n    /* Note that the type is postfixed */\n    \"sLength\": \"dataTables_length\",\n    \"sProcessing\": \"dataTables_processing\",\n\n    /* Sorting */\n    \"sSortAsc\": \"sorting_asc\",\n    \"sSortDesc\": \"sorting_desc\",\n    \"sSortable\": \"sorting\",\n\n    /* Sortable in both directions */\n    \"sSortableAsc\": \"sorting_asc_disabled\",\n    \"sSortableDesc\": \"sorting_desc_disabled\",\n    \"sSortableNone\": \"sorting_disabled\",\n    \"sSortColumn\": \"sorting_\",\n\n    /* Note that an int is postfixed for the sorting order */\n\n    /* Filtering */\n    \"sFilterInput\": \"\",\n\n    /* Page length */\n    \"sLengthSelect\": \"\",\n\n    /* Scrolling */\n    \"sScrollWrapper\": \"dataTables_scroll\",\n    \"sScrollHead\": \"dataTables_scrollHead\",\n    \"sScrollHeadInner\": \"dataTables_scrollHeadInner\",\n    \"sScrollBody\": \"dataTables_scrollBody\",\n    \"sScrollFoot\": \"dataTables_scrollFoot\",\n    \"sScrollFootInner\": \"dataTables_scrollFootInner\",\n\n    /* Misc */\n    \"sHeaderTH\": \"\",\n    \"sFooterTH\": \"\",\n    // Deprecated\n    \"sSortJUIAsc\": \"\",\n    \"sSortJUIDesc\": \"\",\n    \"sSortJUI\": \"\",\n    \"sSortJUIAscAllowed\": \"\",\n    \"sSortJUIDescAllowed\": \"\",\n    \"sSortJUIWrapper\": \"\",\n    \"sSortIcon\": \"\",\n    \"sJUIHeader\": \"\",\n    \"sJUIFooter\": \"\"\n  });\n  var extPagination = DataTable.ext.pager;\n\n  function _numbers(page, pages) {\n    var numbers = [],\n        buttons = extPagination.numbers_length,\n        half = Math.floor(buttons / 2),\n        i = 1;\n\n    if (pages <= buttons) {\n      numbers = _range(0, pages);\n    } else if (page <= half) {\n      numbers = _range(0, buttons - 2);\n      numbers.push('ellipsis');\n      numbers.push(pages - 1);\n    } else if (page >= pages - 1 - half) {\n      numbers = _range(pages - (buttons - 2), pages);\n      numbers.splice(0, 0, 'ellipsis'); // no unshift in ie6\n\n      numbers.splice(0, 0, 0);\n    } else {\n      numbers = _range(page - half + 2, page + half - 1);\n      numbers.push('ellipsis');\n      numbers.push(pages - 1);\n      numbers.splice(0, 0, 'ellipsis');\n      numbers.splice(0, 0, 0);\n    }\n\n    numbers.DT_el = 'span';\n    return numbers;\n  }\n\n  $.extend(extPagination, {\n    simple: function simple(page, pages) {\n      return ['previous', 'next'];\n    },\n    full: function full(page, pages) {\n      return ['first', 'previous', 'next', 'last'];\n    },\n    numbers: function numbers(page, pages) {\n      return [_numbers(page, pages)];\n    },\n    simple_numbers: function simple_numbers(page, pages) {\n      return ['previous', _numbers(page, pages), 'next'];\n    },\n    full_numbers: function full_numbers(page, pages) {\n      return ['first', 'previous', _numbers(page, pages), 'next', 'last'];\n    },\n    first_last_numbers: function first_last_numbers(page, pages) {\n      return ['first', _numbers(page, pages), 'last'];\n    },\n    // For testing and plug-ins to use\n    _numbers: _numbers,\n    // Number of number buttons (including ellipsis) to show. _Must be odd!_\n    numbers_length: 7\n  });\n  $.extend(true, DataTable.ext.renderer, {\n    pageButton: {\n      _: function _(settings, host, idx, buttons, page, pages) {\n        var classes = settings.oClasses;\n        var lang = settings.oLanguage.oPaginate;\n        var aria = settings.oLanguage.oAria.paginate || {};\n        var btnDisplay,\n            btnClass,\n            counter = 0;\n\n        var attach = function attach(container, buttons) {\n          var i, ien, node, button;\n\n          var clickHandler = function clickHandler(e) {\n            _fnPageChange(settings, e.data.action, true);\n          };\n\n          for (i = 0, ien = buttons.length; i < ien; i++) {\n            button = buttons[i];\n\n            if ($.isArray(button)) {\n              var inner = $('<' + (button.DT_el || 'div') + '/>').appendTo(container);\n              attach(inner, button);\n            } else {\n              btnDisplay = null;\n              btnClass = '';\n\n              switch (button) {\n                case 'ellipsis':\n                  container.append('<span class=\"ellipsis\">&#x2026;</span>');\n                  break;\n\n                case 'first':\n                  btnDisplay = lang.sFirst;\n                  btnClass = button + (page > 0 ? '' : ' ' + classes.sPageButtonDisabled);\n                  break;\n\n                case 'previous':\n                  btnDisplay = lang.sPrevious;\n                  btnClass = button + (page > 0 ? '' : ' ' + classes.sPageButtonDisabled);\n                  break;\n\n                case 'next':\n                  btnDisplay = lang.sNext;\n                  btnClass = button + (page < pages - 1 ? '' : ' ' + classes.sPageButtonDisabled);\n                  break;\n\n                case 'last':\n                  btnDisplay = lang.sLast;\n                  btnClass = button + (page < pages - 1 ? '' : ' ' + classes.sPageButtonDisabled);\n                  break;\n\n                default:\n                  btnDisplay = button + 1;\n                  btnClass = page === button ? classes.sPageButtonActive : '';\n                  break;\n              }\n\n              if (btnDisplay !== null) {\n                node = $('<a>', {\n                  'class': classes.sPageButton + ' ' + btnClass,\n                  'aria-controls': settings.sTableId,\n                  'aria-label': aria[button],\n                  'data-dt-idx': counter,\n                  'tabindex': settings.iTabIndex,\n                  'id': idx === 0 && typeof button === 'string' ? settings.sTableId + '_' + button : null\n                }).html(btnDisplay).appendTo(container);\n\n                _fnBindAction(node, {\n                  action: button\n                }, clickHandler);\n\n                counter++;\n              }\n            }\n          }\n        }; // IE9 throws an 'unknown error' if document.activeElement is used\n        // inside an iframe or frame. Try / catch the error. Not good for\n        // accessibility, but neither are frames.\n\n\n        var activeEl;\n\n        try {\n          // Because this approach is destroying and recreating the paging\n          // elements, focus is lost on the select button which is bad for\n          // accessibility. So we want to restore focus once the draw has\n          // completed\n          activeEl = $(host).find(document.activeElement).data('dt-idx');\n        } catch (e) {}\n\n        attach($(host).empty(), buttons);\n\n        if (activeEl !== undefined) {\n          $(host).find('[data-dt-idx=' + activeEl + ']').focus();\n        }\n      }\n    }\n  }); // Built in type detection. See model.ext.aTypes for information about\n  // what is required from this methods.\n\n  $.extend(DataTable.ext.type.detect, [// Plain numbers - first since V8 detects some plain numbers as dates\n  // e.g. Date.parse('55') (but not all, e.g. Date.parse('22')...).\n  function (d, settings) {\n    var decimal = settings.oLanguage.sDecimal;\n    return _isNumber(d, decimal) ? 'num' + decimal : null;\n  }, // Dates (only those recognised by the browser's Date.parse)\n  function (d, settings) {\n    // V8 tries _very_ hard to make a string passed into `Date.parse()`\n    // valid, so we need to use a regex to restrict date formats. Use a\n    // plug-in for anything other than ISO8601 style strings\n    if (d && !(d instanceof Date) && !_re_date.test(d)) {\n      return null;\n    }\n\n    var parsed = Date.parse(d);\n    return parsed !== null && !isNaN(parsed) || _empty(d) ? 'date' : null;\n  }, // Formatted numbers\n  function (d, settings) {\n    var decimal = settings.oLanguage.sDecimal;\n    return _isNumber(d, decimal, true) ? 'num-fmt' + decimal : null;\n  }, // HTML numeric\n  function (d, settings) {\n    var decimal = settings.oLanguage.sDecimal;\n    return _htmlNumeric(d, decimal) ? 'html-num' + decimal : null;\n  }, // HTML numeric, formatted\n  function (d, settings) {\n    var decimal = settings.oLanguage.sDecimal;\n    return _htmlNumeric(d, decimal, true) ? 'html-num-fmt' + decimal : null;\n  }, // HTML (this is strict checking - there must be html)\n  function (d, settings) {\n    return _empty(d) || typeof d === 'string' && d.indexOf('<') !== -1 ? 'html' : null;\n  }]); // Filter formatting functions. See model.ext.ofnSearch for information about\n  // what is required from these methods.\n  // \n  // Note that additional search methods are added for the html numbers and\n  // html formatted numbers by `_addNumericSort()` when we know what the decimal\n  // place is\n\n  $.extend(DataTable.ext.type.search, {\n    html: function html(data) {\n      return _empty(data) ? data : typeof data === 'string' ? data.replace(_re_new_lines, \" \").replace(_re_html, \"\") : '';\n    },\n    string: function string(data) {\n      return _empty(data) ? data : typeof data === 'string' ? data.replace(_re_new_lines, \" \") : data;\n    }\n  });\n\n  var __numericReplace = function __numericReplace(d, decimalPlace, re1, re2) {\n    if (d !== 0 && (!d || d === '-')) {\n      return -Infinity;\n    } // If a decimal place other than `.` is used, it needs to be given to the\n    // function so we can detect it and replace with a `.` which is the only\n    // decimal place Javascript recognises - it is not locale aware.\n\n\n    if (decimalPlace) {\n      d = _numToDecimal(d, decimalPlace);\n    }\n\n    if (d.replace) {\n      if (re1) {\n        d = d.replace(re1, '');\n      }\n\n      if (re2) {\n        d = d.replace(re2, '');\n      }\n    }\n\n    return d * 1;\n  }; // Add the numeric 'deformatting' functions for sorting and search. This is done\n  // in a function to provide an easy ability for the language options to add\n  // additional methods if a non-period decimal place is used.\n\n\n  function _addNumericSort(decimalPlace) {\n    $.each({\n      // Plain numbers\n      \"num\": function num(d) {\n        return __numericReplace(d, decimalPlace);\n      },\n      // Formatted numbers\n      \"num-fmt\": function numFmt(d) {\n        return __numericReplace(d, decimalPlace, _re_formatted_numeric);\n      },\n      // HTML numeric\n      \"html-num\": function htmlNum(d) {\n        return __numericReplace(d, decimalPlace, _re_html);\n      },\n      // HTML numeric, formatted\n      \"html-num-fmt\": function htmlNumFmt(d) {\n        return __numericReplace(d, decimalPlace, _re_html, _re_formatted_numeric);\n      }\n    }, function (key, fn) {\n      // Add the ordering method\n      _ext.type.order[key + decimalPlace + '-pre'] = fn; // For HTML types add a search formatter that will strip the HTML\n\n      if (key.match(/^html\\-/)) {\n        _ext.type.search[key + decimalPlace] = _ext.type.search.html;\n      }\n    });\n  } // Default sort methods\n\n\n  $.extend(_ext.type.order, {\n    // Dates\n    \"date-pre\": function datePre(d) {\n      var ts = Date.parse(d);\n      return isNaN(ts) ? -Infinity : ts;\n    },\n    // html\n    \"html-pre\": function htmlPre(a) {\n      return _empty(a) ? '' : a.replace ? a.replace(/<.*?>/g, \"\").toLowerCase() : a + '';\n    },\n    // string\n    \"string-pre\": function stringPre(a) {\n      // This is a little complex, but faster than always calling toString,\n      // http://jsperf.com/tostring-v-check\n      return _empty(a) ? '' : typeof a === 'string' ? a.toLowerCase() : !a.toString ? '' : a.toString();\n    },\n    // string-asc and -desc are retained only for compatibility with the old\n    // sort methods\n    \"string-asc\": function stringAsc(x, y) {\n      return x < y ? -1 : x > y ? 1 : 0;\n    },\n    \"string-desc\": function stringDesc(x, y) {\n      return x < y ? 1 : x > y ? -1 : 0;\n    }\n  }); // Numeric sorting types - order doesn't matter here\n\n  _addNumericSort('');\n\n  $.extend(true, DataTable.ext.renderer, {\n    header: {\n      _: function _(settings, cell, column, classes) {\n        // No additional mark-up required\n        // Attach a sort listener to update on sort - note that using the\n        // `DT` namespace will allow the event to be removed automatically\n        // on destroy, while the `dt` namespaced event is the one we are\n        // listening for\n        $(settings.nTable).on('order.dt.DT', function (e, ctx, sorting, columns) {\n          if (settings !== ctx) {\n            // need to check this this is the host\n            return; // table, not a nested one\n          }\n\n          var colIdx = column.idx;\n          cell.removeClass(column.sSortingClass + ' ' + classes.sSortAsc + ' ' + classes.sSortDesc).addClass(columns[colIdx] == 'asc' ? classes.sSortAsc : columns[colIdx] == 'desc' ? classes.sSortDesc : column.sSortingClass);\n        });\n      },\n      jqueryui: function jqueryui(settings, cell, column, classes) {\n        $('<div/>').addClass(classes.sSortJUIWrapper).append(cell.contents()).append($('<span/>').addClass(classes.sSortIcon + ' ' + column.sSortingClassJUI)).appendTo(cell); // Attach a sort listener to update on sort\n\n        $(settings.nTable).on('order.dt.DT', function (e, ctx, sorting, columns) {\n          if (settings !== ctx) {\n            return;\n          }\n\n          var colIdx = column.idx;\n          cell.removeClass(classes.sSortAsc + \" \" + classes.sSortDesc).addClass(columns[colIdx] == 'asc' ? classes.sSortAsc : columns[colIdx] == 'desc' ? classes.sSortDesc : column.sSortingClass);\n          cell.find('span.' + classes.sSortIcon).removeClass(classes.sSortJUIAsc + \" \" + classes.sSortJUIDesc + \" \" + classes.sSortJUI + \" \" + classes.sSortJUIAscAllowed + \" \" + classes.sSortJUIDescAllowed).addClass(columns[colIdx] == 'asc' ? classes.sSortJUIAsc : columns[colIdx] == 'desc' ? classes.sSortJUIDesc : column.sSortingClassJUI);\n        });\n      }\n    }\n  });\n  /*\n   * Public helper functions. These aren't used internally by DataTables, or\n   * called by any of the options passed into DataTables, but they can be used\n   * externally by developers working with DataTables. They are helper functions\n   * to make working with DataTables a little bit easier.\n   */\n\n  var __htmlEscapeEntities = function __htmlEscapeEntities(d) {\n    return typeof d === 'string' ? d.replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\"/g, '&quot;') : d;\n  };\n  /**\n   * Helpers for `columns.render`.\n   *\n   * The options defined here can be used with the `columns.render` initialisation\n   * option to provide a display renderer. The following functions are defined:\n   *\n   * * `number` - Will format numeric data (defined by `columns.data`) for\n   *   display, retaining the original unformatted data for sorting and filtering.\n   *   It takes 5 parameters:\n   *   * `string` - Thousands grouping separator\n   *   * `string` - Decimal point indicator\n   *   * `integer` - Number of decimal points to show\n   *   * `string` (optional) - Prefix.\n   *   * `string` (optional) - Postfix (/suffix).\n   * * `text` - Escape HTML to help prevent XSS attacks. It has no optional\n   *   parameters.\n   *\n   * @example\n   *   // Column definition using the number renderer\n   *   {\n   *     data: \"salary\",\n   *     render: $.fn.dataTable.render.number( '\\'', '.', 0, '$' )\n   *   }\n   *\n   * @namespace\n   */\n\n\n  DataTable.render = {\n    number: function number(thousands, decimal, precision, prefix, postfix) {\n      return {\n        display: function display(d) {\n          if (typeof d !== 'number' && typeof d !== 'string') {\n            return d;\n          }\n\n          var negative = d < 0 ? '-' : '';\n          var flo = parseFloat(d); // If NaN then there isn't much formatting that we can do - just\n          // return immediately, escaping any HTML (this was supposed to\n          // be a number after all)\n\n          if (isNaN(flo)) {\n            return __htmlEscapeEntities(d);\n          }\n\n          flo = flo.toFixed(precision);\n          d = Math.abs(flo);\n          var intPart = parseInt(d, 10);\n          var floatPart = precision ? decimal + (d - intPart).toFixed(precision).substring(2) : '';\n          return negative + (prefix || '') + intPart.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, thousands) + floatPart + (postfix || '');\n        }\n      };\n    },\n    text: function text() {\n      return {\n        display: __htmlEscapeEntities,\n        filter: __htmlEscapeEntities\n      };\n    }\n  };\n  /*\n   * This is really a good bit rubbish this method of exposing the internal methods\n   * publicly... - To be fixed in 2.0 using methods on the prototype\n   */\n\n  /**\n   * Create a wrapper function for exporting an internal functions to an external API.\n   *  @param {string} fn API function name\n   *  @returns {function} wrapped function\n   *  @memberof DataTable#internal\n   */\n\n  function _fnExternApiFunc(fn) {\n    return function () {\n      var args = [_fnSettingsFromNode(this[DataTable.ext.iApiIndex])].concat(Array.prototype.slice.call(arguments));\n      return DataTable.ext.internal[fn].apply(this, args);\n    };\n  }\n  /**\n   * Reference to internal functions for use by plug-in developers. Note that\n   * these methods are references to internal functions and are considered to be\n   * private. If you use these methods, be aware that they are liable to change\n   * between versions.\n   *  @namespace\n   */\n\n\n  $.extend(DataTable.ext.internal, {\n    _fnExternApiFunc: _fnExternApiFunc,\n    _fnBuildAjax: _fnBuildAjax,\n    _fnAjaxUpdate: _fnAjaxUpdate,\n    _fnAjaxParameters: _fnAjaxParameters,\n    _fnAjaxUpdateDraw: _fnAjaxUpdateDraw,\n    _fnAjaxDataSrc: _fnAjaxDataSrc,\n    _fnAddColumn: _fnAddColumn,\n    _fnColumnOptions: _fnColumnOptions,\n    _fnAdjustColumnSizing: _fnAdjustColumnSizing,\n    _fnVisibleToColumnIndex: _fnVisibleToColumnIndex,\n    _fnColumnIndexToVisible: _fnColumnIndexToVisible,\n    _fnVisbleColumns: _fnVisbleColumns,\n    _fnGetColumns: _fnGetColumns,\n    _fnColumnTypes: _fnColumnTypes,\n    _fnApplyColumnDefs: _fnApplyColumnDefs,\n    _fnHungarianMap: _fnHungarianMap,\n    _fnCamelToHungarian: _fnCamelToHungarian,\n    _fnLanguageCompat: _fnLanguageCompat,\n    _fnBrowserDetect: _fnBrowserDetect,\n    _fnAddData: _fnAddData,\n    _fnAddTr: _fnAddTr,\n    _fnNodeToDataIndex: _fnNodeToDataIndex,\n    _fnNodeToColumnIndex: _fnNodeToColumnIndex,\n    _fnGetCellData: _fnGetCellData,\n    _fnSetCellData: _fnSetCellData,\n    _fnSplitObjNotation: _fnSplitObjNotation,\n    _fnGetObjectDataFn: _fnGetObjectDataFn,\n    _fnSetObjectDataFn: _fnSetObjectDataFn,\n    _fnGetDataMaster: _fnGetDataMaster,\n    _fnClearTable: _fnClearTable,\n    _fnDeleteIndex: _fnDeleteIndex,\n    _fnInvalidate: _fnInvalidate,\n    _fnGetRowElements: _fnGetRowElements,\n    _fnCreateTr: _fnCreateTr,\n    _fnBuildHead: _fnBuildHead,\n    _fnDrawHead: _fnDrawHead,\n    _fnDraw: _fnDraw,\n    _fnReDraw: _fnReDraw,\n    _fnAddOptionsHtml: _fnAddOptionsHtml,\n    _fnDetectHeader: _fnDetectHeader,\n    _fnGetUniqueThs: _fnGetUniqueThs,\n    _fnFeatureHtmlFilter: _fnFeatureHtmlFilter,\n    _fnFilterComplete: _fnFilterComplete,\n    _fnFilterCustom: _fnFilterCustom,\n    _fnFilterColumn: _fnFilterColumn,\n    _fnFilter: _fnFilter,\n    _fnFilterCreateSearch: _fnFilterCreateSearch,\n    _fnEscapeRegex: _fnEscapeRegex,\n    _fnFilterData: _fnFilterData,\n    _fnFeatureHtmlInfo: _fnFeatureHtmlInfo,\n    _fnUpdateInfo: _fnUpdateInfo,\n    _fnInfoMacros: _fnInfoMacros,\n    _fnInitialise: _fnInitialise,\n    _fnInitComplete: _fnInitComplete,\n    _fnLengthChange: _fnLengthChange,\n    _fnFeatureHtmlLength: _fnFeatureHtmlLength,\n    _fnFeatureHtmlPaginate: _fnFeatureHtmlPaginate,\n    _fnPageChange: _fnPageChange,\n    _fnFeatureHtmlProcessing: _fnFeatureHtmlProcessing,\n    _fnProcessingDisplay: _fnProcessingDisplay,\n    _fnFeatureHtmlTable: _fnFeatureHtmlTable,\n    _fnScrollDraw: _fnScrollDraw,\n    _fnApplyToChildren: _fnApplyToChildren,\n    _fnCalculateColumnWidths: _fnCalculateColumnWidths,\n    _fnThrottle: _fnThrottle,\n    _fnConvertToWidth: _fnConvertToWidth,\n    _fnGetWidestNode: _fnGetWidestNode,\n    _fnGetMaxLenString: _fnGetMaxLenString,\n    _fnStringToCss: _fnStringToCss,\n    _fnSortFlatten: _fnSortFlatten,\n    _fnSort: _fnSort,\n    _fnSortAria: _fnSortAria,\n    _fnSortListener: _fnSortListener,\n    _fnSortAttachListener: _fnSortAttachListener,\n    _fnSortingClasses: _fnSortingClasses,\n    _fnSortData: _fnSortData,\n    _fnSaveState: _fnSaveState,\n    _fnLoadState: _fnLoadState,\n    _fnSettingsFromNode: _fnSettingsFromNode,\n    _fnLog: _fnLog,\n    _fnMap: _fnMap,\n    _fnBindAction: _fnBindAction,\n    _fnCallbackReg: _fnCallbackReg,\n    _fnCallbackFire: _fnCallbackFire,\n    _fnLengthOverflow: _fnLengthOverflow,\n    _fnRenderer: _fnRenderer,\n    _fnDataSource: _fnDataSource,\n    _fnRowAttributes: _fnRowAttributes,\n    _fnExtend: _fnExtend,\n    _fnCalculateEnd: function _fnCalculateEnd() {} // Used by a lot of plug-ins, but redundant\n    // in 1.10, so this dead-end function is\n    // added to prevent errors\n\n  }); // jQuery access\n\n  $.fn.dataTable = DataTable; // Provide access to the host jQuery object (circular reference)\n\n  DataTable.$ = $; // Legacy aliases\n\n  $.fn.dataTableSettings = DataTable.settings;\n  $.fn.dataTableExt = DataTable.ext; // With a capital `D` we return a DataTables API instance rather than a\n  // jQuery object\n\n  $.fn.DataTable = function (opts) {\n    return $(this).dataTable(opts).api();\n  }; // All properties that are available to $.fn.dataTable should also be\n  // available on $.fn.DataTable\n\n\n  $.each(DataTable, function (prop, val) {\n    $.fn.DataTable[prop] = val;\n  }); // Information about events fired by DataTables - for documentation.\n\n  /**\n   * Draw event, fired whenever the table is redrawn on the page, at the same\n   * point as fnDrawCallback. This may be useful for binding events or\n   * performing calculations when the table is altered at all.\n   *  @name DataTable#draw.dt\n   *  @event\n   *  @param {event} e jQuery event object\n   *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}\n   */\n\n  /**\n   * Search event, fired when the searching applied to the table (using the\n   * built-in global search, or column filters) is altered.\n   *  @name DataTable#search.dt\n   *  @event\n   *  @param {event} e jQuery event object\n   *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}\n   */\n\n  /**\n   * Page change event, fired when the paging of the table is altered.\n   *  @name DataTable#page.dt\n   *  @event\n   *  @param {event} e jQuery event object\n   *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}\n   */\n\n  /**\n   * Order event, fired when the ordering applied to the table is altered.\n   *  @name DataTable#order.dt\n   *  @event\n   *  @param {event} e jQuery event object\n   *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}\n   */\n\n  /**\n   * DataTables initialisation complete event, fired when the table is fully\n   * drawn, including Ajax data loaded, if Ajax data is required.\n   *  @name DataTable#init.dt\n   *  @event\n   *  @param {event} e jQuery event object\n   *  @param {object} oSettings DataTables settings object\n   *  @param {object} json The JSON object request from the server - only\n   *    present if client-side Ajax sourced data is used</li></ol>\n   */\n\n  /**\n   * State save event, fired when the table has changed state a new state save\n   * is required. This event allows modification of the state saving object\n   * prior to actually doing the save, including addition or other state\n   * properties (for plug-ins) or modification of a DataTables core property.\n   *  @name DataTable#stateSaveParams.dt\n   *  @event\n   *  @param {event} e jQuery event object\n   *  @param {object} oSettings DataTables settings object\n   *  @param {object} json The state information to be saved\n   */\n\n  /**\n   * State load event, fired when the table is loading state from the stored\n   * data, but prior to the settings object being modified by the saved state\n   * - allowing modification of the saved state is required or loading of\n   * state for a plug-in.\n   *  @name DataTable#stateLoadParams.dt\n   *  @event\n   *  @param {event} e jQuery event object\n   *  @param {object} oSettings DataTables settings object\n   *  @param {object} json The saved state information\n   */\n\n  /**\n   * State loaded event, fired when state has been loaded from stored data and\n   * the settings object has been modified by the loaded data.\n   *  @name DataTable#stateLoaded.dt\n   *  @event\n   *  @param {event} e jQuery event object\n   *  @param {object} oSettings DataTables settings object\n   *  @param {object} json The saved state information\n   */\n\n  /**\n   * Processing event, fired when DataTables is doing some kind of processing\n   * (be it, order, searcg or anything else). It can be used to indicate to\n   * the end user that there is something happening, or that something has\n   * finished.\n   *  @name DataTable#processing.dt\n   *  @event\n   *  @param {event} e jQuery event object\n   *  @param {object} oSettings DataTables settings object\n   *  @param {boolean} bShow Flag for if DataTables is doing processing or not\n   */\n\n  /**\n   * Ajax (XHR) event, fired whenever an Ajax request is completed from a\n   * request to made to the server for new data. This event is called before\n   * DataTables processed the returned data, so it can also be used to pre-\n   * process the data returned from the server, if needed.\n   *\n   * Note that this trigger is called in `fnServerData`, if you override\n   * `fnServerData` and which to use this event, you need to trigger it in you\n   * success function.\n   *  @name DataTable#xhr.dt\n   *  @event\n   *  @param {event} e jQuery event object\n   *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}\n   *  @param {object} json JSON returned from the server\n   *\n   *  @example\n   *     // Use a custom property returned from the server in another DOM element\n   *     $('#table').dataTable().on('xhr.dt', function (e, settings, json) {\n   *       $('#status').html( json.status );\n   *     } );\n   *\n   *  @example\n   *     // Pre-process the data returned from the server\n   *     $('#table').dataTable().on('xhr.dt', function (e, settings, json) {\n   *       for ( var i=0, ien=json.aaData.length ; i<ien ; i++ ) {\n   *         json.aaData[i].sum = json.aaData[i].one + json.aaData[i].two;\n   *       }\n   *       // Note no return - manipulate the data directly in the JSON object.\n   *     } );\n   */\n\n  /**\n   * Destroy event, fired when the DataTable is destroyed by calling fnDestroy\n   * or passing the bDestroy:true parameter in the initialisation object. This\n   * can be used to remove bound events, added DOM nodes, etc.\n   *  @name DataTable#destroy.dt\n   *  @event\n   *  @param {event} e jQuery event object\n   *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}\n   */\n\n  /**\n   * Page length change event, fired when number of records to show on each\n   * page (the length) is changed.\n   *  @name DataTable#length.dt\n   *  @event\n   *  @param {event} e jQuery event object\n   *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}\n   *  @param {integer} len New length\n   */\n\n  /**\n   * Column sizing has changed.\n   *  @name DataTable#column-sizing.dt\n   *  @event\n   *  @param {event} e jQuery event object\n   *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}\n   */\n\n  /**\n   * Column visibility has changed.\n   *  @name DataTable#column-visibility.dt\n   *  @event\n   *  @param {event} e jQuery event object\n   *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}\n   *  @param {int} column Column index\n   *  @param {bool} vis `false` if column now hidden, or `true` if visible\n   */\n\n  return $.fn.dataTable;\n});","/*! DataTables Bootstrap 3 integration\n * ©2011-2015 SpryMedia Ltd - datatables.net/license\n */\n\n/**\n * DataTables integration for Bootstrap 3. This requires Bootstrap 3 and\n * DataTables 1.10 or newer.\n *\n * This file sets the defaults and adds options to DataTables to style its\n * controls using Bootstrap. See http://datatables.net/manual/styling/bootstrap\n * for further information.\n */\n(function (factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD\n    define(['jquery', 'datatables.net'], function ($) {\n      return factory($, window, document);\n    });\n  } else if (typeof exports === 'object') {\n    // CommonJS\n    module.exports = function (root, $) {\n      if (!root) {\n        root = window;\n      }\n\n      if (!$ || !$.fn.dataTable) {\n        // Require DataTables, which attaches to jQuery, including\n        // jQuery if needed and have a $ property so we can access the\n        // jQuery object that is used\n        $ = require('datatables.net')(root, $).$;\n      }\n\n      return factory($, root, root.document);\n    };\n  } else {\n    // Browser\n    factory(jQuery, window, document);\n  }\n})(function ($, window, document, undefined) {\n  'use strict';\n\n  var DataTable = $.fn.dataTable;\n  /* Set the defaults for DataTables initialisation */\n\n  $.extend(true, DataTable.defaults, {\n    dom: \"<'row'<'col-sm-6'l><'col-sm-6'f>>\" + \"<'row'<'col-sm-12'tr>>\" + \"<'row'<'col-sm-5'i><'col-sm-7'p>>\",\n    renderer: 'bootstrap'\n  });\n  /* Default class modification */\n\n  $.extend(DataTable.ext.classes, {\n    sWrapper: \"dataTables_wrapper form-inline dt-bootstrap\",\n    sFilterInput: \"form-control input-sm\",\n    sLengthSelect: \"form-control input-sm\",\n    sProcessing: \"dataTables_processing panel panel-default\"\n  });\n  /* Bootstrap paging button renderer */\n\n  DataTable.ext.renderer.pageButton.bootstrap = function (settings, host, idx, buttons, page, pages) {\n    var api = new DataTable.Api(settings);\n    var classes = settings.oClasses;\n    var lang = settings.oLanguage.oPaginate;\n    var aria = settings.oLanguage.oAria.paginate || {};\n    var btnDisplay,\n        btnClass,\n        counter = 0;\n\n    var attach = function attach(container, buttons) {\n      var i, ien, node, button;\n\n      var clickHandler = function clickHandler(e) {\n        e.preventDefault();\n\n        if (!$(e.currentTarget).hasClass('disabled') && api.page() != e.data.action) {\n          api.page(e.data.action).draw('page');\n        }\n      };\n\n      for (i = 0, ien = buttons.length; i < ien; i++) {\n        button = buttons[i];\n\n        if ($.isArray(button)) {\n          attach(container, button);\n        } else {\n          btnDisplay = '';\n          btnClass = '';\n\n          switch (button) {\n            case 'ellipsis':\n              btnDisplay = '&#x2026;';\n              btnClass = 'disabled';\n              break;\n\n            case 'first':\n              btnDisplay = lang.sFirst;\n              btnClass = button + (page > 0 ? '' : ' disabled');\n              break;\n\n            case 'previous':\n              btnDisplay = lang.sPrevious;\n              btnClass = button + (page > 0 ? '' : ' disabled');\n              break;\n\n            case 'next':\n              btnDisplay = lang.sNext;\n              btnClass = button + (page < pages - 1 ? '' : ' disabled');\n              break;\n\n            case 'last':\n              btnDisplay = lang.sLast;\n              btnClass = button + (page < pages - 1 ? '' : ' disabled');\n              break;\n\n            default:\n              btnDisplay = button + 1;\n              btnClass = page === button ? 'active' : '';\n              break;\n          }\n\n          if (btnDisplay) {\n            node = $('<li>', {\n              'class': classes.sPageButton + ' ' + btnClass,\n              'id': idx === 0 && typeof button === 'string' ? settings.sTableId + '_' + button : null\n            }).append($('<a>', {\n              'href': '#',\n              'aria-controls': settings.sTableId,\n              'aria-label': aria[button],\n              'data-dt-idx': counter,\n              'tabindex': settings.iTabIndex\n            }).html(btnDisplay)).appendTo(container);\n\n            settings.oApi._fnBindAction(node, {\n              action: button\n            }, clickHandler);\n\n            counter++;\n          }\n        }\n      }\n    }; // IE9 throws an 'unknown error' if document.activeElement is used\n    // inside an iframe or frame. \n\n\n    var activeEl;\n\n    try {\n      // Because this approach is destroying and recreating the paging\n      // elements, focus is lost on the select button which is bad for\n      // accessibility. So we want to restore focus once the draw has\n      // completed\n      activeEl = $(host).find(document.activeElement).data('dt-idx');\n    } catch (e) {}\n\n    attach($(host).empty().html('<ul class=\"pagination\"/>').children('ul'), buttons);\n\n    if (activeEl !== undefined) {\n      $(host).find('[data-dt-idx=' + activeEl + ']').focus();\n    }\n  };\n\n  return DataTable;\n});","/*! Buttons for DataTables 1.5.4\n * ©2016-2018 SpryMedia Ltd - datatables.net/license\n */\n(function (factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD\n    define(['jquery', 'datatables.net'], function ($) {\n      return factory($, window, document);\n    });\n  } else if (typeof exports === 'object') {\n    // CommonJS\n    module.exports = function (root, $) {\n      if (!root) {\n        root = window;\n      }\n\n      if (!$ || !$.fn.dataTable) {\n        $ = require('datatables.net')(root, $).$;\n      }\n\n      return factory($, root, root.document);\n    };\n  } else {\n    // Browser\n    factory(jQuery, window, document);\n  }\n})(function ($, window, document, undefined) {\n  'use strict';\n\n  var DataTable = $.fn.dataTable; // Used for namespacing events added to the document by each instance, so they\n  // can be removed on destroy\n\n  var _instCounter = 0; // Button namespacing counter for namespacing events on individual buttons\n\n  var _buttonCounter = 0;\n  var _dtButtons = DataTable.ext.buttons;\n  /**\n   * [Buttons description]\n   * @param {[type]}\n   * @param {[type]}\n   */\n\n  var Buttons = function Buttons(dt, config) {\n    // If there is no config set it to an empty object\n    if (typeof config === 'undefined') {\n      config = {};\n    } // Allow a boolean true for defaults\n\n\n    if (config === true) {\n      config = {};\n    } // For easy configuration of buttons an array can be given\n\n\n    if ($.isArray(config)) {\n      config = {\n        buttons: config\n      };\n    }\n\n    this.c = $.extend(true, {}, Buttons.defaults, config); // Don't want a deep copy for the buttons\n\n    if (config.buttons) {\n      this.c.buttons = config.buttons;\n    }\n\n    this.s = {\n      dt: new DataTable.Api(dt),\n      buttons: [],\n      listenKeys: '',\n      namespace: 'dtb' + _instCounter++\n    };\n    this.dom = {\n      container: $('<' + this.c.dom.container.tag + '/>').addClass(this.c.dom.container.className)\n    };\n\n    this._constructor();\n  };\n\n  $.extend(Buttons.prototype, {\n    /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n     * Public methods\n     */\n\n    /**\n     * Get the action of a button\n     * @param  {int|string} Button index\n     * @return {function}\n     */\n\n    /**\n    * Set the action of a button\n    * @param  {node} node Button element\n    * @param  {function} action Function to set\n    * @return {Buttons} Self for chaining\n    */\n    action: function action(node, _action) {\n      var button = this._nodeToButton(node);\n\n      if (_action === undefined) {\n        return button.conf.action;\n      }\n\n      button.conf.action = _action;\n      return this;\n    },\n\n    /**\n     * Add an active class to the button to make to look active or get current\n     * active state.\n     * @param  {node} node Button element\n     * @param  {boolean} [flag] Enable / disable flag\n     * @return {Buttons} Self for chaining or boolean for getter\n     */\n    active: function active(node, flag) {\n      var button = this._nodeToButton(node);\n\n      var klass = this.c.dom.button.active;\n      var jqNode = $(button.node);\n\n      if (flag === undefined) {\n        return jqNode.hasClass(klass);\n      }\n\n      jqNode.toggleClass(klass, flag === undefined ? true : flag);\n      return this;\n    },\n\n    /**\n     * Add a new button\n     * @param {object} config Button configuration object, base string name or function\n     * @param {int|string} [idx] Button index for where to insert the button\n     * @return {Buttons} Self for chaining\n     */\n    add: function add(config, idx) {\n      var buttons = this.s.buttons;\n\n      if (typeof idx === 'string') {\n        var split = idx.split('-');\n        var base = this.s;\n\n        for (var i = 0, ien = split.length - 1; i < ien; i++) {\n          base = base.buttons[split[i] * 1];\n        }\n\n        buttons = base.buttons;\n        idx = split[split.length - 1] * 1;\n      }\n\n      this._expandButton(buttons, config, false, idx);\n\n      this._draw();\n\n      return this;\n    },\n\n    /**\n     * Get the container node for the buttons\n     * @return {jQuery} Buttons node\n     */\n    container: function container() {\n      return this.dom.container;\n    },\n\n    /**\n     * Disable a button\n     * @param  {node} node Button node\n     * @return {Buttons} Self for chaining\n     */\n    disable: function disable(node) {\n      var button = this._nodeToButton(node);\n\n      $(button.node).addClass(this.c.dom.button.disabled);\n      return this;\n    },\n\n    /**\n     * Destroy the instance, cleaning up event handlers and removing DOM\n     * elements\n     * @return {Buttons} Self for chaining\n     */\n    destroy: function destroy() {\n      // Key event listener\n      $('body').off('keyup.' + this.s.namespace); // Individual button destroy (so they can remove their own events if\n      // needed). Take a copy as the array is modified by `remove`\n\n      var buttons = this.s.buttons.slice();\n      var i, ien;\n\n      for (i = 0, ien = buttons.length; i < ien; i++) {\n        this.remove(buttons[i].node);\n      } // Container\n\n\n      this.dom.container.remove(); // Remove from the settings object collection\n\n      var buttonInsts = this.s.dt.settings()[0];\n\n      for (i = 0, ien = buttonInsts.length; i < ien; i++) {\n        if (buttonInsts.inst === this) {\n          buttonInsts.splice(i, 1);\n          break;\n        }\n      }\n\n      return this;\n    },\n\n    /**\n     * Enable / disable a button\n     * @param  {node} node Button node\n     * @param  {boolean} [flag=true] Enable / disable flag\n     * @return {Buttons} Self for chaining\n     */\n    enable: function enable(node, flag) {\n      if (flag === false) {\n        return this.disable(node);\n      }\n\n      var button = this._nodeToButton(node);\n\n      $(button.node).removeClass(this.c.dom.button.disabled);\n      return this;\n    },\n\n    /**\n     * Get the instance name for the button set selector\n     * @return {string} Instance name\n     */\n    name: function name() {\n      return this.c.name;\n    },\n\n    /**\n     * Get a button's node\n     * @param  {node} node Button node\n     * @return {jQuery} Button element\n     */\n    node: function node(_node) {\n      var button = this._nodeToButton(_node);\n\n      return $(button.node);\n    },\n\n    /**\n     * Set / get a processing class on the selected button\n     * @param  {boolean} flag true to add, false to remove, undefined to get\n     * @return {boolean|Buttons} Getter value or this if a setter.\n     */\n    processing: function processing(node, flag) {\n      var button = this._nodeToButton(node);\n\n      if (flag === undefined) {\n        return $(button.node).hasClass('processing');\n      }\n\n      $(button.node).toggleClass('processing', flag);\n      return this;\n    },\n\n    /**\n     * Remove a button.\n     * @param  {node} node Button node\n     * @return {Buttons} Self for chaining\n     */\n    remove: function remove(node) {\n      var button = this._nodeToButton(node);\n\n      var host = this._nodeToHost(node);\n\n      var dt = this.s.dt; // Remove any child buttons first\n\n      if (button.buttons.length) {\n        for (var i = button.buttons.length - 1; i >= 0; i--) {\n          this.remove(button.buttons[i].node);\n        }\n      } // Allow the button to remove event handlers, etc\n\n\n      if (button.conf.destroy) {\n        button.conf.destroy.call(dt.button(node), dt, $(node), button.conf);\n      }\n\n      this._removeKey(button.conf);\n\n      $(button.node).remove();\n      var idx = $.inArray(button, host);\n      host.splice(idx, 1);\n      return this;\n    },\n\n    /**\n     * Get the text for a button\n     * @param  {int|string} node Button index\n     * @return {string} Button text\n     */\n\n    /**\n    * Set the text for a button\n    * @param  {int|string|function} node Button index\n    * @param  {string} label Text\n    * @return {Buttons} Self for chaining\n    */\n    text: function text(node, label) {\n      var button = this._nodeToButton(node);\n\n      var buttonLiner = this.c.dom.collection.buttonLiner;\n      var linerTag = button.inCollection && buttonLiner && buttonLiner.tag ? buttonLiner.tag : this.c.dom.buttonLiner.tag;\n      var dt = this.s.dt;\n      var jqNode = $(button.node);\n\n      var text = function text(opt) {\n        return typeof opt === 'function' ? opt(dt, jqNode, button.conf) : opt;\n      };\n\n      if (label === undefined) {\n        return text(button.conf.text);\n      }\n\n      button.conf.text = label;\n\n      if (linerTag) {\n        jqNode.children(linerTag).html(text(label));\n      } else {\n        jqNode.html(text(label));\n      }\n\n      return this;\n    },\n\n    /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n     * Constructor\n     */\n\n    /**\n     * Buttons constructor\n     * @private\n     */\n    _constructor: function _constructor() {\n      var that = this;\n      var dt = this.s.dt;\n      var dtSettings = dt.settings()[0];\n      var buttons = this.c.buttons;\n\n      if (!dtSettings._buttons) {\n        dtSettings._buttons = [];\n      }\n\n      dtSettings._buttons.push({\n        inst: this,\n        name: this.c.name\n      });\n\n      for (var i = 0, ien = buttons.length; i < ien; i++) {\n        this.add(buttons[i]);\n      }\n\n      dt.on('destroy', function (e, settings) {\n        if (settings === dtSettings) {\n          that.destroy();\n        }\n      }); // Global key event binding to listen for button keys\n\n      $('body').on('keyup.' + this.s.namespace, function (e) {\n        if (!document.activeElement || document.activeElement === document.body) {\n          // SUse a string of characters for fast lookup of if we need to\n          // handle this\n          var character = String.fromCharCode(e.keyCode).toLowerCase();\n\n          if (that.s.listenKeys.toLowerCase().indexOf(character) !== -1) {\n            that._keypress(character, e);\n          }\n        }\n      });\n    },\n\n    /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n     * Private methods\n     */\n\n    /**\n     * Add a new button to the key press listener\n     * @param {object} conf Resolved button configuration object\n     * @private\n     */\n    _addKey: function _addKey(conf) {\n      if (conf.key) {\n        this.s.listenKeys += $.isPlainObject(conf.key) ? conf.key.key : conf.key;\n      }\n    },\n\n    /**\n     * Insert the buttons into the container. Call without parameters!\n     * @param  {node} [container] Recursive only - Insert point\n     * @param  {array} [buttons] Recursive only - Buttons array\n     * @private\n     */\n    _draw: function _draw(container, buttons) {\n      if (!container) {\n        container = this.dom.container;\n        buttons = this.s.buttons;\n      }\n\n      container.children().detach();\n\n      for (var i = 0, ien = buttons.length; i < ien; i++) {\n        container.append(buttons[i].inserter);\n        container.append(' ');\n\n        if (buttons[i].buttons && buttons[i].buttons.length) {\n          this._draw(buttons[i].collection, buttons[i].buttons);\n        }\n      }\n    },\n\n    /**\n     * Create buttons from an array of buttons\n     * @param  {array} attachTo Buttons array to attach to\n     * @param  {object} button Button definition\n     * @param  {boolean} inCollection true if the button is in a collection\n     * @private\n     */\n    _expandButton: function _expandButton(attachTo, button, inCollection, attachPoint) {\n      var dt = this.s.dt;\n      var buttonCounter = 0;\n      var buttons = !$.isArray(button) ? [button] : button;\n\n      for (var i = 0, ien = buttons.length; i < ien; i++) {\n        var conf = this._resolveExtends(buttons[i]);\n\n        if (!conf) {\n          continue;\n        } // If the configuration is an array, then expand the buttons at this\n        // point\n\n\n        if ($.isArray(conf)) {\n          this._expandButton(attachTo, conf, inCollection, attachPoint);\n\n          continue;\n        }\n\n        var built = this._buildButton(conf, inCollection);\n\n        if (!built) {\n          continue;\n        }\n\n        if (attachPoint !== undefined) {\n          attachTo.splice(attachPoint, 0, built);\n          attachPoint++;\n        } else {\n          attachTo.push(built);\n        }\n\n        if (built.conf.buttons) {\n          var collectionDom = this.c.dom.collection;\n          built.collection = $('<' + collectionDom.tag + '/>').addClass(collectionDom.className).attr('role', 'menu');\n          built.conf._collection = built.collection;\n\n          this._expandButton(built.buttons, built.conf.buttons, true, attachPoint);\n        } // init call is made here, rather than buildButton as it needs to\n        // be selectable, and for that it needs to be in the buttons array\n\n\n        if (conf.init) {\n          conf.init.call(dt.button(built.node), dt, $(built.node), conf);\n        }\n\n        buttonCounter++;\n      }\n    },\n\n    /**\n     * Create an individual button\n     * @param  {object} config            Resolved button configuration\n     * @param  {boolean} inCollection `true` if a collection button\n     * @return {jQuery} Created button node (jQuery)\n     * @private\n     */\n    _buildButton: function _buildButton(config, inCollection) {\n      var buttonDom = this.c.dom.button;\n      var linerDom = this.c.dom.buttonLiner;\n      var collectionDom = this.c.dom.collection;\n      var dt = this.s.dt;\n\n      var text = function text(opt) {\n        return typeof opt === 'function' ? opt(dt, button, config) : opt;\n      };\n\n      if (inCollection && collectionDom.button) {\n        buttonDom = collectionDom.button;\n      }\n\n      if (inCollection && collectionDom.buttonLiner) {\n        linerDom = collectionDom.buttonLiner;\n      } // Make sure that the button is available based on whatever requirements\n      // it has. For example, Flash buttons require Flash\n\n\n      if (config.available && !config.available(dt, config)) {\n        return false;\n      }\n\n      var action = function action(e, dt, button, config) {\n        config.action.call(dt.button(button), e, dt, button, config);\n        $(dt.table().node()).triggerHandler('buttons-action.dt', [dt.button(button), dt, button, config]);\n      };\n\n      var tag = config.tag || buttonDom.tag;\n      var button = $('<' + tag + '/>').addClass(buttonDom.className).attr('tabindex', this.s.dt.settings()[0].iTabIndex).attr('aria-controls', this.s.dt.table().node().id).on('click.dtb', function (e) {\n        e.preventDefault();\n\n        if (!button.hasClass(buttonDom.disabled) && config.action) {\n          action(e, dt, button, config);\n        }\n\n        button.blur();\n      }).on('keyup.dtb', function (e) {\n        if (e.keyCode === 13) {\n          if (!button.hasClass(buttonDom.disabled) && config.action) {\n            action(e, dt, button, config);\n          }\n        }\n      }); // Make `a` tags act like a link\n\n      if (tag.toLowerCase() === 'a') {\n        button.attr('href', '#');\n      } // Button tags should have `type=button` so they don't have any default behaviour\n\n\n      if (tag.toLowerCase() === 'button') {\n        button.attr('type', 'button');\n      }\n\n      if (linerDom.tag) {\n        var liner = $('<' + linerDom.tag + '/>').html(text(config.text)).addClass(linerDom.className);\n\n        if (linerDom.tag.toLowerCase() === 'a') {\n          liner.attr('href', '#');\n        }\n\n        button.append(liner);\n      } else {\n        button.html(text(config.text));\n      }\n\n      if (config.enabled === false) {\n        button.addClass(buttonDom.disabled);\n      }\n\n      if (config.className) {\n        button.addClass(config.className);\n      }\n\n      if (config.titleAttr) {\n        button.attr('title', text(config.titleAttr));\n      }\n\n      if (config.attr) {\n        button.attr(config.attr);\n      }\n\n      if (!config.namespace) {\n        config.namespace = '.dt-button-' + _buttonCounter++;\n      }\n\n      var buttonContainer = this.c.dom.buttonContainer;\n      var inserter;\n\n      if (buttonContainer && buttonContainer.tag) {\n        inserter = $('<' + buttonContainer.tag + '/>').addClass(buttonContainer.className).append(button);\n      } else {\n        inserter = button;\n      }\n\n      this._addKey(config);\n\n      return {\n        conf: config,\n        node: button.get(0),\n        inserter: inserter,\n        buttons: [],\n        inCollection: inCollection,\n        collection: null\n      };\n    },\n\n    /**\n     * Get the button object from a node (recursive)\n     * @param  {node} node Button node\n     * @param  {array} [buttons] Button array, uses base if not defined\n     * @return {object} Button object\n     * @private\n     */\n    _nodeToButton: function _nodeToButton(node, buttons) {\n      if (!buttons) {\n        buttons = this.s.buttons;\n      }\n\n      for (var i = 0, ien = buttons.length; i < ien; i++) {\n        if (buttons[i].node === node) {\n          return buttons[i];\n        }\n\n        if (buttons[i].buttons.length) {\n          var ret = this._nodeToButton(node, buttons[i].buttons);\n\n          if (ret) {\n            return ret;\n          }\n        }\n      }\n    },\n\n    /**\n     * Get container array for a button from a button node (recursive)\n     * @param  {node} node Button node\n     * @param  {array} [buttons] Button array, uses base if not defined\n     * @return {array} Button's host array\n     * @private\n     */\n    _nodeToHost: function _nodeToHost(node, buttons) {\n      if (!buttons) {\n        buttons = this.s.buttons;\n      }\n\n      for (var i = 0, ien = buttons.length; i < ien; i++) {\n        if (buttons[i].node === node) {\n          return buttons;\n        }\n\n        if (buttons[i].buttons.length) {\n          var ret = this._nodeToHost(node, buttons[i].buttons);\n\n          if (ret) {\n            return ret;\n          }\n        }\n      }\n    },\n\n    /**\n     * Handle a key press - determine if any button's key configured matches\n     * what was typed and trigger the action if so.\n     * @param  {string} character The character pressed\n     * @param  {object} e Key event that triggered this call\n     * @private\n     */\n    _keypress: function _keypress(character, e) {\n      // Check if this button press already activated on another instance of Buttons\n      if (e._buttonsHandled) {\n        return;\n      }\n\n      var run = function run(conf, node) {\n        if (!conf.key) {\n          return;\n        }\n\n        if (conf.key === character) {\n          e._buttonsHandled = true;\n          $(node).click();\n        } else if ($.isPlainObject(conf.key)) {\n          if (conf.key.key !== character) {\n            return;\n          }\n\n          if (conf.key.shiftKey && !e.shiftKey) {\n            return;\n          }\n\n          if (conf.key.altKey && !e.altKey) {\n            return;\n          }\n\n          if (conf.key.ctrlKey && !e.ctrlKey) {\n            return;\n          }\n\n          if (conf.key.metaKey && !e.metaKey) {\n            return;\n          } // Made it this far - it is good\n\n\n          e._buttonsHandled = true;\n          $(node).click();\n        }\n      };\n\n      var recurse = function recurse(a) {\n        for (var i = 0, ien = a.length; i < ien; i++) {\n          run(a[i].conf, a[i].node);\n\n          if (a[i].buttons.length) {\n            recurse(a[i].buttons);\n          }\n        }\n      };\n\n      recurse(this.s.buttons);\n    },\n\n    /**\n     * Remove a key from the key listener for this instance (to be used when a\n     * button is removed)\n     * @param  {object} conf Button configuration\n     * @private\n     */\n    _removeKey: function _removeKey(conf) {\n      if (conf.key) {\n        var character = $.isPlainObject(conf.key) ? conf.key.key : conf.key; // Remove only one character, as multiple buttons could have the\n        // same listening key\n\n        var a = this.s.listenKeys.split('');\n        var idx = $.inArray(character, a);\n        a.splice(idx, 1);\n        this.s.listenKeys = a.join('');\n      }\n    },\n\n    /**\n     * Resolve a button configuration\n     * @param  {string|function|object} conf Button config to resolve\n     * @return {object} Button configuration\n     * @private\n     */\n    _resolveExtends: function _resolveExtends(conf) {\n      var dt = this.s.dt;\n      var i, ien;\n\n      var toConfObject = function toConfObject(base) {\n        var loop = 0; // Loop until we have resolved to a button configuration, or an\n        // array of button configurations (which will be iterated\n        // separately)\n\n        while (!$.isPlainObject(base) && !$.isArray(base)) {\n          if (base === undefined) {\n            return;\n          }\n\n          if (typeof base === 'function') {\n            base = base(dt, conf);\n\n            if (!base) {\n              return false;\n            }\n          } else if (typeof base === 'string') {\n            if (!_dtButtons[base]) {\n              throw 'Unknown button type: ' + base;\n            }\n\n            base = _dtButtons[base];\n          }\n\n          loop++;\n\n          if (loop > 30) {\n            // Protect against misconfiguration killing the browser\n            throw 'Buttons: Too many iterations';\n          }\n        }\n\n        return $.isArray(base) ? base : $.extend({}, base);\n      };\n\n      conf = toConfObject(conf);\n\n      while (conf && conf.extend) {\n        // Use `toConfObject` in case the button definition being extended\n        // is itself a string or a function\n        if (!_dtButtons[conf.extend]) {\n          throw 'Cannot extend unknown button type: ' + conf.extend;\n        }\n\n        var objArray = toConfObject(_dtButtons[conf.extend]);\n\n        if ($.isArray(objArray)) {\n          return objArray;\n        } else if (!objArray) {\n          // This is a little brutal as it might be possible to have a\n          // valid button without the extend, but if there is no extend\n          // then the host button would be acting in an undefined state\n          return false;\n        } // Stash the current class name\n\n\n        var originalClassName = objArray.className;\n        conf = $.extend({}, objArray, conf); // The extend will have overwritten the original class name if the\n        // `conf` object also assigned a class, but we want to concatenate\n        // them so they are list that is combined from all extended buttons\n\n        if (originalClassName && conf.className !== originalClassName) {\n          conf.className = originalClassName + ' ' + conf.className;\n        } // Buttons to be added to a collection  -gives the ability to define\n        // if buttons should be added to the start or end of a collection\n\n\n        var postfixButtons = conf.postfixButtons;\n\n        if (postfixButtons) {\n          if (!conf.buttons) {\n            conf.buttons = [];\n          }\n\n          for (i = 0, ien = postfixButtons.length; i < ien; i++) {\n            conf.buttons.push(postfixButtons[i]);\n          }\n\n          conf.postfixButtons = null;\n        }\n\n        var prefixButtons = conf.prefixButtons;\n\n        if (prefixButtons) {\n          if (!conf.buttons) {\n            conf.buttons = [];\n          }\n\n          for (i = 0, ien = prefixButtons.length; i < ien; i++) {\n            conf.buttons.splice(i, 0, prefixButtons[i]);\n          }\n\n          conf.prefixButtons = null;\n        } // Although we want the `conf` object to overwrite almost all of\n        // the properties of the object being extended, the `extend`\n        // property should come from the object being extended\n\n\n        conf.extend = objArray.extend;\n      }\n\n      return conf;\n    }\n  });\n  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n   * Statics\n   */\n\n  /**\n   * Show / hide a background layer behind a collection\n   * @param  {boolean} Flag to indicate if the background should be shown or\n   *   hidden \n   * @param  {string} Class to assign to the background\n   * @static\n   */\n\n  Buttons.background = function (show, className, fade, insertPoint) {\n    if (fade === undefined) {\n      fade = 400;\n    }\n\n    if (!insertPoint) {\n      insertPoint = document.body;\n    }\n\n    if (show) {\n      $('<div/>').addClass(className).css('display', 'none').insertAfter(insertPoint).fadeIn(fade);\n    } else {\n      $('div.' + className).fadeOut(fade, function () {\n        $(this).removeClass(className).remove();\n      });\n    }\n  };\n  /**\n   * Instance selector - select Buttons instances based on an instance selector\n   * value from the buttons assigned to a DataTable. This is only useful if\n   * multiple instances are attached to a DataTable.\n   * @param  {string|int|array} Instance selector - see `instance-selector`\n   *   documentation on the DataTables site\n   * @param  {array} Button instance array that was attached to the DataTables\n   *   settings object\n   * @return {array} Buttons instances\n   * @static\n   */\n\n\n  Buttons.instanceSelector = function (group, buttons) {\n    if (!group) {\n      return $.map(buttons, function (v) {\n        return v.inst;\n      });\n    }\n\n    var ret = [];\n    var names = $.map(buttons, function (v) {\n      return v.name;\n    }); // Flatten the group selector into an array of single options\n\n    var process = function process(input) {\n      if ($.isArray(input)) {\n        for (var i = 0, ien = input.length; i < ien; i++) {\n          process(input[i]);\n        }\n\n        return;\n      }\n\n      if (typeof input === 'string') {\n        if (input.indexOf(',') !== -1) {\n          // String selector, list of names\n          process(input.split(','));\n        } else {\n          // String selector individual name\n          var idx = $.inArray($.trim(input), names);\n\n          if (idx !== -1) {\n            ret.push(buttons[idx].inst);\n          }\n        }\n      } else if (typeof input === 'number') {\n        // Index selector\n        ret.push(buttons[input].inst);\n      }\n    };\n\n    process(group);\n    return ret;\n  };\n  /**\n   * Button selector - select one or more buttons from a selector input so some\n   * operation can be performed on them.\n   * @param  {array} Button instances array that the selector should operate on\n   * @param  {string|int|node|jQuery|array} Button selector - see\n   *   `button-selector` documentation on the DataTables site\n   * @return {array} Array of objects containing `inst` and `idx` properties of\n   *   the selected buttons so you know which instance each button belongs to.\n   * @static\n   */\n\n\n  Buttons.buttonSelector = function (insts, selector) {\n    var ret = [];\n\n    var nodeBuilder = function nodeBuilder(a, buttons, baseIdx) {\n      var button;\n      var idx;\n\n      for (var i = 0, ien = buttons.length; i < ien; i++) {\n        button = buttons[i];\n\n        if (button) {\n          idx = baseIdx !== undefined ? baseIdx + i : i + '';\n          a.push({\n            node: button.node,\n            name: button.conf.name,\n            idx: idx\n          });\n\n          if (button.buttons) {\n            nodeBuilder(a, button.buttons, idx + '-');\n          }\n        }\n      }\n    };\n\n    var run = function run(selector, inst) {\n      var i, ien;\n      var buttons = [];\n      nodeBuilder(buttons, inst.s.buttons);\n      var nodes = $.map(buttons, function (v) {\n        return v.node;\n      });\n\n      if ($.isArray(selector) || selector instanceof $) {\n        for (i = 0, ien = selector.length; i < ien; i++) {\n          run(selector[i], inst);\n        }\n\n        return;\n      }\n\n      if (selector === null || selector === undefined || selector === '*') {\n        // Select all\n        for (i = 0, ien = buttons.length; i < ien; i++) {\n          ret.push({\n            inst: inst,\n            node: buttons[i].node\n          });\n        }\n      } else if (typeof selector === 'number') {\n        // Main button index selector\n        ret.push({\n          inst: inst,\n          node: inst.s.buttons[selector].node\n        });\n      } else if (typeof selector === 'string') {\n        if (selector.indexOf(',') !== -1) {\n          // Split\n          var a = selector.split(',');\n\n          for (i = 0, ien = a.length; i < ien; i++) {\n            run($.trim(a[i]), inst);\n          }\n        } else if (selector.match(/^\\d+(\\-\\d+)*$/)) {\n          // Sub-button index selector\n          var indexes = $.map(buttons, function (v) {\n            return v.idx;\n          });\n          ret.push({\n            inst: inst,\n            node: buttons[$.inArray(selector, indexes)].node\n          });\n        } else if (selector.indexOf(':name') !== -1) {\n          // Button name selector\n          var name = selector.replace(':name', '');\n\n          for (i = 0, ien = buttons.length; i < ien; i++) {\n            if (buttons[i].name === name) {\n              ret.push({\n                inst: inst,\n                node: buttons[i].node\n              });\n            }\n          }\n        } else {\n          // jQuery selector on the nodes\n          $(nodes).filter(selector).each(function () {\n            ret.push({\n              inst: inst,\n              node: this\n            });\n          });\n        }\n      } else if (typeof selector === 'object' && selector.nodeName) {\n        // Node selector\n        var idx = $.inArray(selector, nodes);\n\n        if (idx !== -1) {\n          ret.push({\n            inst: inst,\n            node: nodes[idx]\n          });\n        }\n      }\n    };\n\n    for (var i = 0, ien = insts.length; i < ien; i++) {\n      var inst = insts[i];\n      run(selector, inst);\n    }\n\n    return ret;\n  };\n  /**\n   * Buttons defaults. For full documentation, please refer to the docs/option\n   * directory or the DataTables site.\n   * @type {Object}\n   * @static\n   */\n\n\n  Buttons.defaults = {\n    buttons: ['copy', 'excel', 'csv', 'pdf', 'print'],\n    name: 'main',\n    tabIndex: 0,\n    dom: {\n      container: {\n        tag: 'div',\n        className: 'dt-buttons'\n      },\n      collection: {\n        tag: 'div',\n        className: 'dt-button-collection'\n      },\n      button: {\n        // Flash buttons will not work with `<button>` in IE - it has to be `<a>`\n        tag: 'ActiveXObject' in window ? 'a' : 'button',\n        className: 'dt-button',\n        active: 'active',\n        disabled: 'disabled'\n      },\n      buttonLiner: {\n        tag: 'span',\n        className: ''\n      }\n    }\n  };\n  /**\n   * Version information\n   * @type {string}\n   * @static\n   */\n\n  Buttons.version = '1.5.4';\n  $.extend(_dtButtons, {\n    collection: {\n      text: function text(dt) {\n        return dt.i18n('buttons.collection', 'Collection');\n      },\n      className: 'buttons-collection',\n      action: function action(e, dt, button, config) {\n        var host = button;\n        var collectionParent = $(button).parents('div.dt-button-collection');\n        var hostPosition = host.position();\n        var tableContainer = $(dt.table().container());\n        var multiLevel = false;\n        var insertPoint = host; // Remove any old collection\n\n        if (collectionParent.length) {\n          multiLevel = $('.dt-button-collection').position();\n          insertPoint = collectionParent;\n          $('body').trigger('click.dtb-collection');\n        }\n\n        if (insertPoint.parents('body')[0] !== document.body) {\n          insertPoint = document.body.lastChild;\n        }\n\n        config._collection.find('.dt-button-collection-title').remove();\n\n        config._collection.prepend('<div class=\"dt-button-collection-title\">' + config.collectionTitle + '</div>');\n\n        config._collection.addClass(config.collectionLayout).css('display', 'none').insertAfter(insertPoint).fadeIn(config.fade);\n\n        var position = config._collection.css('position');\n\n        if (multiLevel && position === 'absolute') {\n          config._collection.css({\n            top: multiLevel.top,\n            left: multiLevel.left\n          });\n        } else if (position === 'absolute') {\n          config._collection.css({\n            top: hostPosition.top + host.outerHeight(),\n            left: hostPosition.left\n          }); // calculate overflow when positioned beneath\n\n\n          var tableBottom = tableContainer.offset().top + tableContainer.height();\n\n          var listBottom = hostPosition.top + host.outerHeight() + config._collection.outerHeight();\n\n          var bottomOverflow = listBottom - tableBottom; // calculate overflow when positioned above\n\n          var listTop = hostPosition.top - config._collection.outerHeight();\n\n          var tableTop = tableContainer.offset().top;\n          var topOverflow = tableTop - listTop; // if bottom overflow is larger, move to the top because it fits better, or if dropup is requested\n\n          if (bottomOverflow > topOverflow || config.dropup) {\n            config._collection.css('top', hostPosition.top - config._collection.outerHeight() - 5);\n          } // Right alignment is enabled on a class, e.g. bootstrap:\n          // $.fn.dataTable.Buttons.defaults.dom.collection.className += \" dropdown-menu-right\"; \n\n\n          if (config._collection.hasClass(config.rightAlignClassName)) {\n            config._collection.css('left', hostPosition.left + host.outerWidth() - config._collection.outerWidth());\n          } // Right alignment in table container\n\n\n          var listRight = hostPosition.left + config._collection.outerWidth();\n\n          var tableRight = tableContainer.offset().left + tableContainer.width();\n\n          if (listRight > tableRight) {\n            config._collection.css('left', hostPosition.left - (listRight - tableRight));\n          } // Right alignment to window\n\n\n          var listOffsetRight = host.offset().left + config._collection.outerWidth();\n\n          if (listOffsetRight > $(window).width()) {\n            config._collection.css('left', hostPosition.left - (listOffsetRight - $(window).width()));\n          }\n        } else {\n          // Fix position - centre on screen\n          var top = config._collection.height() / 2;\n\n          if (top > $(window).height() / 2) {\n            top = $(window).height() / 2;\n          }\n\n          config._collection.css('marginTop', top * -1);\n        }\n\n        if (config.background) {\n          Buttons.background(true, config.backgroundClassName, config.fade, insertPoint);\n        }\n\n        var close = function close() {\n          config._collection.fadeOut(config.fade, function () {\n            config._collection.detach();\n          });\n\n          $('div.dt-button-background').off('click.dtb-collection');\n          Buttons.background(false, config.backgroundClassName, config.fade, insertPoint);\n          $('body').off('.dtb-collection');\n          dt.off('buttons-action.b-internal');\n        }; // Need to break the 'thread' for the collection button being\n        // activated by a click - it would also trigger this event\n\n\n        setTimeout(function () {\n          // This is bonkers, but if we don't have a click listener on the\n          // background element, iOS Safari will ignore the body click\n          // listener below. An empty function here is all that is\n          // required to make it work...\n          $('div.dt-button-background').on('click.dtb-collection', function () {});\n          $('body').on('click.dtb-collection', function (e) {\n            // andSelf is deprecated in jQ1.8, but we want 1.7 compat\n            var back = $.fn.addBack ? 'addBack' : 'andSelf';\n\n            if (!$(e.target).parents()[back]().filter(config._collection).length) {\n              close();\n            }\n          }).on('keyup.dtb-collection', function (e) {\n            if (e.keyCode === 27) {\n              close();\n            }\n          });\n\n          if (config.autoClose) {\n            dt.on('buttons-action.b-internal', function () {\n              close();\n            });\n          }\n        }, 10);\n      },\n      background: true,\n      collectionLayout: '',\n      collectionTitle: '',\n      backgroundClassName: 'dt-button-background',\n      rightAlignClassName: 'dt-button-right',\n      autoClose: false,\n      fade: 400,\n      attr: {\n        'aria-haspopup': true\n      }\n    },\n    copy: function copy(dt, conf) {\n      if (_dtButtons.copyHtml5) {\n        return 'copyHtml5';\n      }\n\n      if (_dtButtons.copyFlash && _dtButtons.copyFlash.available(dt, conf)) {\n        return 'copyFlash';\n      }\n    },\n    csv: function csv(dt, conf) {\n      // Common option that will use the HTML5 or Flash export buttons\n      if (_dtButtons.csvHtml5 && _dtButtons.csvHtml5.available(dt, conf)) {\n        return 'csvHtml5';\n      }\n\n      if (_dtButtons.csvFlash && _dtButtons.csvFlash.available(dt, conf)) {\n        return 'csvFlash';\n      }\n    },\n    excel: function excel(dt, conf) {\n      // Common option that will use the HTML5 or Flash export buttons\n      if (_dtButtons.excelHtml5 && _dtButtons.excelHtml5.available(dt, conf)) {\n        return 'excelHtml5';\n      }\n\n      if (_dtButtons.excelFlash && _dtButtons.excelFlash.available(dt, conf)) {\n        return 'excelFlash';\n      }\n    },\n    pdf: function pdf(dt, conf) {\n      // Common option that will use the HTML5 or Flash export buttons\n      if (_dtButtons.pdfHtml5 && _dtButtons.pdfHtml5.available(dt, conf)) {\n        return 'pdfHtml5';\n      }\n\n      if (_dtButtons.pdfFlash && _dtButtons.pdfFlash.available(dt, conf)) {\n        return 'pdfFlash';\n      }\n    },\n    pageLength: function pageLength(dt) {\n      var lengthMenu = dt.settings()[0].aLengthMenu;\n      var vals = $.isArray(lengthMenu[0]) ? lengthMenu[0] : lengthMenu;\n      var lang = $.isArray(lengthMenu[0]) ? lengthMenu[1] : lengthMenu;\n\n      var text = function text(dt) {\n        return dt.i18n('buttons.pageLength', {\n          \"-1\": 'Show all rows',\n          _: 'Show %d rows'\n        }, dt.page.len());\n      };\n\n      return {\n        extend: 'collection',\n        text: text,\n        className: 'buttons-page-length',\n        autoClose: true,\n        buttons: $.map(vals, function (val, i) {\n          return {\n            text: lang[i],\n            className: 'button-page-length',\n            action: function action(e, dt) {\n              dt.page.len(val).draw();\n            },\n            init: function init(dt, node, conf) {\n              var that = this;\n\n              var fn = function fn() {\n                that.active(dt.page.len() === val);\n              };\n\n              dt.on('length.dt' + conf.namespace, fn);\n              fn();\n            },\n            destroy: function destroy(dt, node, conf) {\n              dt.off('length.dt' + conf.namespace);\n            }\n          };\n        }),\n        init: function init(dt, node, conf) {\n          var that = this;\n          dt.on('length.dt' + conf.namespace, function () {\n            that.text(text(dt));\n          });\n        },\n        destroy: function destroy(dt, node, conf) {\n          dt.off('length.dt' + conf.namespace);\n        }\n      };\n    }\n  });\n  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n   * DataTables API\n   *\n   * For complete documentation, please refer to the docs/api directory or the\n   * DataTables site\n   */\n  // Buttons group and individual button selector\n\n  DataTable.Api.register('buttons()', function (group, selector) {\n    // Argument shifting\n    if (selector === undefined) {\n      selector = group;\n      group = undefined;\n    }\n\n    this.selector.buttonGroup = group;\n    var res = this.iterator(true, 'table', function (ctx) {\n      if (ctx._buttons) {\n        return Buttons.buttonSelector(Buttons.instanceSelector(group, ctx._buttons), selector);\n      }\n    }, true);\n    res._groupSelector = group;\n    return res;\n  }); // Individual button selector\n\n  DataTable.Api.register('button()', function (group, selector) {\n    // just run buttons() and truncate\n    var buttons = this.buttons(group, selector);\n\n    if (buttons.length > 1) {\n      buttons.splice(1, buttons.length);\n    }\n\n    return buttons;\n  }); // Active buttons\n\n  DataTable.Api.registerPlural('buttons().active()', 'button().active()', function (flag) {\n    if (flag === undefined) {\n      return this.map(function (set) {\n        return set.inst.active(set.node);\n      });\n    }\n\n    return this.each(function (set) {\n      set.inst.active(set.node, flag);\n    });\n  }); // Get / set button action\n\n  DataTable.Api.registerPlural('buttons().action()', 'button().action()', function (action) {\n    if (action === undefined) {\n      return this.map(function (set) {\n        return set.inst.action(set.node);\n      });\n    }\n\n    return this.each(function (set) {\n      set.inst.action(set.node, action);\n    });\n  }); // Enable / disable buttons\n\n  DataTable.Api.register(['buttons().enable()', 'button().enable()'], function (flag) {\n    return this.each(function (set) {\n      set.inst.enable(set.node, flag);\n    });\n  }); // Disable buttons\n\n  DataTable.Api.register(['buttons().disable()', 'button().disable()'], function () {\n    return this.each(function (set) {\n      set.inst.disable(set.node);\n    });\n  }); // Get button nodes\n\n  DataTable.Api.registerPlural('buttons().nodes()', 'button().node()', function () {\n    var jq = $(); // jQuery will automatically reduce duplicates to a single entry\n\n    $(this.each(function (set) {\n      jq = jq.add(set.inst.node(set.node));\n    }));\n    return jq;\n  }); // Get / set button processing state\n\n  DataTable.Api.registerPlural('buttons().processing()', 'button().processing()', function (flag) {\n    if (flag === undefined) {\n      return this.map(function (set) {\n        return set.inst.processing(set.node);\n      });\n    }\n\n    return this.each(function (set) {\n      set.inst.processing(set.node, flag);\n    });\n  }); // Get / set button text (i.e. the button labels)\n\n  DataTable.Api.registerPlural('buttons().text()', 'button().text()', function (label) {\n    if (label === undefined) {\n      return this.map(function (set) {\n        return set.inst.text(set.node);\n      });\n    }\n\n    return this.each(function (set) {\n      set.inst.text(set.node, label);\n    });\n  }); // Trigger a button's action\n\n  DataTable.Api.registerPlural('buttons().trigger()', 'button().trigger()', function () {\n    return this.each(function (set) {\n      set.inst.node(set.node).trigger('click');\n    });\n  }); // Get the container elements\n\n  DataTable.Api.registerPlural('buttons().containers()', 'buttons().container()', function () {\n    var jq = $();\n    var groupSelector = this._groupSelector; // We need to use the group selector directly, since if there are no buttons\n    // the result set will be empty\n\n    this.iterator(true, 'table', function (ctx) {\n      if (ctx._buttons) {\n        var insts = Buttons.instanceSelector(groupSelector, ctx._buttons);\n\n        for (var i = 0, ien = insts.length; i < ien; i++) {\n          jq = jq.add(insts[i].container());\n        }\n      }\n    });\n    return jq;\n  }); // Add a new button\n\n  DataTable.Api.register('button().add()', function (idx, conf) {\n    var ctx = this.context; // Don't use `this` as it could be empty - select the instances directly\n\n    if (ctx.length) {\n      var inst = Buttons.instanceSelector(this._groupSelector, ctx[0]._buttons);\n\n      if (inst.length) {\n        inst[0].add(conf, idx);\n      }\n    }\n\n    return this.button(this._groupSelector, idx);\n  }); // Destroy the button sets selected\n\n  DataTable.Api.register('buttons().destroy()', function () {\n    this.pluck('inst').unique().each(function (inst) {\n      inst.destroy();\n    });\n    return this;\n  }); // Remove a button\n\n  DataTable.Api.registerPlural('buttons().remove()', 'buttons().remove()', function () {\n    this.each(function (set) {\n      set.inst.remove(set.node);\n    });\n    return this;\n  }); // Information box that can be used by buttons\n\n  var _infoTimer;\n\n  DataTable.Api.register('buttons.info()', function (title, message, time) {\n    var that = this;\n\n    if (title === false) {\n      $('#datatables_buttons_info').fadeOut(function () {\n        $(this).remove();\n      });\n      clearTimeout(_infoTimer);\n      _infoTimer = null;\n      return this;\n    }\n\n    if (_infoTimer) {\n      clearTimeout(_infoTimer);\n    }\n\n    if ($('#datatables_buttons_info').length) {\n      $('#datatables_buttons_info').remove();\n    }\n\n    title = title ? '<h2>' + title + '</h2>' : '';\n    $('<div id=\"datatables_buttons_info\" class=\"dt-button-info\"/>').html(title).append($('<div/>')[typeof message === 'string' ? 'html' : 'append'](message)).css('display', 'none').appendTo('body').fadeIn();\n\n    if (time !== undefined && time !== 0) {\n      _infoTimer = setTimeout(function () {\n        that.buttons.info(false);\n      }, time);\n    }\n\n    return this;\n  }); // Get data from the table for export - this is common to a number of plug-in\n  // buttons so it is included in the Buttons core library\n\n  DataTable.Api.register('buttons.exportData()', function (options) {\n    if (this.context.length) {\n      return _exportData(new DataTable.Api(this.context[0]), options);\n    }\n  }); // Get information about the export that is common to many of the export data\n  // types (DRY)\n\n  DataTable.Api.register('buttons.exportInfo()', function (conf) {\n    if (!conf) {\n      conf = {};\n    }\n\n    return {\n      filename: _filename(conf),\n      title: _title(conf),\n      messageTop: _message(this, conf.message || conf.messageTop, 'top'),\n      messageBottom: _message(this, conf.messageBottom, 'bottom')\n    };\n  });\n  /**\n   * Get the file name for an exported file.\n   *\n   * @param {object}\tconfig Button configuration\n   * @param {boolean} incExtension Include the file name extension\n   */\n\n  var _filename = function _filename(config) {\n    // Backwards compatibility\n    var filename = config.filename === '*' && config.title !== '*' && config.title !== undefined && config.title !== null && config.title !== '' ? config.title : config.filename;\n\n    if (typeof filename === 'function') {\n      filename = filename();\n    }\n\n    if (filename === undefined || filename === null) {\n      return null;\n    }\n\n    if (filename.indexOf('*') !== -1) {\n      filename = $.trim(filename.replace('*', $('head > title').text()));\n    } // Strip characters which the OS will object to\n\n\n    filename = filename.replace(/[^a-zA-Z0-9_\\u00A1-\\uFFFF\\.,\\-_ !\\(\\)]/g, \"\");\n\n    var extension = _stringOrFunction(config.extension);\n\n    if (!extension) {\n      extension = '';\n    }\n\n    return filename + extension;\n  };\n  /**\n   * Simply utility method to allow parameters to be given as a function\n   *\n   * @param {undefined|string|function} option Option\n   * @return {null|string} Resolved value\n   */\n\n\n  var _stringOrFunction = function _stringOrFunction(option) {\n    if (option === null || option === undefined) {\n      return null;\n    } else if (typeof option === 'function') {\n      return option();\n    }\n\n    return option;\n  };\n  /**\n   * Get the title for an exported file.\n   *\n   * @param {object} config\tButton configuration\n   */\n\n\n  var _title = function _title(config) {\n    var title = _stringOrFunction(config.title);\n\n    return title === null ? null : title.indexOf('*') !== -1 ? title.replace('*', $('head > title').text() || 'Exported data') : title;\n  };\n\n  var _message = function _message(dt, option, position) {\n    var message = _stringOrFunction(option);\n\n    if (message === null) {\n      return null;\n    }\n\n    var caption = $('caption', dt.table().container()).eq(0);\n\n    if (message === '*') {\n      var side = caption.css('caption-side');\n\n      if (side !== position) {\n        return null;\n      }\n\n      return caption.length ? caption.text() : '';\n    }\n\n    return message;\n  };\n\n  var _exportTextarea = $('<textarea/>')[0];\n\n  var _exportData = function _exportData(dt, inOpts) {\n    var config = $.extend(true, {}, {\n      rows: null,\n      columns: '',\n      modifier: {\n        search: 'applied',\n        order: 'applied'\n      },\n      orthogonal: 'display',\n      stripHtml: true,\n      stripNewlines: true,\n      decodeEntities: true,\n      trim: true,\n      format: {\n        header: function header(d) {\n          return strip(d);\n        },\n        footer: function footer(d) {\n          return strip(d);\n        },\n        body: function body(d) {\n          return strip(d);\n        }\n      },\n      customizeData: null\n    }, inOpts);\n\n    var strip = function strip(str) {\n      if (typeof str !== 'string') {\n        return str;\n      } // Always remove script tags\n\n\n      str = str.replace(/<script\\b[^<]*(?:(?!<\\/script>)<[^<]*)*<\\/script>/gi, ''); // Always remove comments\n\n      str = str.replace(/<!\\-\\-.*?\\-\\->/g, '');\n\n      if (config.stripHtml) {\n        str = str.replace(/<[^>]*>/g, '');\n      }\n\n      if (config.trim) {\n        str = str.replace(/^\\s+|\\s+$/g, '');\n      }\n\n      if (config.stripNewlines) {\n        str = str.replace(/\\n/g, ' ');\n      }\n\n      if (config.decodeEntities) {\n        _exportTextarea.innerHTML = str;\n        str = _exportTextarea.value;\n      }\n\n      return str;\n    };\n\n    var header = dt.columns(config.columns).indexes().map(function (idx) {\n      var el = dt.column(idx).header();\n      return config.format.header(el.innerHTML, idx, el);\n    }).toArray();\n    var footer = dt.table().footer() ? dt.columns(config.columns).indexes().map(function (idx) {\n      var el = dt.column(idx).footer();\n      return config.format.footer(el ? el.innerHTML : '', idx, el);\n    }).toArray() : null; // If Select is available on this table, and any rows are selected, limit the export\n    // to the selected rows. If no rows are selected, all rows will be exported. Specify\n    // a `selected` modifier to control directly.\n\n    var modifier = $.extend({}, config.modifier);\n\n    if (dt.select && typeof dt.select.info === 'function' && modifier.selected === undefined) {\n      if (dt.rows(config.rows, $.extend({\n        selected: true\n      }, modifier)).any()) {\n        $.extend(modifier, {\n          selected: true\n        });\n      }\n    }\n\n    var rowIndexes = dt.rows(config.rows, modifier).indexes().toArray();\n    var selectedCells = dt.cells(rowIndexes, config.columns);\n    var cells = selectedCells.render(config.orthogonal).toArray();\n    var cellNodes = selectedCells.nodes().toArray();\n    var columns = header.length;\n    var rows = columns > 0 ? cells.length / columns : 0;\n    var body = [];\n    var cellCounter = 0;\n\n    for (var i = 0, ien = rows; i < ien; i++) {\n      var row = [columns];\n\n      for (var j = 0; j < columns; j++) {\n        row[j] = config.format.body(cells[cellCounter], i, j, cellNodes[cellCounter]);\n        cellCounter++;\n      }\n\n      body[i] = row;\n    }\n\n    var data = {\n      header: header,\n      footer: footer,\n      body: body\n    };\n\n    if (config.customizeData) {\n      config.customizeData(data);\n    }\n\n    return data;\n  };\n  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n   * DataTables interface\n   */\n  // Attach to DataTables objects for global access\n\n\n  $.fn.dataTable.Buttons = Buttons;\n  $.fn.DataTable.Buttons = Buttons; // DataTables creation - check if the buttons have been defined for this table,\n  // they will have been if the `B` option was used in `dom`, otherwise we should\n  // create the buttons instance here so they can be inserted into the document\n  // using the API. Listen for `init` for compatibility with pre 1.10.10, but to\n  // be removed in future.\n\n  $(document).on('init.dt plugin-init.dt', function (e, settings) {\n    if (e.namespace !== 'dt') {\n      return;\n    }\n\n    var opts = settings.oInit.buttons || DataTable.defaults.buttons;\n\n    if (opts && !settings._buttons) {\n      new Buttons(settings, opts).container();\n    }\n  }); // DataTables `dom` feature option\n\n  DataTable.ext.feature.push({\n    fnInit: function fnInit(settings) {\n      var api = new DataTable.Api(settings);\n      var opts = api.init().buttons || DataTable.defaults.buttons;\n      return new Buttons(api, opts).container();\n    },\n    cFeature: \"B\"\n  });\n  return Buttons;\n});","/*! Bootstrap integration for DataTables' Buttons\n * ©2016 SpryMedia Ltd - datatables.net/license\n */\n(function (factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD\n    define(['jquery', 'datatables.net-bs', 'datatables.net-buttons'], function ($) {\n      return factory($, window, document);\n    });\n  } else if (typeof exports === 'object') {\n    // CommonJS\n    module.exports = function (root, $) {\n      if (!root) {\n        root = window;\n      }\n\n      if (!$ || !$.fn.dataTable) {\n        $ = require('datatables.net-bs')(root, $).$;\n      }\n\n      if (!$.fn.dataTable.Buttons) {\n        require('datatables.net-buttons')(root, $);\n      }\n\n      return factory($, root, root.document);\n    };\n  } else {\n    // Browser\n    factory(jQuery, window, document);\n  }\n})(function ($, window, document, undefined) {\n  'use strict';\n\n  var DataTable = $.fn.dataTable;\n  $.extend(true, DataTable.Buttons.defaults, {\n    dom: {\n      container: {\n        className: 'dt-buttons btn-group'\n      },\n      button: {\n        className: 'btn btn-default'\n      },\n      collection: {\n        tag: 'ul',\n        className: 'dt-button-collection dropdown-menu',\n        button: {\n          tag: 'li',\n          className: 'dt-button',\n          active: 'active',\n          disabled: 'disabled'\n        },\n        buttonLiner: {\n          tag: 'a',\n          className: ''\n        }\n      }\n    }\n  });\n\n  DataTable.ext.buttons.collection.text = function (dt) {\n    return dt.i18n('buttons.collection', 'Collection <span class=\"caret\"/>');\n  };\n\n  return DataTable.Buttons;\n});","/*!\n * Column visibility buttons for Buttons and DataTables.\n * 2016 SpryMedia Ltd - datatables.net/license\n */\n(function (factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD\n    define(['jquery', 'datatables.net', 'datatables.net-buttons'], function ($) {\n      return factory($, window, document);\n    });\n  } else if (typeof exports === 'object') {\n    // CommonJS\n    module.exports = function (root, $) {\n      if (!root) {\n        root = window;\n      }\n\n      if (!$ || !$.fn.dataTable) {\n        $ = require('datatables.net')(root, $).$;\n      }\n\n      if (!$.fn.dataTable.Buttons) {\n        require('datatables.net-buttons')(root, $);\n      }\n\n      return factory($, root, root.document);\n    };\n  } else {\n    // Browser\n    factory(jQuery, window, document);\n  }\n})(function ($, window, document, undefined) {\n  'use strict';\n\n  var DataTable = $.fn.dataTable;\n  $.extend(DataTable.ext.buttons, {\n    // A collection of column visibility buttons\n    colvis: function colvis(dt, conf) {\n      return {\n        extend: 'collection',\n        text: function text(dt) {\n          return dt.i18n('buttons.colvis', 'Column visibility');\n        },\n        className: 'buttons-colvis',\n        buttons: [{\n          extend: 'columnsToggle',\n          columns: conf.columns,\n          columnText: conf.columnText\n        }]\n      };\n    },\n    // Selected columns with individual buttons - toggle column visibility\n    columnsToggle: function columnsToggle(dt, conf) {\n      var columns = dt.columns(conf.columns).indexes().map(function (idx) {\n        return {\n          extend: 'columnToggle',\n          columns: idx,\n          columnText: conf.columnText\n        };\n      }).toArray();\n      return columns;\n    },\n    // Single button to toggle column visibility\n    columnToggle: function columnToggle(dt, conf) {\n      return {\n        extend: 'columnVisibility',\n        columns: conf.columns,\n        columnText: conf.columnText\n      };\n    },\n    // Selected columns with individual buttons - set column visibility\n    columnsVisibility: function columnsVisibility(dt, conf) {\n      var columns = dt.columns(conf.columns).indexes().map(function (idx) {\n        return {\n          extend: 'columnVisibility',\n          columns: idx,\n          visibility: conf.visibility,\n          columnText: conf.columnText\n        };\n      }).toArray();\n      return columns;\n    },\n    // Single button to set column visibility\n    columnVisibility: {\n      columns: undefined,\n      // column selector\n      text: function text(dt, button, conf) {\n        return conf._columnText(dt, conf);\n      },\n      className: 'buttons-columnVisibility',\n      action: function action(e, dt, button, conf) {\n        var col = dt.columns(conf.columns);\n        var curr = col.visible();\n        col.visible(conf.visibility !== undefined ? conf.visibility : !(curr.length ? curr[0] : false));\n      },\n      init: function init(dt, button, conf) {\n        var that = this;\n        button.attr('data-cv-idx', conf.columns);\n        dt.on('column-visibility.dt' + conf.namespace, function (e, settings) {\n          if (!settings.bDestroying && settings.nTable == dt.settings()[0].nTable) {\n            that.active(dt.column(conf.columns).visible());\n          }\n        }).on('column-reorder.dt' + conf.namespace, function (e, settings, details) {\n          // Don't rename buttons based on column name if the button\n          // controls more than one column!\n          if (dt.columns(conf.columns).count() !== 1) {\n            return;\n          }\n\n          conf.columns = $.inArray(conf.columns, details.mapping);\n          button.attr('data-cv-idx', conf.columns); // Reorder buttons for new table order\n\n          button.parent().children('[data-cv-idx]').sort(function (a, b) {\n            return a.getAttribute('data-cv-idx') * 1 - b.getAttribute('data-cv-idx') * 1;\n          }).appendTo(button.parent());\n        });\n        this.active(dt.column(conf.columns).visible());\n      },\n      destroy: function destroy(dt, button, conf) {\n        dt.off('column-visibility.dt' + conf.namespace).off('column-reorder.dt' + conf.namespace);\n      },\n      _columnText: function _columnText(dt, conf) {\n        // Use DataTables' internal data structure until this is presented\n        // is a public API. The other option is to use\n        // `$( column(col).node() ).text()` but the node might not have been\n        // populated when Buttons is constructed.\n        var idx = dt.column(conf.columns).index();\n        var title = dt.settings()[0].aoColumns[idx].sTitle.replace(/\\n/g, \" \") // remove new lines\n        .replace(/<br\\s*\\/?>/gi, \" \") // replace line breaks with spaces\n        .replace(/<select(.*?)<\\/select>/g, \"\") // remove select tags, including options text\n        .replace(/<!\\-\\-.*?\\-\\->/g, \"\") // strip HTML comments\n        .replace(/<.*?>/g, \"\") // strip HTML\n        .replace(/^\\s+|\\s+$/g, \"\"); // trim\n\n        return conf.columnText ? conf.columnText(dt, idx, title) : title;\n      }\n    },\n    colvisRestore: {\n      className: 'buttons-colvisRestore',\n      text: function text(dt) {\n        return dt.i18n('buttons.colvisRestore', 'Restore visibility');\n      },\n      init: function init(dt, button, conf) {\n        conf._visOriginal = dt.columns().indexes().map(function (idx) {\n          return dt.column(idx).visible();\n        }).toArray();\n      },\n      action: function action(e, dt, button, conf) {\n        dt.columns().every(function (i) {\n          // Take into account that ColReorder might have disrupted our\n          // indexes\n          var idx = dt.colReorder && dt.colReorder.transpose ? dt.colReorder.transpose(i, 'toOriginal') : i;\n          this.visible(conf._visOriginal[idx]);\n        });\n      }\n    },\n    colvisGroup: {\n      className: 'buttons-colvisGroup',\n      action: function action(e, dt, button, conf) {\n        dt.columns(conf.show).visible(true, false);\n        dt.columns(conf.hide).visible(false, false);\n        dt.columns.adjust();\n      },\n      show: [],\n      hide: []\n    }\n  });\n  return DataTable.Buttons;\n});","/*!\n * Flash export buttons for Buttons and DataTables.\n * 2015-2017 SpryMedia Ltd - datatables.net/license\n *\n * ZeroClipbaord - MIT license\n * Copyright (c) 2012 Joseph Huckaby\n */\n(function (factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD\n    define(['jquery', 'datatables.net', 'datatables.net-buttons'], function ($) {\n      return factory($, window, document);\n    });\n  } else if (typeof exports === 'object') {\n    // CommonJS\n    module.exports = function (root, $) {\n      if (!root) {\n        root = window;\n      }\n\n      if (!$ || !$.fn.dataTable) {\n        $ = require('datatables.net')(root, $).$;\n      }\n\n      if (!$.fn.dataTable.Buttons) {\n        require('datatables.net-buttons')(root, $);\n      }\n\n      return factory($, root, root.document);\n    };\n  } else {\n    // Browser\n    factory(jQuery, window, document);\n  }\n})(function ($, window, document, undefined) {\n  'use strict';\n\n  var DataTable = $.fn.dataTable;\n  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n   * ZeroClipboard dependency\n   */\n\n  /*\n   * ZeroClipboard 1.0.4 with modifications\n   * Author: Joseph Huckaby\n   * License: MIT\n   *\n   * Copyright (c) 2012 Joseph Huckaby\n   */\n\n  var ZeroClipboard_TableTools = {\n    version: \"1.0.4-TableTools2\",\n    clients: {},\n    // registered upload clients on page, indexed by id\n    moviePath: '',\n    // URL to movie\n    nextId: 1,\n    // ID of next movie\n    $: function $(thingy) {\n      // simple DOM lookup utility function\n      if (typeof thingy == 'string') {\n        thingy = document.getElementById(thingy);\n      }\n\n      if (!thingy.addClass) {\n        // extend element with a few useful methods\n        thingy.hide = function () {\n          this.style.display = 'none';\n        };\n\n        thingy.show = function () {\n          this.style.display = '';\n        };\n\n        thingy.addClass = function (name) {\n          this.removeClass(name);\n          this.className += ' ' + name;\n        };\n\n        thingy.removeClass = function (name) {\n          this.className = this.className.replace(new RegExp(\"\\\\s*\" + name + \"\\\\s*\"), \" \").replace(/^\\s+/, '').replace(/\\s+$/, '');\n        };\n\n        thingy.hasClass = function (name) {\n          return !!this.className.match(new RegExp(\"\\\\s*\" + name + \"\\\\s*\"));\n        };\n      }\n\n      return thingy;\n    },\n    setMoviePath: function setMoviePath(path) {\n      // set path to ZeroClipboard.swf\n      this.moviePath = path;\n    },\n    dispatch: function dispatch(id, eventName, args) {\n      // receive event from flash movie, send to client\n      var client = this.clients[id];\n\n      if (client) {\n        client.receiveEvent(eventName, args);\n      }\n    },\n    log: function log(str) {\n      console.log('Flash: ' + str);\n    },\n    register: function register(id, client) {\n      // register new client to receive events\n      this.clients[id] = client;\n    },\n    getDOMObjectPosition: function getDOMObjectPosition(obj) {\n      // get absolute coordinates for dom element\n      var info = {\n        left: 0,\n        top: 0,\n        width: obj.width ? obj.width : obj.offsetWidth,\n        height: obj.height ? obj.height : obj.offsetHeight\n      };\n\n      if (obj.style.width !== \"\") {\n        info.width = obj.style.width.replace(\"px\", \"\");\n      }\n\n      if (obj.style.height !== \"\") {\n        info.height = obj.style.height.replace(\"px\", \"\");\n      }\n\n      while (obj) {\n        info.left += obj.offsetLeft;\n        info.top += obj.offsetTop;\n        obj = obj.offsetParent;\n      }\n\n      return info;\n    },\n    Client: function Client(elem) {\n      // constructor for new simple upload client\n      this.handlers = {}; // unique ID\n\n      this.id = ZeroClipboard_TableTools.nextId++;\n      this.movieId = 'ZeroClipboard_TableToolsMovie_' + this.id; // register client with singleton to receive flash events\n\n      ZeroClipboard_TableTools.register(this.id, this); // create movie\n\n      if (elem) {\n        this.glue(elem);\n      }\n    }\n  };\n  ZeroClipboard_TableTools.Client.prototype = {\n    id: 0,\n    // unique ID for us\n    ready: false,\n    // whether movie is ready to receive events or not\n    movie: null,\n    // reference to movie object\n    clipText: '',\n    // text to copy to clipboard\n    fileName: '',\n    // default file save name\n    action: 'copy',\n    // action to perform\n    handCursorEnabled: true,\n    // whether to show hand cursor, or default pointer cursor\n    cssEffects: true,\n    // enable CSS mouse effects on dom container\n    handlers: null,\n    // user event handlers\n    sized: false,\n    sheetName: '',\n    // default sheet name for excel export\n    glue: function glue(elem, title) {\n      // glue to DOM element\n      // elem can be ID or actual DOM element object\n      this.domElement = ZeroClipboard_TableTools.$(elem); // float just above object, or zIndex 99 if dom element isn't set\n\n      var zIndex = 99;\n\n      if (this.domElement.style.zIndex) {\n        zIndex = parseInt(this.domElement.style.zIndex, 10) + 1;\n      } // find X/Y position of domElement\n\n\n      var box = ZeroClipboard_TableTools.getDOMObjectPosition(this.domElement); // create floating DIV above element\n\n      this.div = document.createElement('div');\n      var style = this.div.style;\n      style.position = 'absolute';\n      style.left = '0px';\n      style.top = '0px';\n      style.width = box.width + 'px';\n      style.height = box.height + 'px';\n      style.zIndex = zIndex;\n\n      if (typeof title != \"undefined\" && title !== \"\") {\n        this.div.title = title;\n      }\n\n      if (box.width !== 0 && box.height !== 0) {\n        this.sized = true;\n      } // style.backgroundColor = '#f00'; // debug\n\n\n      if (this.domElement) {\n        this.domElement.appendChild(this.div);\n        this.div.innerHTML = this.getHTML(box.width, box.height).replace(/&/g, '&amp;');\n      }\n    },\n    positionElement: function positionElement() {\n      var box = ZeroClipboard_TableTools.getDOMObjectPosition(this.domElement);\n      var style = this.div.style;\n      style.position = 'absolute'; //style.left = (this.domElement.offsetLeft)+'px';\n      //style.top = this.domElement.offsetTop+'px';\n\n      style.width = box.width + 'px';\n      style.height = box.height + 'px';\n\n      if (box.width !== 0 && box.height !== 0) {\n        this.sized = true;\n      } else {\n        return;\n      }\n\n      var flash = this.div.childNodes[0];\n      flash.width = box.width;\n      flash.height = box.height;\n    },\n    getHTML: function getHTML(width, height) {\n      // return HTML for movie\n      var html = '';\n      var flashvars = 'id=' + this.id + '&width=' + width + '&height=' + height;\n\n      if (navigator.userAgent.match(/MSIE/)) {\n        // IE gets an OBJECT tag\n        var protocol = location.href.match(/^https/i) ? 'https://' : 'http://';\n        html += '<object classid=\"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000\" codebase=\"' + protocol + 'download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=10,0,0,0\" width=\"' + width + '\" height=\"' + height + '\" id=\"' + this.movieId + '\" align=\"middle\"><param name=\"allowScriptAccess\" value=\"always\" /><param name=\"allowFullScreen\" value=\"false\" /><param name=\"movie\" value=\"' + ZeroClipboard_TableTools.moviePath + '\" /><param name=\"loop\" value=\"false\" /><param name=\"menu\" value=\"false\" /><param name=\"quality\" value=\"best\" /><param name=\"bgcolor\" value=\"#ffffff\" /><param name=\"flashvars\" value=\"' + flashvars + '\"/><param name=\"wmode\" value=\"transparent\"/></object>';\n      } else {\n        // all other browsers get an EMBED tag\n        html += '<embed id=\"' + this.movieId + '\" src=\"' + ZeroClipboard_TableTools.moviePath + '\" loop=\"false\" menu=\"false\" quality=\"best\" bgcolor=\"#ffffff\" width=\"' + width + '\" height=\"' + height + '\" name=\"' + this.movieId + '\" align=\"middle\" allowScriptAccess=\"always\" allowFullScreen=\"false\" type=\"application/x-shockwave-flash\" pluginspage=\"http://www.macromedia.com/go/getflashplayer\" flashvars=\"' + flashvars + '\" wmode=\"transparent\" />';\n      }\n\n      return html;\n    },\n    hide: function hide() {\n      // temporarily hide floater offscreen\n      if (this.div) {\n        this.div.style.left = '-2000px';\n      }\n    },\n    show: function show() {\n      // show ourselves after a call to hide()\n      this.reposition();\n    },\n    destroy: function destroy() {\n      // destroy control and floater\n      var that = this;\n\n      if (this.domElement && this.div) {\n        $(this.div).remove();\n        this.domElement = null;\n        this.div = null;\n        $.each(ZeroClipboard_TableTools.clients, function (id, client) {\n          if (client === that) {\n            delete ZeroClipboard_TableTools.clients[id];\n          }\n        });\n      }\n    },\n    reposition: function reposition(elem) {\n      // reposition our floating div, optionally to new container\n      // warning: container CANNOT change size, only position\n      if (elem) {\n        this.domElement = ZeroClipboard_TableTools.$(elem);\n\n        if (!this.domElement) {\n          this.hide();\n        }\n      }\n\n      if (this.domElement && this.div) {\n        var box = ZeroClipboard_TableTools.getDOMObjectPosition(this.domElement);\n        var style = this.div.style;\n        style.left = '' + box.left + 'px';\n        style.top = '' + box.top + 'px';\n      }\n    },\n    clearText: function clearText() {\n      // clear the text to be copy / saved\n      this.clipText = '';\n\n      if (this.ready) {\n        this.movie.clearText();\n      }\n    },\n    appendText: function appendText(newText) {\n      // append text to that which is to be copied / saved\n      this.clipText += newText;\n\n      if (this.ready) {\n        this.movie.appendText(newText);\n      }\n    },\n    setText: function setText(newText) {\n      // set text to be copied to be copied / saved\n      this.clipText = newText;\n\n      if (this.ready) {\n        this.movie.setText(newText);\n      }\n    },\n    setFileName: function setFileName(newText) {\n      // set the file name\n      this.fileName = newText;\n\n      if (this.ready) {\n        this.movie.setFileName(newText);\n      }\n    },\n    setSheetData: function setSheetData(data) {\n      // set the xlsx sheet data\n      if (this.ready) {\n        this.movie.setSheetData(JSON.stringify(data));\n      }\n    },\n    setAction: function setAction(newText) {\n      // set action (save or copy)\n      this.action = newText;\n\n      if (this.ready) {\n        this.movie.setAction(newText);\n      }\n    },\n    addEventListener: function addEventListener(eventName, func) {\n      // add user event listener for event\n      // event types: load, queueStart, fileStart, fileComplete, queueComplete, progress, error, cancel\n      eventName = eventName.toString().toLowerCase().replace(/^on/, '');\n\n      if (!this.handlers[eventName]) {\n        this.handlers[eventName] = [];\n      }\n\n      this.handlers[eventName].push(func);\n    },\n    setHandCursor: function setHandCursor(enabled) {\n      // enable hand cursor (true), or default arrow cursor (false)\n      this.handCursorEnabled = enabled;\n\n      if (this.ready) {\n        this.movie.setHandCursor(enabled);\n      }\n    },\n    setCSSEffects: function setCSSEffects(enabled) {\n      // enable or disable CSS effects on DOM container\n      this.cssEffects = !!enabled;\n    },\n    receiveEvent: function receiveEvent(eventName, args) {\n      var self; // receive event from flash\n\n      eventName = eventName.toString().toLowerCase().replace(/^on/, ''); // special behavior for certain events\n\n      switch (eventName) {\n        case 'load':\n          // movie claims it is ready, but in IE this isn't always the case...\n          // bug fix: Cannot extend EMBED DOM elements in Firefox, must use traditional function\n          this.movie = document.getElementById(this.movieId);\n\n          if (!this.movie) {\n            self = this;\n            setTimeout(function () {\n              self.receiveEvent('load', null);\n            }, 1);\n            return;\n          } // firefox on pc needs a \"kick\" in order to set these in certain cases\n\n\n          if (!this.ready && navigator.userAgent.match(/Firefox/) && navigator.userAgent.match(/Windows/)) {\n            self = this;\n            setTimeout(function () {\n              self.receiveEvent('load', null);\n            }, 100);\n            this.ready = true;\n            return;\n          }\n\n          this.ready = true;\n          this.movie.clearText();\n          this.movie.appendText(this.clipText);\n          this.movie.setFileName(this.fileName);\n          this.movie.setAction(this.action);\n          this.movie.setHandCursor(this.handCursorEnabled);\n          break;\n\n        case 'mouseover':\n          if (this.domElement && this.cssEffects) {\n            //this.domElement.addClass('hover');\n            if (this.recoverActive) {\n              this.domElement.addClass('active');\n            }\n          }\n\n          break;\n\n        case 'mouseout':\n          if (this.domElement && this.cssEffects) {\n            this.recoverActive = false;\n\n            if (this.domElement.hasClass('active')) {\n              this.domElement.removeClass('active');\n              this.recoverActive = true;\n            } //this.domElement.removeClass('hover');\n\n          }\n\n          break;\n\n        case 'mousedown':\n          if (this.domElement && this.cssEffects) {\n            this.domElement.addClass('active');\n          }\n\n          break;\n\n        case 'mouseup':\n          if (this.domElement && this.cssEffects) {\n            this.domElement.removeClass('active');\n            this.recoverActive = false;\n          }\n\n          break;\n      } // switch eventName\n\n\n      if (this.handlers[eventName]) {\n        for (var idx = 0, len = this.handlers[eventName].length; idx < len; idx++) {\n          var func = this.handlers[eventName][idx];\n\n          if (typeof func == 'function') {\n            // actual function reference\n            func(this, args);\n          } else if (typeof func == 'object' && func.length == 2) {\n            // PHP style object + method, i.e. [myObject, 'myMethod']\n            func[0][func[1]](this, args);\n          } else if (typeof func == 'string') {\n            // name of function\n            window[func](this, args);\n          }\n        } // foreach event handler defined\n\n      } // user defined handler for event\n\n    }\n  };\n\n  ZeroClipboard_TableTools.hasFlash = function () {\n    try {\n      var fo = new ActiveXObject('ShockwaveFlash.ShockwaveFlash');\n\n      if (fo) {\n        return true;\n      }\n    } catch (e) {\n      if (navigator.mimeTypes && navigator.mimeTypes['application/x-shockwave-flash'] !== undefined && navigator.mimeTypes['application/x-shockwave-flash'].enabledPlugin) {\n        return true;\n      }\n    }\n\n    return false;\n  }; // For the Flash binding to work, ZeroClipboard_TableTools must be on the global\n  // object list\n\n\n  window.ZeroClipboard_TableTools = ZeroClipboard_TableTools;\n  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n   * Local (private) functions\n   */\n\n  /**\n   * If a Buttons instance is initlaised before it is placed into the DOM, Flash\n   * won't be able to bind to it, so we need to wait until it is available, this\n   * method abstracts that out.\n   *\n   * @param {ZeroClipboard} flash ZeroClipboard instance\n   * @param {jQuery} node  Button\n   */\n\n  var _glue = function _glue(flash, node) {\n    var id = node.attr('id');\n\n    if (node.parents('html').length) {\n      flash.glue(node[0], '');\n    } else {\n      setTimeout(function () {\n        _glue(flash, node);\n      }, 500);\n    }\n  };\n  /**\n   * Get the sheet name for Excel exports.\n   *\n   * @param {object}  config       Button configuration\n   */\n\n\n  var _sheetname = function _sheetname(config) {\n    var sheetName = 'Sheet1';\n\n    if (config.sheetName) {\n      sheetName = config.sheetName.replace(/[\\[\\]\\*\\/\\\\\\?\\:]/g, '');\n    }\n\n    return sheetName;\n  };\n  /**\n   * Set the flash text. This has to be broken up into chunks as the Javascript /\n   * Flash bridge has a size limit. There is no indication in the Flash\n   * documentation what this is, and it probably depends upon the browser.\n   * Experimentation shows that the point is around 50k when data starts to get\n   * lost, so an 8K limit used here is safe.\n   *\n   * @param {ZeroClipboard} flash ZeroClipboard instance\n   * @param {string}        data  Data to send to Flash\n   */\n\n\n  var _setText = function _setText(flash, data) {\n    var parts = data.match(/[\\s\\S]{1,8192}/g) || [];\n    flash.clearText();\n\n    for (var i = 0, len = parts.length; i < len; i++) {\n      flash.appendText(parts[i]);\n    }\n  };\n  /**\n   * Get the newline character(s)\n   *\n   * @param {object}  config Button configuration\n   * @return {string}        Newline character\n   */\n\n\n  var _newLine = function _newLine(config) {\n    return config.newline ? config.newline : navigator.userAgent.match(/Windows/) ? '\\r\\n' : '\\n';\n  };\n  /**\n   * Combine the data from the `buttons.exportData` method into a string that\n   * will be used in the export file.\n   *\n   * @param  {DataTable.Api} dt     DataTables API instance\n   * @param  {object}        config Button configuration\n   * @return {object}               The data to export\n   */\n\n\n  var _exportData = function _exportData(dt, config) {\n    var newLine = _newLine(config);\n\n    var data = dt.buttons.exportData(config.exportOptions);\n    var boundary = config.fieldBoundary;\n    var separator = config.fieldSeparator;\n    var reBoundary = new RegExp(boundary, 'g');\n    var escapeChar = config.escapeChar !== undefined ? config.escapeChar : '\\\\';\n\n    var join = function join(a) {\n      var s = ''; // If there is a field boundary, then we might need to escape it in\n      // the source data\n\n      for (var i = 0, ien = a.length; i < ien; i++) {\n        if (i > 0) {\n          s += separator;\n        }\n\n        s += boundary ? boundary + ('' + a[i]).replace(reBoundary, escapeChar + boundary) + boundary : a[i];\n      }\n\n      return s;\n    };\n\n    var header = config.header ? join(data.header) + newLine : '';\n    var footer = config.footer && data.footer ? newLine + join(data.footer) : '';\n    var body = [];\n\n    for (var i = 0, ien = data.body.length; i < ien; i++) {\n      body.push(join(data.body[i]));\n    }\n\n    return {\n      str: header + body.join(newLine) + footer,\n      rows: body.length\n    };\n  }; // Basic initialisation for the buttons is common between them\n\n\n  var flashButton = {\n    available: function available() {\n      return ZeroClipboard_TableTools.hasFlash();\n    },\n    init: function init(dt, button, config) {\n      // Insert the Flash movie\n      ZeroClipboard_TableTools.moviePath = DataTable.Buttons.swfPath;\n      var flash = new ZeroClipboard_TableTools.Client();\n      flash.setHandCursor(true);\n      flash.addEventListener('mouseDown', function (client) {\n        config._fromFlash = true;\n        dt.button(button[0]).trigger();\n        config._fromFlash = false;\n      });\n\n      _glue(flash, button);\n\n      config._flash = flash;\n    },\n    destroy: function destroy(dt, button, config) {\n      config._flash.destroy();\n    },\n    fieldSeparator: ',',\n    fieldBoundary: '\"',\n    exportOptions: {},\n    title: '*',\n    messageTop: '*',\n    messageBottom: '*',\n    filename: '*',\n    extension: '.csv',\n    header: true,\n    footer: false\n  };\n  /**\n   * Convert from numeric position to letter for column names in Excel\n   * @param  {int} n Column number\n   * @return {string} Column letter(s) name\n   */\n\n  function createCellPos(n) {\n    var ordA = 'A'.charCodeAt(0);\n    var ordZ = 'Z'.charCodeAt(0);\n    var len = ordZ - ordA + 1;\n    var s = \"\";\n\n    while (n >= 0) {\n      s = String.fromCharCode(n % len + ordA) + s;\n      n = Math.floor(n / len) - 1;\n    }\n\n    return s;\n  }\n  /**\n   * Create an XML node and add any children, attributes, etc without needing to\n   * be verbose in the DOM.\n   *\n   * @param  {object} doc      XML document\n   * @param  {string} nodeName Node name\n   * @param  {object} opts     Options - can be `attr` (attributes), `children`\n   *   (child nodes) and `text` (text content)\n   * @return {node}            Created node\n   */\n\n\n  function _createNode(doc, nodeName, opts) {\n    var tempNode = doc.createElement(nodeName);\n\n    if (opts) {\n      if (opts.attr) {\n        $(tempNode).attr(opts.attr);\n      }\n\n      if (opts.children) {\n        $.each(opts.children, function (key, value) {\n          tempNode.appendChild(value);\n        });\n      }\n\n      if (opts.text !== null && opts.text !== undefined) {\n        tempNode.appendChild(doc.createTextNode(opts.text));\n      }\n    }\n\n    return tempNode;\n  }\n  /**\n   * Get the width for an Excel column based on the contents of that column\n   * @param  {object} data Data for export\n   * @param  {int}    col  Column index\n   * @return {int}         Column width\n   */\n\n\n  function _excelColWidth(data, col) {\n    var max = data.header[col].length;\n    var len, lineSplit, str;\n\n    if (data.footer && data.footer[col].length > max) {\n      max = data.footer[col].length;\n    }\n\n    for (var i = 0, ien = data.body.length; i < ien; i++) {\n      var point = data.body[i][col];\n      str = point !== null && point !== undefined ? point.toString() : ''; // If there is a newline character, workout the width of the column\n      // based on the longest line in the string\n\n      if (str.indexOf('\\n') !== -1) {\n        lineSplit = str.split('\\n');\n        lineSplit.sort(function (a, b) {\n          return b.length - a.length;\n        });\n        len = lineSplit[0].length;\n      } else {\n        len = str.length;\n      }\n\n      if (len > max) {\n        max = len;\n      } // Max width rather than having potentially massive column widths\n\n\n      if (max > 40) {\n        return 52; // 40 * 1.3\n      }\n    }\n\n    max *= 1.3; // And a min width\n\n    return max > 6 ? max : 6;\n  }\n\n  var _serialiser = \"\";\n\n  if (typeof window.XMLSerializer === 'undefined') {\n    _serialiser = new function () {\n      this.serializeToString = function (input) {\n        return input.xml;\n      };\n    }();\n  } else {\n    _serialiser = new XMLSerializer();\n  }\n\n  var _ieExcel;\n  /**\n   * Convert XML documents in an object to strings\n   * @param  {object} obj XLSX document object\n   */\n\n\n  function _xlsxToStrings(obj) {\n    if (_ieExcel === undefined) {\n      // Detect if we are dealing with IE's _awful_ serialiser by seeing if it\n      // drop attributes\n      _ieExcel = _serialiser.serializeToString($.parseXML(excelStrings['xl/worksheets/sheet1.xml'])).indexOf('xmlns:r') === -1;\n    }\n\n    $.each(obj, function (name, val) {\n      if ($.isPlainObject(val)) {\n        _xlsxToStrings(val);\n      } else {\n        if (_ieExcel) {\n          // IE's XML serialiser will drop some name space attributes from\n          // from the root node, so we need to save them. Do this by\n          // replacing the namespace nodes with a regular attribute that\n          // we convert back when serialised. Edge does not have this\n          // issue\n          var worksheet = val.childNodes[0];\n          var i, ien;\n          var attrs = [];\n\n          for (i = worksheet.attributes.length - 1; i >= 0; i--) {\n            var attrName = worksheet.attributes[i].nodeName;\n            var attrValue = worksheet.attributes[i].nodeValue;\n\n            if (attrName.indexOf(':') !== -1) {\n              attrs.push({\n                name: attrName,\n                value: attrValue\n              });\n              worksheet.removeAttribute(attrName);\n            }\n          }\n\n          for (i = 0, ien = attrs.length; i < ien; i++) {\n            var attr = val.createAttribute(attrs[i].name.replace(':', '_dt_b_namespace_token_'));\n            attr.value = attrs[i].value;\n            worksheet.setAttributeNode(attr);\n          }\n        }\n\n        var str = _serialiser.serializeToString(val); // Fix IE's XML\n\n\n        if (_ieExcel) {\n          // IE doesn't include the XML declaration\n          if (str.indexOf('<?xml') === -1) {\n            str = '<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>' + str;\n          } // Return namespace attributes to being as such\n\n\n          str = str.replace(/_dt_b_namespace_token_/g, ':');\n        } // Safari, IE and Edge will put empty name space attributes onto\n        // various elements making them useless. This strips them out\n\n\n        str = str.replace(/<([^<>]*?) xmlns=\"\"([^<>]*?)>/g, '<$1 $2>');\n        obj[name] = str;\n      }\n    });\n  } // Excel - Pre-defined strings to build a basic XLSX file\n\n\n  var excelStrings = {\n    \"_rels/.rels\": '<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>' + '<Relationships xmlns=\"http://schemas.openxmlformats.org/package/2006/relationships\">' + '<Relationship Id=\"rId1\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument\" Target=\"xl/workbook.xml\"/>' + '</Relationships>',\n    \"xl/_rels/workbook.xml.rels\": '<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>' + '<Relationships xmlns=\"http://schemas.openxmlformats.org/package/2006/relationships\">' + '<Relationship Id=\"rId1\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/worksheet\" Target=\"worksheets/sheet1.xml\"/>' + '<Relationship Id=\"rId2\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/styles\" Target=\"styles.xml\"/>' + '</Relationships>',\n    \"[Content_Types].xml\": '<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>' + '<Types xmlns=\"http://schemas.openxmlformats.org/package/2006/content-types\">' + '<Default Extension=\"xml\" ContentType=\"application/xml\" />' + '<Default Extension=\"rels\" ContentType=\"application/vnd.openxmlformats-package.relationships+xml\" />' + '<Default Extension=\"jpeg\" ContentType=\"image/jpeg\" />' + '<Override PartName=\"/xl/workbook.xml\" ContentType=\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml\" />' + '<Override PartName=\"/xl/worksheets/sheet1.xml\" ContentType=\"application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml\" />' + '<Override PartName=\"/xl/styles.xml\" ContentType=\"application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml\" />' + '</Types>',\n    \"xl/workbook.xml\": '<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>' + '<workbook xmlns=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\" xmlns:r=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships\">' + '<fileVersion appName=\"xl\" lastEdited=\"5\" lowestEdited=\"5\" rupBuild=\"24816\"/>' + '<workbookPr showInkAnnotation=\"0\" autoCompressPictures=\"0\"/>' + '<bookViews>' + '<workbookView xWindow=\"0\" yWindow=\"0\" windowWidth=\"25600\" windowHeight=\"19020\" tabRatio=\"500\"/>' + '</bookViews>' + '<sheets>' + '<sheet name=\"\" sheetId=\"1\" r:id=\"rId1\"/>' + '</sheets>' + '</workbook>',\n    \"xl/worksheets/sheet1.xml\": '<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>' + '<worksheet xmlns=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\" xmlns:r=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships\" xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\" mc:Ignorable=\"x14ac\" xmlns:x14ac=\"http://schemas.microsoft.com/office/spreadsheetml/2009/9/ac\">' + '<sheetData/>' + '<mergeCells count=\"0\"/>' + '</worksheet>',\n    \"xl/styles.xml\": '<?xml version=\"1.0\" encoding=\"UTF-8\"?>' + '<styleSheet xmlns=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\" xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\" mc:Ignorable=\"x14ac\" xmlns:x14ac=\"http://schemas.microsoft.com/office/spreadsheetml/2009/9/ac\">' + '<numFmts count=\"6\">' + '<numFmt numFmtId=\"164\" formatCode=\"#,##0.00_-\\ [$$-45C]\"/>' + '<numFmt numFmtId=\"165\" formatCode=\"&quot;£&quot;#,##0.00\"/>' + '<numFmt numFmtId=\"166\" formatCode=\"[$€-2]\\ #,##0.00\"/>' + '<numFmt numFmtId=\"167\" formatCode=\"0.0%\"/>' + '<numFmt numFmtId=\"168\" formatCode=\"#,##0;(#,##0)\"/>' + '<numFmt numFmtId=\"169\" formatCode=\"#,##0.00;(#,##0.00)\"/>' + '</numFmts>' + '<fonts count=\"5\" x14ac:knownFonts=\"1\">' + '<font>' + '<sz val=\"11\" />' + '<name val=\"Calibri\" />' + '</font>' + '<font>' + '<sz val=\"11\" />' + '<name val=\"Calibri\" />' + '<color rgb=\"FFFFFFFF\" />' + '</font>' + '<font>' + '<sz val=\"11\" />' + '<name val=\"Calibri\" />' + '<b />' + '</font>' + '<font>' + '<sz val=\"11\" />' + '<name val=\"Calibri\" />' + '<i />' + '</font>' + '<font>' + '<sz val=\"11\" />' + '<name val=\"Calibri\" />' + '<u />' + '</font>' + '</fonts>' + '<fills count=\"6\">' + '<fill>' + '<patternFill patternType=\"none\" />' + '</fill>' + '<fill>' + // Excel appears to use this as a dotted background regardless of values but\n    '<patternFill patternType=\"none\" />' + // to be valid to the schema, use a patternFill\n    '</fill>' + '<fill>' + '<patternFill patternType=\"solid\">' + '<fgColor rgb=\"FFD9D9D9\" />' + '<bgColor indexed=\"64\" />' + '</patternFill>' + '</fill>' + '<fill>' + '<patternFill patternType=\"solid\">' + '<fgColor rgb=\"FFD99795\" />' + '<bgColor indexed=\"64\" />' + '</patternFill>' + '</fill>' + '<fill>' + '<patternFill patternType=\"solid\">' + '<fgColor rgb=\"ffc6efce\" />' + '<bgColor indexed=\"64\" />' + '</patternFill>' + '</fill>' + '<fill>' + '<patternFill patternType=\"solid\">' + '<fgColor rgb=\"ffc6cfef\" />' + '<bgColor indexed=\"64\" />' + '</patternFill>' + '</fill>' + '</fills>' + '<borders count=\"2\">' + '<border>' + '<left />' + '<right />' + '<top />' + '<bottom />' + '<diagonal />' + '</border>' + '<border diagonalUp=\"false\" diagonalDown=\"false\">' + '<left style=\"thin\">' + '<color auto=\"1\" />' + '</left>' + '<right style=\"thin\">' + '<color auto=\"1\" />' + '</right>' + '<top style=\"thin\">' + '<color auto=\"1\" />' + '</top>' + '<bottom style=\"thin\">' + '<color auto=\"1\" />' + '</bottom>' + '<diagonal />' + '</border>' + '</borders>' + '<cellStyleXfs count=\"1\">' + '<xf numFmtId=\"0\" fontId=\"0\" fillId=\"0\" borderId=\"0\" />' + '</cellStyleXfs>' + '<cellXfs count=\"61\">' + '<xf numFmtId=\"0\" fontId=\"0\" fillId=\"0\" borderId=\"0\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"1\" fillId=\"0\" borderId=\"0\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"2\" fillId=\"0\" borderId=\"0\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"3\" fillId=\"0\" borderId=\"0\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"4\" fillId=\"0\" borderId=\"0\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"0\" fillId=\"2\" borderId=\"0\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"1\" fillId=\"2\" borderId=\"0\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"2\" fillId=\"2\" borderId=\"0\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"3\" fillId=\"2\" borderId=\"0\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"4\" fillId=\"2\" borderId=\"0\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"0\" fillId=\"3\" borderId=\"0\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"1\" fillId=\"3\" borderId=\"0\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"2\" fillId=\"3\" borderId=\"0\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"3\" fillId=\"3\" borderId=\"0\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"4\" fillId=\"3\" borderId=\"0\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"0\" fillId=\"4\" borderId=\"0\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"1\" fillId=\"4\" borderId=\"0\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"2\" fillId=\"4\" borderId=\"0\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"3\" fillId=\"4\" borderId=\"0\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"4\" fillId=\"4\" borderId=\"0\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"0\" fillId=\"5\" borderId=\"0\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"1\" fillId=\"5\" borderId=\"0\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"2\" fillId=\"5\" borderId=\"0\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"3\" fillId=\"5\" borderId=\"0\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"4\" fillId=\"5\" borderId=\"0\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"0\" fillId=\"0\" borderId=\"1\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"1\" fillId=\"0\" borderId=\"1\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"2\" fillId=\"0\" borderId=\"1\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"3\" fillId=\"0\" borderId=\"1\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"4\" fillId=\"0\" borderId=\"1\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"0\" fillId=\"2\" borderId=\"1\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"1\" fillId=\"2\" borderId=\"1\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"2\" fillId=\"2\" borderId=\"1\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"3\" fillId=\"2\" borderId=\"1\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"4\" fillId=\"2\" borderId=\"1\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"0\" fillId=\"3\" borderId=\"1\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"1\" fillId=\"3\" borderId=\"1\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"2\" fillId=\"3\" borderId=\"1\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"3\" fillId=\"3\" borderId=\"1\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"4\" fillId=\"3\" borderId=\"1\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"0\" fillId=\"4\" borderId=\"1\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"1\" fillId=\"4\" borderId=\"1\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"2\" fillId=\"4\" borderId=\"1\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"3\" fillId=\"4\" borderId=\"1\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"4\" fillId=\"4\" borderId=\"1\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"0\" fillId=\"5\" borderId=\"1\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"1\" fillId=\"5\" borderId=\"1\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"2\" fillId=\"5\" borderId=\"1\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"3\" fillId=\"5\" borderId=\"1\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"4\" fillId=\"5\" borderId=\"1\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"0\" fillId=\"0\" borderId=\"0\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\" xfId=\"0\" applyAlignment=\"1\">' + '<alignment horizontal=\"left\"/>' + '</xf>' + '<xf numFmtId=\"0\" fontId=\"0\" fillId=\"0\" borderId=\"0\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\" xfId=\"0\" applyAlignment=\"1\">' + '<alignment horizontal=\"center\"/>' + '</xf>' + '<xf numFmtId=\"0\" fontId=\"0\" fillId=\"0\" borderId=\"0\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\" xfId=\"0\" applyAlignment=\"1\">' + '<alignment horizontal=\"right\"/>' + '</xf>' + '<xf numFmtId=\"0\" fontId=\"0\" fillId=\"0\" borderId=\"0\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\" xfId=\"0\" applyAlignment=\"1\">' + '<alignment horizontal=\"fill\"/>' + '</xf>' + '<xf numFmtId=\"0\" fontId=\"0\" fillId=\"0\" borderId=\"0\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\" xfId=\"0\" applyAlignment=\"1\">' + '<alignment textRotation=\"90\"/>' + '</xf>' + '<xf numFmtId=\"0\" fontId=\"0\" fillId=\"0\" borderId=\"0\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\" xfId=\"0\" applyAlignment=\"1\">' + '<alignment wrapText=\"1\"/>' + '</xf>' + '<xf numFmtId=\"9\"   fontId=\"0\" fillId=\"0\" borderId=\"0\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\" xfId=\"0\" applyNumberFormat=\"1\"/>' + '<xf numFmtId=\"164\" fontId=\"0\" fillId=\"0\" borderId=\"0\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\" xfId=\"0\" applyNumberFormat=\"1\"/>' + '<xf numFmtId=\"165\" fontId=\"0\" fillId=\"0\" borderId=\"0\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\" xfId=\"0\" applyNumberFormat=\"1\"/>' + '<xf numFmtId=\"166\" fontId=\"0\" fillId=\"0\" borderId=\"0\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\" xfId=\"0\" applyNumberFormat=\"1\"/>' + '<xf numFmtId=\"167\" fontId=\"0\" fillId=\"0\" borderId=\"0\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\" xfId=\"0\" applyNumberFormat=\"1\"/>' + '<xf numFmtId=\"168\" fontId=\"0\" fillId=\"0\" borderId=\"0\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\" xfId=\"0\" applyNumberFormat=\"1\"/>' + '<xf numFmtId=\"169\" fontId=\"0\" fillId=\"0\" borderId=\"0\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\" xfId=\"0\" applyNumberFormat=\"1\"/>' + '<xf numFmtId=\"3\" fontId=\"0\" fillId=\"0\" borderId=\"0\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\" xfId=\"0\" applyNumberFormat=\"1\"/>' + '<xf numFmtId=\"4\" fontId=\"0\" fillId=\"0\" borderId=\"0\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\" xfId=\"0\" applyNumberFormat=\"1\"/>' + '</cellXfs>' + '<cellStyles count=\"1\">' + '<cellStyle name=\"Normal\" xfId=\"0\" builtinId=\"0\" />' + '</cellStyles>' + '<dxfs count=\"0\" />' + '<tableStyles count=\"0\" defaultTableStyle=\"TableStyleMedium9\" defaultPivotStyle=\"PivotStyleMedium4\" />' + '</styleSheet>'\n  }; // Note we could use 3 `for` loops for the styles, but when gzipped there is\n  // virtually no difference in size, since the above can be easily compressed\n  // Pattern matching for special number formats. Perhaps this should be exposed\n  // via an API in future?\n\n  var _excelSpecials = [{\n    match: /^\\-?\\d+\\.\\d%$/,\n    style: 60,\n    fmt: function fmt(d) {\n      return d / 100;\n    }\n  }, // Precent with d.p.\n  {\n    match: /^\\-?\\d+\\.?\\d*%$/,\n    style: 56,\n    fmt: function fmt(d) {\n      return d / 100;\n    }\n  }, // Percent\n  {\n    match: /^\\-?\\$[\\d,]+.?\\d*$/,\n    style: 57\n  }, // Dollars\n  {\n    match: /^\\-?£[\\d,]+.?\\d*$/,\n    style: 58\n  }, // Pounds\n  {\n    match: /^\\-?€[\\d,]+.?\\d*$/,\n    style: 59\n  }, // Euros\n  {\n    match: /^\\([\\d,]+\\)$/,\n    style: 61,\n    fmt: function fmt(d) {\n      return -1 * d.replace(/[\\(\\)]/g, '');\n    }\n  }, // Negative numbers indicated by brackets\n  {\n    match: /^\\([\\d,]+\\.\\d{2}\\)$/,\n    style: 62,\n    fmt: function fmt(d) {\n      return -1 * d.replace(/[\\(\\)]/g, '');\n    }\n  }, // Negative numbers indicated by brackets - 2d.p.\n  {\n    match: /^[\\d,]+$/,\n    style: 63\n  }, // Numbers with thousand separators\n  {\n    match: /^[\\d,]+\\.\\d{2}$/,\n    style: 64 // Numbers with 2d.p. and thousands separators\n\n  }];\n  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n   * DataTables options and methods\n   */\n  // Set the default SWF path\n\n  DataTable.Buttons.swfPath = '//cdn.datatables.net/buttons/' + DataTable.Buttons.version + '/swf/flashExport.swf'; // Method to allow Flash buttons to be resized when made visible - as they are\n  // of zero height and width if initialised hidden\n\n  DataTable.Api.register('buttons.resize()', function () {\n    $.each(ZeroClipboard_TableTools.clients, function (i, client) {\n      if (client.domElement !== undefined && client.domElement.parentNode) {\n        client.positionElement();\n      }\n    });\n  });\n  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n   * Button definitions\n   */\n  // Copy to clipboard\n\n  DataTable.ext.buttons.copyFlash = $.extend({}, flashButton, {\n    className: 'buttons-copy buttons-flash',\n    text: function text(dt) {\n      return dt.i18n('buttons.copy', 'Copy');\n    },\n    action: function action(e, dt, button, config) {\n      // Check that the trigger did actually occur due to a Flash activation\n      if (!config._fromFlash) {\n        return;\n      }\n\n      this.processing(true);\n      var flash = config._flash;\n\n      var exportData = _exportData(dt, config);\n\n      var info = dt.buttons.exportInfo(config);\n\n      var newline = _newLine(config);\n\n      var output = exportData.str;\n\n      if (info.title) {\n        output = info.title + newline + newline + output;\n      }\n\n      if (info.messageTop) {\n        output = info.messageTop + newline + newline + output;\n      }\n\n      if (info.messageBottom) {\n        output = output + newline + newline + info.messageBottom;\n      }\n\n      if (config.customize) {\n        output = config.customize(output, config, dt);\n      }\n\n      flash.setAction('copy');\n\n      _setText(flash, output);\n\n      this.processing(false);\n      dt.buttons.info(dt.i18n('buttons.copyTitle', 'Copy to clipboard'), dt.i18n('buttons.copySuccess', {\n        _: 'Copied %d rows to clipboard',\n        1: 'Copied 1 row to clipboard'\n      }, data.rows), 3000);\n    },\n    fieldSeparator: '\\t',\n    fieldBoundary: ''\n  }); // CSV save file\n\n  DataTable.ext.buttons.csvFlash = $.extend({}, flashButton, {\n    className: 'buttons-csv buttons-flash',\n    text: function text(dt) {\n      return dt.i18n('buttons.csv', 'CSV');\n    },\n    action: function action(e, dt, button, config) {\n      // Set the text\n      var flash = config._flash;\n\n      var data = _exportData(dt, config);\n\n      var info = dt.buttons.exportInfo(config);\n      var output = config.customize ? config.customize(data.str, config, dt) : data.str;\n      flash.setAction('csv');\n      flash.setFileName(info.filename);\n\n      _setText(flash, output);\n    },\n    escapeChar: '\"'\n  }); // Excel save file - this is really a CSV file using UTF-8 that Excel can read\n\n  DataTable.ext.buttons.excelFlash = $.extend({}, flashButton, {\n    className: 'buttons-excel buttons-flash',\n    text: function text(dt) {\n      return dt.i18n('buttons.excel', 'Excel');\n    },\n    action: function action(e, dt, button, config) {\n      this.processing(true);\n      var flash = config._flash;\n      var rowPos = 0;\n      var rels = $.parseXML(excelStrings['xl/worksheets/sheet1.xml']); //Parses xml\n\n      var relsGet = rels.getElementsByTagName(\"sheetData\")[0];\n      var xlsx = {\n        _rels: {\n          \".rels\": $.parseXML(excelStrings['_rels/.rels'])\n        },\n        xl: {\n          _rels: {\n            \"workbook.xml.rels\": $.parseXML(excelStrings['xl/_rels/workbook.xml.rels'])\n          },\n          \"workbook.xml\": $.parseXML(excelStrings['xl/workbook.xml']),\n          \"styles.xml\": $.parseXML(excelStrings['xl/styles.xml']),\n          \"worksheets\": {\n            \"sheet1.xml\": rels\n          }\n        },\n        \"[Content_Types].xml\": $.parseXML(excelStrings['[Content_Types].xml'])\n      };\n      var data = dt.buttons.exportData(config.exportOptions);\n      var currentRow, rowNode;\n\n      var addRow = function addRow(row) {\n        currentRow = rowPos + 1;\n        rowNode = _createNode(rels, \"row\", {\n          attr: {\n            r: currentRow\n          }\n        });\n\n        for (var i = 0, ien = row.length; i < ien; i++) {\n          // Concat both the Cell Columns as a letter and the Row of the cell.\n          var cellId = createCellPos(i) + '' + currentRow;\n          var cell = null; // For null, undefined of blank cell, continue so it doesn't create the _createNode\n\n          if (row[i] === null || row[i] === undefined || row[i] === '') {\n            if (config.createEmptyCells === true) {\n              row[i] = '';\n            } else {\n              continue;\n            }\n          }\n\n          row[i] = $.trim(row[i]); // Special number formatting options\n\n          for (var j = 0, jen = _excelSpecials.length; j < jen; j++) {\n            var special = _excelSpecials[j]; // TODO Need to provide the ability for the specials to say\n            // if they are returning a string, since at the moment it is\n            // assumed to be a number\n\n            if (row[i].match && !row[i].match(/^0\\d+/) && row[i].match(special.match)) {\n              var val = row[i].replace(/[^\\d\\.\\-]/g, '');\n\n              if (special.fmt) {\n                val = special.fmt(val);\n              }\n\n              cell = _createNode(rels, 'c', {\n                attr: {\n                  r: cellId,\n                  s: special.style\n                },\n                children: [_createNode(rels, 'v', {\n                  text: val\n                })]\n              });\n              break;\n            }\n          }\n\n          if (!cell) {\n            if (typeof row[i] === 'number' || row[i].match && row[i].match(/^-?\\d+(\\.\\d+)?$/) && !row[i].match(/^0\\d+/)) {\n              // Detect numbers - don't match numbers with leading zeros\n              // or a negative anywhere but the start\n              cell = _createNode(rels, 'c', {\n                attr: {\n                  t: 'n',\n                  r: cellId\n                },\n                children: [_createNode(rels, 'v', {\n                  text: row[i]\n                })]\n              });\n            } else {\n              // String output - replace non standard characters for text output\n              var text = !row[i].replace ? row[i] : row[i].replace(/[\\x00-\\x09\\x0B\\x0C\\x0E-\\x1F\\x7F-\\x9F]/g, '');\n              cell = _createNode(rels, 'c', {\n                attr: {\n                  t: 'inlineStr',\n                  r: cellId\n                },\n                children: {\n                  row: _createNode(rels, 'is', {\n                    children: {\n                      row: _createNode(rels, 't', {\n                        text: text\n                      })\n                    }\n                  })\n                }\n              });\n            }\n          }\n\n          rowNode.appendChild(cell);\n        }\n\n        relsGet.appendChild(rowNode);\n        rowPos++;\n      };\n\n      $('sheets sheet', xlsx.xl['workbook.xml']).attr('name', _sheetname(config));\n\n      if (config.customizeData) {\n        config.customizeData(data);\n      }\n\n      var mergeCells = function mergeCells(row, colspan) {\n        var mergeCells = $('mergeCells', rels);\n        mergeCells[0].appendChild(_createNode(rels, 'mergeCell', {\n          attr: {\n            ref: 'A' + row + ':' + createCellPos(colspan) + row\n          }\n        }));\n        mergeCells.attr('count', mergeCells.attr('count') + 1);\n        $('row:eq(' + (row - 1) + ') c', rels).attr('s', '51'); // centre\n      }; // Title and top messages\n\n\n      var exportInfo = dt.buttons.exportInfo(config);\n\n      if (exportInfo.title) {\n        addRow([exportInfo.title], rowPos);\n        mergeCells(rowPos, data.header.length - 1);\n      }\n\n      if (exportInfo.messageTop) {\n        addRow([exportInfo.messageTop], rowPos);\n        mergeCells(rowPos, data.header.length - 1);\n      } // Table itself\n\n\n      if (config.header) {\n        addRow(data.header, rowPos);\n        $('row:last c', rels).attr('s', '2'); // bold\n      }\n\n      for (var n = 0, ie = data.body.length; n < ie; n++) {\n        addRow(data.body[n], rowPos);\n      }\n\n      if (config.footer && data.footer) {\n        addRow(data.footer, rowPos);\n        $('row:last c', rels).attr('s', '2'); // bold\n      } // Below the table\n\n\n      if (exportInfo.messageBottom) {\n        addRow([exportInfo.messageBottom], rowPos);\n        mergeCells(rowPos, data.header.length - 1);\n      } // Set column widths\n\n\n      var cols = _createNode(rels, 'cols');\n\n      $('worksheet', rels).prepend(cols);\n\n      for (var i = 0, ien = data.header.length; i < ien; i++) {\n        cols.appendChild(_createNode(rels, 'col', {\n          attr: {\n            min: i + 1,\n            max: i + 1,\n            width: _excelColWidth(data, i),\n            customWidth: 1\n          }\n        }));\n      } // Let the developer customise the document if they want to\n\n\n      if (config.customize) {\n        config.customize(xlsx, config, dt);\n      }\n\n      _xlsxToStrings(xlsx);\n\n      flash.setAction('excel');\n      flash.setFileName(exportInfo.filename);\n      flash.setSheetData(xlsx);\n\n      _setText(flash, '');\n\n      this.processing(false);\n    },\n    extension: '.xlsx',\n    createEmptyCells: false\n  }); // PDF export\n\n  DataTable.ext.buttons.pdfFlash = $.extend({}, flashButton, {\n    className: 'buttons-pdf buttons-flash',\n    text: function text(dt) {\n      return dt.i18n('buttons.pdf', 'PDF');\n    },\n    action: function action(e, dt, button, config) {\n      this.processing(true); // Set the text\n\n      var flash = config._flash;\n      var data = dt.buttons.exportData(config.exportOptions);\n      var info = dt.buttons.exportInfo(config);\n      var totalWidth = dt.table().node().offsetWidth; // Calculate the column width ratios for layout of the table in the PDF\n\n      var ratios = dt.columns(config.columns).indexes().map(function (idx) {\n        return dt.column(idx).header().offsetWidth / totalWidth;\n      });\n      flash.setAction('pdf');\n      flash.setFileName(info.filename);\n\n      _setText(flash, JSON.stringify({\n        title: info.title || '',\n        messageTop: info.messageTop || '',\n        messageBottom: info.messageBottom || '',\n        colWidth: ratios.toArray(),\n        orientation: config.orientation,\n        size: config.pageSize,\n        header: config.header ? data.header : null,\n        footer: config.footer ? data.footer : null,\n        body: data.body\n      }));\n\n      this.processing(false);\n    },\n    extension: '.pdf',\n    orientation: 'portrait',\n    pageSize: 'A4',\n    newline: '\\n'\n  });\n  return DataTable.Buttons;\n});","/*! Bootstrap 3 styling wrapper for ColReorder\n * ©2018 SpryMedia Ltd - datatables.net/license\n */\n(function (factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD\n    define(['jquery', 'datatables.net-bs', 'datatables.net-colreorder'], function ($) {\n      return factory($, window, document);\n    });\n  } else if (typeof exports === 'object') {\n    // CommonJS\n    module.exports = function (root, $) {\n      if (!root) {\n        root = window;\n      }\n\n      if (!$ || !$.fn.dataTable) {\n        $ = require('datatables.net-bs')(root, $).$;\n      }\n\n      if (!$.fn.dataTable.ColReorder) {\n        require('datatables.net-colreorder')(root, $);\n      }\n\n      return factory($, root, root.document);\n    };\n  } else {\n    // Browser\n    factory(jQuery, window, document);\n  }\n})(function ($, window, document, undefined) {\n  return $.fn.dataTable;\n});","/*! ColReorder 1.5.1\n * ©2010-2018 SpryMedia Ltd - datatables.net/license\n */\n\n/**\n * @summary     ColReorder\n * @description Provide the ability to reorder columns in a DataTable\n * @version     1.5.1\n * @file        dataTables.colReorder.js\n * @author      SpryMedia Ltd (www.sprymedia.co.uk)\n * @contact     www.sprymedia.co.uk/contact\n * @copyright   Copyright 2010-2018 SpryMedia Ltd.\n *\n * This source file is free software, available under the following license:\n *   MIT license - http://datatables.net/license/mit\n *\n * This source file is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n * or FITNESS FOR A PARTICULAR PURPOSE. See the license files for details.\n *\n * For details please refer to: http://www.datatables.net\n */\n(function (factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD\n    define(['jquery', 'datatables.net'], function ($) {\n      return factory($, window, document);\n    });\n  } else if (typeof exports === 'object') {\n    // CommonJS\n    module.exports = function (root, $) {\n      if (!root) {\n        root = window;\n      }\n\n      if (!$ || !$.fn.dataTable) {\n        $ = require('datatables.net')(root, $).$;\n      }\n\n      return factory($, root, root.document);\n    };\n  } else {\n    // Browser\n    factory(jQuery, window, document);\n  }\n})(function ($, window, document, undefined) {\n  'use strict';\n\n  var DataTable = $.fn.dataTable;\n  /**\n   * Switch the key value pairing of an index array to be value key (i.e. the old value is now the\n   * key). For example consider [ 2, 0, 1 ] this would be returned as [ 1, 2, 0 ].\n   *  @method  fnInvertKeyValues\n   *  @param   array aIn Array to switch around\n   *  @returns array\n   */\n\n  function fnInvertKeyValues(aIn) {\n    var aRet = [];\n\n    for (var i = 0, iLen = aIn.length; i < iLen; i++) {\n      aRet[aIn[i]] = i;\n    }\n\n    return aRet;\n  }\n  /**\n   * Modify an array by switching the position of two elements\n   *  @method  fnArraySwitch\n   *  @param   array aArray Array to consider, will be modified by reference (i.e. no return)\n   *  @param   int iFrom From point\n   *  @param   int iTo Insert point\n   *  @returns void\n   */\n\n\n  function fnArraySwitch(aArray, iFrom, iTo) {\n    var mStore = aArray.splice(iFrom, 1)[0];\n    aArray.splice(iTo, 0, mStore);\n  }\n  /**\n   * Switch the positions of nodes in a parent node (note this is specifically designed for\n   * table rows). Note this function considers all element nodes under the parent!\n   *  @method  fnDomSwitch\n   *  @param   string sTag Tag to consider\n   *  @param   int iFrom Element to move\n   *  @param   int Point to element the element to (before this point), can be null for append\n   *  @returns void\n   */\n\n\n  function fnDomSwitch(nParent, iFrom, iTo) {\n    var anTags = [];\n\n    for (var i = 0, iLen = nParent.childNodes.length; i < iLen; i++) {\n      if (nParent.childNodes[i].nodeType == 1) {\n        anTags.push(nParent.childNodes[i]);\n      }\n    }\n\n    var nStore = anTags[iFrom];\n\n    if (iTo !== null) {\n      nParent.insertBefore(nStore, anTags[iTo]);\n    } else {\n      nParent.appendChild(nStore);\n    }\n  }\n  /**\n   * Plug-in for DataTables which will reorder the internal column structure by taking the column\n   * from one position (iFrom) and insert it into a given point (iTo).\n   *  @method  $.fn.dataTableExt.oApi.fnColReorder\n   *  @param   object oSettings DataTables settings object - automatically added by DataTables!\n   *  @param   int iFrom Take the column to be repositioned from this point\n   *  @param   int iTo and insert it into this point\n   *  @param   bool drop Indicate if the reorder is the final one (i.e. a drop)\n   *    not a live reorder\n   *  @param   bool invalidateRows speeds up processing if false passed\n   *  @returns void\n   */\n\n\n  $.fn.dataTableExt.oApi.fnColReorder = function (oSettings, iFrom, iTo, drop, invalidateRows) {\n    var i,\n        iLen,\n        j,\n        jLen,\n        jen,\n        iCols = oSettings.aoColumns.length,\n        nTrs,\n        oCol;\n\n    var attrMap = function attrMap(obj, prop, mapping) {\n      if (!obj[prop] || typeof obj[prop] === 'function') {\n        return;\n      }\n\n      var a = obj[prop].split('.');\n      var num = a.shift();\n\n      if (isNaN(num * 1)) {\n        return;\n      }\n\n      obj[prop] = mapping[num * 1] + '.' + a.join('.');\n    };\n    /* Sanity check in the input */\n\n\n    if (iFrom == iTo) {\n      /* Pointless reorder */\n      return;\n    }\n\n    if (iFrom < 0 || iFrom >= iCols) {\n      this.oApi._fnLog(oSettings, 1, \"ColReorder 'from' index is out of bounds: \" + iFrom);\n\n      return;\n    }\n\n    if (iTo < 0 || iTo >= iCols) {\n      this.oApi._fnLog(oSettings, 1, \"ColReorder 'to' index is out of bounds: \" + iTo);\n\n      return;\n    }\n    /*\n     * Calculate the new column array index, so we have a mapping between the old and new\n     */\n\n\n    var aiMapping = [];\n\n    for (i = 0, iLen = iCols; i < iLen; i++) {\n      aiMapping[i] = i;\n    }\n\n    fnArraySwitch(aiMapping, iFrom, iTo);\n    var aiInvertMapping = fnInvertKeyValues(aiMapping);\n    /*\n     * Convert all internal indexing to the new column order indexes\n     */\n\n    /* Sorting */\n\n    for (i = 0, iLen = oSettings.aaSorting.length; i < iLen; i++) {\n      oSettings.aaSorting[i][0] = aiInvertMapping[oSettings.aaSorting[i][0]];\n    }\n    /* Fixed sorting */\n\n\n    if (oSettings.aaSortingFixed !== null) {\n      for (i = 0, iLen = oSettings.aaSortingFixed.length; i < iLen; i++) {\n        oSettings.aaSortingFixed[i][0] = aiInvertMapping[oSettings.aaSortingFixed[i][0]];\n      }\n    }\n    /* Data column sorting (the column which the sort for a given column should take place on) */\n\n\n    for (i = 0, iLen = iCols; i < iLen; i++) {\n      oCol = oSettings.aoColumns[i];\n\n      for (j = 0, jLen = oCol.aDataSort.length; j < jLen; j++) {\n        oCol.aDataSort[j] = aiInvertMapping[oCol.aDataSort[j]];\n      } // Update the column indexes\n\n\n      oCol.idx = aiInvertMapping[oCol.idx];\n    } // Update 1.10 optimised sort class removal variable\n\n\n    $.each(oSettings.aLastSort, function (i, val) {\n      oSettings.aLastSort[i].src = aiInvertMapping[val.src];\n    });\n    /* Update the Get and Set functions for each column */\n\n    for (i = 0, iLen = iCols; i < iLen; i++) {\n      oCol = oSettings.aoColumns[i];\n\n      if (typeof oCol.mData == 'number') {\n        oCol.mData = aiInvertMapping[oCol.mData];\n      } else if ($.isPlainObject(oCol.mData)) {\n        // HTML5 data sourced\n        attrMap(oCol.mData, '_', aiInvertMapping);\n        attrMap(oCol.mData, 'filter', aiInvertMapping);\n        attrMap(oCol.mData, 'sort', aiInvertMapping);\n        attrMap(oCol.mData, 'type', aiInvertMapping);\n      }\n    }\n    /*\n     * Move the DOM elements\n     */\n\n\n    if (oSettings.aoColumns[iFrom].bVisible) {\n      /* Calculate the current visible index and the point to insert the node before. The insert\n       * before needs to take into account that there might not be an element to insert before,\n       * in which case it will be null, and an appendChild should be used\n       */\n      var iVisibleIndex = this.oApi._fnColumnIndexToVisible(oSettings, iFrom);\n\n      var iInsertBeforeIndex = null;\n      i = iTo < iFrom ? iTo : iTo + 1;\n\n      while (iInsertBeforeIndex === null && i < iCols) {\n        iInsertBeforeIndex = this.oApi._fnColumnIndexToVisible(oSettings, i);\n        i++;\n      }\n      /* Header */\n\n\n      nTrs = oSettings.nTHead.getElementsByTagName('tr');\n\n      for (i = 0, iLen = nTrs.length; i < iLen; i++) {\n        fnDomSwitch(nTrs[i], iVisibleIndex, iInsertBeforeIndex);\n      }\n      /* Footer */\n\n\n      if (oSettings.nTFoot !== null) {\n        nTrs = oSettings.nTFoot.getElementsByTagName('tr');\n\n        for (i = 0, iLen = nTrs.length; i < iLen; i++) {\n          fnDomSwitch(nTrs[i], iVisibleIndex, iInsertBeforeIndex);\n        }\n      }\n      /* Body */\n\n\n      for (i = 0, iLen = oSettings.aoData.length; i < iLen; i++) {\n        if (oSettings.aoData[i].nTr !== null) {\n          fnDomSwitch(oSettings.aoData[i].nTr, iVisibleIndex, iInsertBeforeIndex);\n        }\n      }\n    }\n    /*\n     * Move the internal array elements\n     */\n\n    /* Columns */\n\n\n    fnArraySwitch(oSettings.aoColumns, iFrom, iTo); // regenerate the get / set functions\n\n    for (i = 0, iLen = iCols; i < iLen; i++) {\n      oSettings.oApi._fnColumnOptions(oSettings, i, {});\n    }\n    /* Search columns */\n\n\n    fnArraySwitch(oSettings.aoPreSearchCols, iFrom, iTo);\n    /* Array array - internal data anodes cache */\n\n    for (i = 0, iLen = oSettings.aoData.length; i < iLen; i++) {\n      var data = oSettings.aoData[i];\n      var cells = data.anCells;\n\n      if (cells) {\n        fnArraySwitch(cells, iFrom, iTo); // Longer term, should this be moved into the DataTables' invalidate\n        // methods?\n\n        for (j = 0, jen = cells.length; j < jen; j++) {\n          if (cells[j] && cells[j]._DT_CellIndex) {\n            cells[j]._DT_CellIndex.column = j;\n          }\n        }\n      } // For DOM sourced data, the invalidate will reread the cell into\n      // the data array, but for data sources as an array, they need to\n      // be flipped\n\n\n      if (data.src !== 'dom' && $.isArray(data._aData)) {\n        fnArraySwitch(data._aData, iFrom, iTo);\n      }\n    }\n    /* Reposition the header elements in the header layout array */\n\n\n    for (i = 0, iLen = oSettings.aoHeader.length; i < iLen; i++) {\n      fnArraySwitch(oSettings.aoHeader[i], iFrom, iTo);\n    }\n\n    if (oSettings.aoFooter !== null) {\n      for (i = 0, iLen = oSettings.aoFooter.length; i < iLen; i++) {\n        fnArraySwitch(oSettings.aoFooter[i], iFrom, iTo);\n      }\n    }\n\n    if (invalidateRows || invalidateRows === undefined) {\n      $.fn.dataTable.Api(oSettings).rows().invalidate();\n    }\n    /*\n     * Update DataTables' event handlers\n     */\n\n    /* Sort listener */\n\n\n    for (i = 0, iLen = iCols; i < iLen; i++) {\n      $(oSettings.aoColumns[i].nTh).off('.DT');\n\n      this.oApi._fnSortAttachListener(oSettings, oSettings.aoColumns[i].nTh, i);\n    }\n    /* Fire an event so other plug-ins can update */\n\n\n    $(oSettings.oInstance).trigger('column-reorder.dt', [oSettings, {\n      from: iFrom,\n      to: iTo,\n      mapping: aiInvertMapping,\n      drop: drop,\n      // Old style parameters for compatibility\n      iFrom: iFrom,\n      iTo: iTo,\n      aiInvertMapping: aiInvertMapping\n    }]);\n  };\n  /**\n   * ColReorder provides column visibility control for DataTables\n   * @class ColReorder\n   * @constructor\n   * @param {object} dt DataTables settings object\n   * @param {object} opts ColReorder options\n   */\n\n\n  var ColReorder = function ColReorder(dt, opts) {\n    var settings = new $.fn.dataTable.Api(dt).settings()[0]; // Ensure that we can't initialise on the same table twice\n\n    if (settings._colReorder) {\n      return settings._colReorder;\n    } // Allow the options to be a boolean for defaults\n\n\n    if (opts === true) {\n      opts = {};\n    } // Convert from camelCase to Hungarian, just as DataTables does\n\n\n    var camelToHungarian = $.fn.dataTable.camelToHungarian;\n\n    if (camelToHungarian) {\n      camelToHungarian(ColReorder.defaults, ColReorder.defaults, true);\n      camelToHungarian(ColReorder.defaults, opts || {});\n    }\n    /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n     * Public class variables\n     * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\n\n    /**\n     * @namespace Settings object which contains customisable information for ColReorder instance\n     */\n\n\n    this.s = {\n      /**\n       * DataTables settings object\n       *  @property dt\n       *  @type     Object\n       *  @default  null\n       */\n      \"dt\": null,\n\n      /**\n       * Enable flag\n       *  @property dt\n       *  @type     Object\n       *  @default  null\n       */\n      \"enable\": null,\n\n      /**\n       * Initialisation object used for this instance\n       *  @property init\n       *  @type     object\n       *  @default  {}\n       */\n      \"init\": $.extend(true, {}, ColReorder.defaults, opts),\n\n      /**\n       * Number of columns to fix (not allow to be reordered)\n       *  @property fixed\n       *  @type     int\n       *  @default  0\n       */\n      \"fixed\": 0,\n\n      /**\n       * Number of columns to fix counting from right (not allow to be reordered)\n       *  @property fixedRight\n       *  @type     int\n       *  @default  0\n       */\n      \"fixedRight\": 0,\n\n      /**\n       * Callback function for once the reorder has been done\n       *  @property reorderCallback\n       *  @type     function\n       *  @default  null\n       */\n      \"reorderCallback\": null,\n\n      /**\n       * @namespace Information used for the mouse drag\n       */\n      \"mouse\": {\n        \"startX\": -1,\n        \"startY\": -1,\n        \"offsetX\": -1,\n        \"offsetY\": -1,\n        \"target\": -1,\n        \"targetIndex\": -1,\n        \"fromIndex\": -1\n      },\n\n      /**\n       * Information which is used for positioning the insert cusor and knowing where to do the\n       * insert. Array of objects with the properties:\n       *   x: x-axis position\n       *   to: insert point\n       *  @property aoTargets\n       *  @type     array\n       *  @default  []\n       */\n      \"aoTargets\": []\n    };\n    /**\n     * @namespace Common and useful DOM elements for the class instance\n     */\n\n    this.dom = {\n      /**\n       * Dragging element (the one the mouse is moving)\n       *  @property drag\n       *  @type     element\n       *  @default  null\n       */\n      \"drag\": null,\n\n      /**\n       * The insert cursor\n       *  @property pointer\n       *  @type     element\n       *  @default  null\n       */\n      \"pointer\": null\n    };\n    /* Constructor logic */\n\n    this.s.enable = this.s.init.bEnable;\n    this.s.dt = settings;\n    this.s.dt._colReorder = this;\n\n    this._fnConstruct();\n\n    return this;\n  };\n\n  $.extend(ColReorder.prototype, {\n    /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n     * Public methods\n     * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\n\n    /**\n     * Enable / disable end user interaction\n     */\n    fnEnable: function fnEnable(flag) {\n      if (flag === false) {\n        return fnDisable();\n      }\n\n      this.s.enable = true;\n    },\n\n    /**\n     * Disable end user interaction\n     */\n    fnDisable: function fnDisable() {\n      this.s.enable = false;\n    },\n\n    /**\n     * Reset the column ordering to the original ordering that was detected on\n     * start up.\n     *  @return {this} Returns `this` for chaining.\n     *\n     *  @example\n     *    // DataTables initialisation with ColReorder\n     *    var table = $('#example').dataTable( {\n     *        \"sDom\": 'Rlfrtip'\n     *    } );\n     *\n     *    // Add click event to a button to reset the ordering\n     *    $('#resetOrdering').click( function (e) {\n     *        e.preventDefault();\n     *        $.fn.dataTable.ColReorder( table ).fnReset();\n     *    } );\n     */\n    \"fnReset\": function fnReset() {\n      this._fnOrderColumns(this.fnOrder());\n\n      return this;\n    },\n\n    /**\n     * `Deprecated` - Get the current order of the columns, as an array.\n     *  @return {array} Array of column identifiers\n     *  @deprecated `fnOrder` should be used in preference to this method.\n     *      `fnOrder` acts as a getter/setter.\n     */\n    \"fnGetCurrentOrder\": function fnGetCurrentOrder() {\n      return this.fnOrder();\n    },\n\n    /**\n     * Get the current order of the columns, as an array. Note that the values\n     * given in the array are unique identifiers for each column. Currently\n     * these are the original ordering of the columns that was detected on\n     * start up, but this could potentially change in future.\n     *  @return {array} Array of column identifiers\n     *\n     *  @example\n     *    // Get column ordering for the table\n     *    var order = $.fn.dataTable.ColReorder( dataTable ).fnOrder();\n     */\n\n    /**\n    * Set the order of the columns, from the positions identified in the\n    * ordering array given. Note that ColReorder takes a brute force approach\n    * to reordering, so it is possible multiple reordering events will occur\n    * before the final order is settled upon.\n    *  @param {array} [set] Array of column identifiers in the new order. Note\n    *    that every column must be included, uniquely, in this array.\n    *  @return {this} Returns `this` for chaining.\n    *\n    *  @example\n    *    // Swap the first and second columns\n    *    $.fn.dataTable.ColReorder( dataTable ).fnOrder( [1, 0, 2, 3, 4] );\n    *\n    *  @example\n    *    // Move the first column to the end for the table `#example`\n    *    var curr = $.fn.dataTable.ColReorder( '#example' ).fnOrder();\n    *    var first = curr.shift();\n    *    curr.push( first );\n    *    $.fn.dataTable.ColReorder( '#example' ).fnOrder( curr );\n    *\n    *  @example\n    *    // Reverse the table's order\n    *    $.fn.dataTable.ColReorder( '#example' ).fnOrder(\n    *      $.fn.dataTable.ColReorder( '#example' ).fnOrder().reverse()\n    *    );\n    */\n    \"fnOrder\": function fnOrder(set, original) {\n      var a = [],\n          i,\n          ien,\n          j,\n          jen;\n      var columns = this.s.dt.aoColumns;\n\n      if (set === undefined) {\n        for (i = 0, ien = columns.length; i < ien; i++) {\n          a.push(columns[i]._ColReorder_iOrigCol);\n        }\n\n        return a;\n      } // The order given is based on the original indexes, rather than the\n      // existing ones, so we need to translate from the original to current\n      // before then doing the order\n\n\n      if (original) {\n        var order = this.fnOrder();\n\n        for (i = 0, ien = set.length; i < ien; i++) {\n          a.push($.inArray(set[i], order));\n        }\n\n        set = a;\n      }\n\n      this._fnOrderColumns(fnInvertKeyValues(set));\n\n      return this;\n    },\n\n    /**\n     * Convert from the original column index, to the original\n     *\n     * @param  {int|array} idx Index(es) to convert\n     * @param  {string} dir Transpose direction - `fromOriginal` / `toCurrent`\n     *   or `'toOriginal` / `fromCurrent`\n     * @return {int|array}     Converted values\n     */\n    fnTranspose: function fnTranspose(idx, dir) {\n      if (!dir) {\n        dir = 'toCurrent';\n      }\n\n      var order = this.fnOrder();\n      var columns = this.s.dt.aoColumns;\n\n      if (dir === 'toCurrent') {\n        // Given an original index, want the current\n        return !$.isArray(idx) ? $.inArray(idx, order) : $.map(idx, function (index) {\n          return $.inArray(index, order);\n        });\n      } else {\n        // Given a current index, want the original\n        return !$.isArray(idx) ? columns[idx]._ColReorder_iOrigCol : $.map(idx, function (index) {\n          return columns[index]._ColReorder_iOrigCol;\n        });\n      }\n    },\n\n    /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n     * Private methods (they are of course public in JS, but recommended as private)\n     * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\n\n    /**\n     * Constructor logic\n     *  @method  _fnConstruct\n     *  @returns void\n     *  @private\n     */\n    \"_fnConstruct\": function _fnConstruct() {\n      var that = this;\n      var iLen = this.s.dt.aoColumns.length;\n      var table = this.s.dt.nTable;\n      var i;\n      /* Columns discounted from reordering - counting left to right */\n\n      if (this.s.init.iFixedColumns) {\n        this.s.fixed = this.s.init.iFixedColumns;\n      }\n\n      if (this.s.init.iFixedColumnsLeft) {\n        this.s.fixed = this.s.init.iFixedColumnsLeft;\n      }\n      /* Columns discounted from reordering - counting right to left */\n\n\n      this.s.fixedRight = this.s.init.iFixedColumnsRight ? this.s.init.iFixedColumnsRight : 0;\n      /* Drop callback initialisation option */\n\n      if (this.s.init.fnReorderCallback) {\n        this.s.reorderCallback = this.s.init.fnReorderCallback;\n      }\n      /* Add event handlers for the drag and drop, and also mark the original column order */\n\n\n      for (i = 0; i < iLen; i++) {\n        if (i > this.s.fixed - 1 && i < iLen - this.s.fixedRight) {\n          this._fnMouseListener(i, this.s.dt.aoColumns[i].nTh);\n        }\n        /* Mark the original column order for later reference */\n\n\n        this.s.dt.aoColumns[i]._ColReorder_iOrigCol = i;\n      }\n      /* State saving */\n\n\n      this.s.dt.oApi._fnCallbackReg(this.s.dt, 'aoStateSaveParams', function (oS, oData) {\n        that._fnStateSave.call(that, oData);\n      }, \"ColReorder_State\");\n      /* An initial column order has been specified */\n\n\n      var aiOrder = null;\n\n      if (this.s.init.aiOrder) {\n        aiOrder = this.s.init.aiOrder.slice();\n      }\n      /* State loading, overrides the column order given */\n\n\n      if (this.s.dt.oLoadedState && typeof this.s.dt.oLoadedState.ColReorder != 'undefined' && this.s.dt.oLoadedState.ColReorder.length == this.s.dt.aoColumns.length) {\n        aiOrder = this.s.dt.oLoadedState.ColReorder;\n      }\n      /* If we have an order to apply - do so */\n\n\n      if (aiOrder) {\n        /* We might be called during or after the DataTables initialisation. If before, then we need\n         * to wait until the draw is done, if after, then do what we need to do right away\n         */\n        if (!that.s.dt._bInitComplete) {\n          var bDone = false;\n          $(table).on('draw.dt.colReorder', function () {\n            if (!that.s.dt._bInitComplete && !bDone) {\n              bDone = true;\n              var resort = fnInvertKeyValues(aiOrder);\n\n              that._fnOrderColumns.call(that, resort);\n            }\n          });\n        } else {\n          var resort = fnInvertKeyValues(aiOrder);\n\n          that._fnOrderColumns.call(that, resort);\n        }\n      } else {\n        this._fnSetColumnIndexes();\n      } // Destroy clean up\n\n\n      $(table).on('destroy.dt.colReorder', function () {\n        $(table).off('destroy.dt.colReorder draw.dt.colReorder');\n        $.each(that.s.dt.aoColumns, function (i, column) {\n          $(column.nTh).off('.ColReorder');\n          $(column.nTh).removeAttr('data-column-index');\n        });\n        that.s.dt._colReorder = null;\n        that.s = null;\n      });\n    },\n\n    /**\n     * Set the column order from an array\n     *  @method  _fnOrderColumns\n     *  @param   array a An array of integers which dictate the column order that should be applied\n     *  @returns void\n     *  @private\n     */\n    \"_fnOrderColumns\": function _fnOrderColumns(a) {\n      var changed = false;\n\n      if (a.length != this.s.dt.aoColumns.length) {\n        this.s.dt.oInstance.oApi._fnLog(this.s.dt, 1, \"ColReorder - array reorder does not \" + \"match known number of columns. Skipping.\");\n\n        return;\n      }\n\n      for (var i = 0, iLen = a.length; i < iLen; i++) {\n        var currIndex = $.inArray(i, a);\n\n        if (i != currIndex) {\n          /* Reorder our switching array */\n          fnArraySwitch(a, currIndex, i);\n          /* Do the column reorder in the table */\n\n          this.s.dt.oInstance.fnColReorder(currIndex, i, true, false);\n          changed = true;\n        }\n      }\n\n      this._fnSetColumnIndexes(); // Has anything actually changed? If not, then nothing else to do\n\n\n      if (!changed) {\n        return;\n      }\n\n      $.fn.dataTable.Api(this.s.dt).rows().invalidate();\n      /* When scrolling we need to recalculate the column sizes to allow for the shift */\n\n      if (this.s.dt.oScroll.sX !== \"\" || this.s.dt.oScroll.sY !== \"\") {\n        this.s.dt.oInstance.fnAdjustColumnSizing(false);\n      }\n      /* Save the state */\n\n\n      this.s.dt.oInstance.oApi._fnSaveState(this.s.dt);\n\n      if (this.s.reorderCallback !== null) {\n        this.s.reorderCallback.call(this);\n      }\n    },\n\n    /**\n     * Because we change the indexes of columns in the table, relative to their starting point\n     * we need to reorder the state columns to what they are at the starting point so we can\n     * then rearrange them again on state load!\n     *  @method  _fnStateSave\n     *  @param   object oState DataTables state\n     *  @returns string JSON encoded cookie string for DataTables\n     *  @private\n     */\n    \"_fnStateSave\": function _fnStateSave(oState) {\n      var i, iLen, aCopy, iOrigColumn;\n      var oSettings = this.s.dt;\n      var columns = oSettings.aoColumns;\n      oState.ColReorder = [];\n      /* Sorting */\n\n      if (oState.aaSorting) {\n        // 1.10.0-\n        for (i = 0; i < oState.aaSorting.length; i++) {\n          oState.aaSorting[i][0] = columns[oState.aaSorting[i][0]]._ColReorder_iOrigCol;\n        }\n\n        var aSearchCopy = $.extend(true, [], oState.aoSearchCols);\n\n        for (i = 0, iLen = columns.length; i < iLen; i++) {\n          iOrigColumn = columns[i]._ColReorder_iOrigCol;\n          /* Column filter */\n\n          oState.aoSearchCols[iOrigColumn] = aSearchCopy[i];\n          /* Visibility */\n\n          oState.abVisCols[iOrigColumn] = columns[i].bVisible;\n          /* Column reordering */\n\n          oState.ColReorder.push(iOrigColumn);\n        }\n      } else if (oState.order) {\n        // 1.10.1+\n        for (i = 0; i < oState.order.length; i++) {\n          oState.order[i][0] = columns[oState.order[i][0]]._ColReorder_iOrigCol;\n        }\n\n        var stateColumnsCopy = $.extend(true, [], oState.columns);\n\n        for (i = 0, iLen = columns.length; i < iLen; i++) {\n          iOrigColumn = columns[i]._ColReorder_iOrigCol;\n          /* Columns */\n\n          oState.columns[iOrigColumn] = stateColumnsCopy[i];\n          /* Column reordering */\n\n          oState.ColReorder.push(iOrigColumn);\n        }\n      }\n    },\n\n    /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n     * Mouse drop and drag\n     */\n\n    /**\n     * Add a mouse down listener to a particluar TH element\n     *  @method  _fnMouseListener\n     *  @param   int i Column index\n     *  @param   element nTh TH element clicked on\n     *  @returns void\n     *  @private\n     */\n    \"_fnMouseListener\": function _fnMouseListener(i, nTh) {\n      var that = this;\n      $(nTh).on('mousedown.ColReorder', function (e) {\n        if (that.s.enable) {\n          that._fnMouseDown.call(that, e, nTh);\n        }\n      }).on('touchstart.ColReorder', function (e) {\n        if (that.s.enable) {\n          that._fnMouseDown.call(that, e, nTh);\n        }\n      });\n    },\n\n    /**\n     * Mouse down on a TH element in the table header\n     *  @method  _fnMouseDown\n     *  @param   event e Mouse event\n     *  @param   element nTh TH element to be dragged\n     *  @returns void\n     *  @private\n     */\n    \"_fnMouseDown\": function _fnMouseDown(e, nTh) {\n      var that = this;\n      /* Store information about the mouse position */\n\n      var target = $(e.target).closest('th, td');\n      var offset = target.offset();\n      var idx = parseInt($(nTh).attr('data-column-index'), 10);\n\n      if (idx === undefined) {\n        return;\n      }\n\n      this.s.mouse.startX = this._fnCursorPosition(e, 'pageX');\n      this.s.mouse.startY = this._fnCursorPosition(e, 'pageY');\n      this.s.mouse.offsetX = this._fnCursorPosition(e, 'pageX') - offset.left;\n      this.s.mouse.offsetY = this._fnCursorPosition(e, 'pageY') - offset.top;\n      this.s.mouse.target = this.s.dt.aoColumns[idx].nTh; //target[0];\n\n      this.s.mouse.targetIndex = idx;\n      this.s.mouse.fromIndex = idx;\n\n      this._fnRegions();\n      /* Add event handlers to the document */\n\n\n      $(document).on('mousemove.ColReorder touchmove.ColReorder', function (e) {\n        that._fnMouseMove.call(that, e);\n      }).on('mouseup.ColReorder touchend.ColReorder', function (e) {\n        that._fnMouseUp.call(that, e);\n      });\n    },\n\n    /**\n     * Deal with a mouse move event while dragging a node\n     *  @method  _fnMouseMove\n     *  @param   event e Mouse event\n     *  @returns void\n     *  @private\n     */\n    \"_fnMouseMove\": function _fnMouseMove(e) {\n      var that = this;\n\n      if (this.dom.drag === null) {\n        /* Only create the drag element if the mouse has moved a specific distance from the start\n         * point - this allows the user to make small mouse movements when sorting and not have a\n         * possibly confusing drag element showing up\n         */\n        if (Math.pow(Math.pow(this._fnCursorPosition(e, 'pageX') - this.s.mouse.startX, 2) + Math.pow(this._fnCursorPosition(e, 'pageY') - this.s.mouse.startY, 2), 0.5) < 5) {\n          return;\n        }\n\n        this._fnCreateDragNode();\n      }\n      /* Position the element - we respect where in the element the click occured */\n\n\n      this.dom.drag.css({\n        left: this._fnCursorPosition(e, 'pageX') - this.s.mouse.offsetX,\n        top: this._fnCursorPosition(e, 'pageY') - this.s.mouse.offsetY\n      });\n      /* Based on the current mouse position, calculate where the insert should go */\n\n      var bSet = false;\n      var lastToIndex = this.s.mouse.toIndex;\n\n      for (var i = 1, iLen = this.s.aoTargets.length; i < iLen; i++) {\n        if (this._fnCursorPosition(e, 'pageX') < this.s.aoTargets[i - 1].x + (this.s.aoTargets[i].x - this.s.aoTargets[i - 1].x) / 2) {\n          this.dom.pointer.css('left', this.s.aoTargets[i - 1].x);\n          this.s.mouse.toIndex = this.s.aoTargets[i - 1].to;\n          bSet = true;\n          break;\n        }\n      } // The insert element wasn't positioned in the array (less than\n      // operator), so we put it at the end\n\n\n      if (!bSet) {\n        this.dom.pointer.css('left', this.s.aoTargets[this.s.aoTargets.length - 1].x);\n        this.s.mouse.toIndex = this.s.aoTargets[this.s.aoTargets.length - 1].to;\n      } // Perform reordering if realtime updating is on and the column has moved\n\n\n      if (this.s.init.bRealtime && lastToIndex !== this.s.mouse.toIndex) {\n        this.s.dt.oInstance.fnColReorder(this.s.mouse.fromIndex, this.s.mouse.toIndex);\n        this.s.mouse.fromIndex = this.s.mouse.toIndex; // Not great for performance, but required to keep everything in alignment\n\n        if (this.s.dt.oScroll.sX !== \"\" || this.s.dt.oScroll.sY !== \"\") {\n          this.s.dt.oInstance.fnAdjustColumnSizing(false);\n        }\n\n        this._fnRegions();\n      }\n    },\n\n    /**\n     * Finish off the mouse drag and insert the column where needed\n     *  @method  _fnMouseUp\n     *  @param   event e Mouse event\n     *  @returns void\n     *  @private\n     */\n    \"_fnMouseUp\": function _fnMouseUp(e) {\n      var that = this;\n      $(document).off('.ColReorder');\n\n      if (this.dom.drag !== null) {\n        /* Remove the guide elements */\n        this.dom.drag.remove();\n        this.dom.pointer.remove();\n        this.dom.drag = null;\n        this.dom.pointer = null;\n        /* Actually do the reorder */\n\n        this.s.dt.oInstance.fnColReorder(this.s.mouse.fromIndex, this.s.mouse.toIndex, true);\n\n        this._fnSetColumnIndexes();\n        /* When scrolling we need to recalculate the column sizes to allow for the shift */\n\n\n        if (this.s.dt.oScroll.sX !== \"\" || this.s.dt.oScroll.sY !== \"\") {\n          this.s.dt.oInstance.fnAdjustColumnSizing(false);\n        }\n        /* Save the state */\n\n\n        this.s.dt.oInstance.oApi._fnSaveState(this.s.dt);\n\n        if (this.s.reorderCallback !== null) {\n          this.s.reorderCallback.call(this);\n        }\n      }\n    },\n\n    /**\n     * Calculate a cached array with the points of the column inserts, and the\n     * 'to' points\n     *  @method  _fnRegions\n     *  @returns void\n     *  @private\n     */\n    \"_fnRegions\": function _fnRegions() {\n      var aoColumns = this.s.dt.aoColumns;\n      this.s.aoTargets.splice(0, this.s.aoTargets.length);\n      this.s.aoTargets.push({\n        \"x\": $(this.s.dt.nTable).offset().left,\n        \"to\": 0\n      });\n      var iToPoint = 0;\n      var total = this.s.aoTargets[0].x;\n\n      for (var i = 0, iLen = aoColumns.length; i < iLen; i++) {\n        /* For the column / header in question, we want it's position to remain the same if the\n         * position is just to it's immediate left or right, so we only increment the counter for\n         * other columns\n         */\n        if (i != this.s.mouse.fromIndex) {\n          iToPoint++;\n        }\n\n        if (aoColumns[i].bVisible && aoColumns[i].nTh.style.display !== 'none') {\n          total += $(aoColumns[i].nTh).outerWidth();\n          this.s.aoTargets.push({\n            \"x\": total,\n            \"to\": iToPoint\n          });\n        }\n      }\n      /* Disallow columns for being reordered by drag and drop, counting right to left */\n\n\n      if (this.s.fixedRight !== 0) {\n        this.s.aoTargets.splice(this.s.aoTargets.length - this.s.fixedRight);\n      }\n      /* Disallow columns for being reordered by drag and drop, counting left to right */\n\n\n      if (this.s.fixed !== 0) {\n        this.s.aoTargets.splice(0, this.s.fixed);\n      }\n    },\n\n    /**\n     * Copy the TH element that is being drags so the user has the idea that they are actually\n     * moving it around the page.\n     *  @method  _fnCreateDragNode\n     *  @returns void\n     *  @private\n     */\n    \"_fnCreateDragNode\": function _fnCreateDragNode() {\n      var scrolling = this.s.dt.oScroll.sX !== \"\" || this.s.dt.oScroll.sY !== \"\";\n      var origCell = this.s.dt.aoColumns[this.s.mouse.targetIndex].nTh;\n      var origTr = origCell.parentNode;\n      var origThead = origTr.parentNode;\n      var origTable = origThead.parentNode;\n      var cloneCell = $(origCell).clone(); // This is a slightly odd combination of jQuery and DOM, but it is the\n      // fastest and least resource intensive way I could think of cloning\n      // the table with just a single header cell in it.\n\n      this.dom.drag = $(origTable.cloneNode(false)).addClass('DTCR_clonedTable').append($(origThead.cloneNode(false)).append($(origTr.cloneNode(false)).append(cloneCell[0]))).css({\n        position: 'absolute',\n        top: 0,\n        left: 0,\n        width: $(origCell).outerWidth(),\n        height: $(origCell).outerHeight()\n      }).appendTo('body');\n      this.dom.pointer = $('<div></div>').addClass('DTCR_pointer').css({\n        position: 'absolute',\n        top: scrolling ? $('div.dataTables_scroll', this.s.dt.nTableWrapper).offset().top : $(this.s.dt.nTable).offset().top,\n        height: scrolling ? $('div.dataTables_scroll', this.s.dt.nTableWrapper).height() : $(this.s.dt.nTable).height()\n      }).appendTo('body');\n    },\n\n    /**\n     * Add a data attribute to the column headers, so we know the index of\n     * the row to be reordered. This allows fast detection of the index, and\n     * for this plug-in to work with FixedHeader which clones the nodes.\n     *  @private\n     */\n    \"_fnSetColumnIndexes\": function _fnSetColumnIndexes() {\n      $.each(this.s.dt.aoColumns, function (i, column) {\n        $(column.nTh).attr('data-column-index', i);\n      });\n    },\n\n    /**\n     * Get cursor position regardless of mouse or touch input\n     * @param  {Event}  e    jQuery Event\n     * @param  {string} prop Property to get\n     * @return {number}      Value\n     */\n    _fnCursorPosition: function _fnCursorPosition(e, prop) {\n      if (e.type.indexOf('touch') !== -1) {\n        return e.originalEvent.touches[0][prop];\n      }\n\n      return e[prop];\n    }\n  });\n  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n   * Static parameters\n   * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\n\n  /**\n   * ColReorder default settings for initialisation\n   *  @namespace\n   *  @static\n   */\n\n  ColReorder.defaults = {\n    /**\n     * Predefined ordering for the columns that will be applied automatically\n     * on initialisation. If not specified then the order that the columns are\n     * found to be in the HTML is the order used.\n     *  @type array\n     *  @default null\n     *  @static\n     */\n    aiOrder: null,\n\n    /**\n     * ColReorder enable on initialisation\n     *  @type boolean\n     *  @default true\n     *  @static\n     */\n    bEnable: true,\n\n    /**\n     * Redraw the table's column ordering as the end user draws the column\n     * (`true`) or wait until the mouse is released (`false` - default). Note\n     * that this will perform a redraw on each reordering, which involves an\n     * Ajax request each time if you are using server-side processing in\n     * DataTables.\n     *  @type boolean\n     *  @default false\n     *  @static\n     */\n    bRealtime: true,\n\n    /**\n     * Indicate how many columns should be fixed in position (counting from the\n     * left). This will typically be 1 if used, but can be as high as you like.\n     *  @type int\n     *  @default 0\n     *  @static\n     */\n    iFixedColumnsLeft: 0,\n\n    /**\n     * As `iFixedColumnsRight` but counting from the right.\n     *  @type int\n     *  @default 0\n     *  @static\n     */\n    iFixedColumnsRight: 0,\n\n    /**\n     * Callback function that is fired when columns are reordered. The `column-\n     * reorder` event is preferred over this callback\n     *  @type function():void\n     *  @default null\n     *  @static\n     */\n    fnReorderCallback: null\n  };\n  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n   * Constants\n   * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\n\n  /**\n   * ColReorder version\n   *  @constant  version\n   *  @type      String\n   *  @default   As code\n   */\n\n  ColReorder.version = \"1.5.1\";\n  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n   * DataTables interfaces\n   * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\n  // Expose\n\n  $.fn.dataTable.ColReorder = ColReorder;\n  $.fn.DataTable.ColReorder = ColReorder; // Register a new feature with DataTables\n\n  if (typeof $.fn.dataTable == \"function\" && typeof $.fn.dataTableExt.fnVersionCheck == \"function\" && $.fn.dataTableExt.fnVersionCheck('1.10.8')) {\n    $.fn.dataTableExt.aoFeatures.push({\n      \"fnInit\": function fnInit(settings) {\n        var table = settings.oInstance;\n\n        if (!settings._colReorder) {\n          var dtInit = settings.oInit;\n          var opts = dtInit.colReorder || dtInit.oColReorder || {};\n          new ColReorder(settings, opts);\n        } else {\n          table.oApi._fnLog(settings, 1, \"ColReorder attempted to initialise twice. Ignoring second\");\n        }\n\n        return null;\n        /* No node for DataTables to insert */\n      },\n      \"cFeature\": \"R\",\n      \"sFeature\": \"ColReorder\"\n    });\n  } else {\n    alert(\"Warning: ColReorder requires DataTables 1.10.8 or greater - www.datatables.net/download\");\n  } // Attach a listener to the document which listens for DataTables initialisation\n  // events so we can automatically initialise\n\n\n  $(document).on('preInit.dt.colReorder', function (e, settings) {\n    if (e.namespace !== 'dt') {\n      return;\n    }\n\n    var init = settings.oInit.colReorder;\n    var defaults = DataTable.defaults.colReorder;\n\n    if (init || defaults) {\n      var opts = $.extend({}, init, defaults);\n\n      if (init !== false) {\n        new ColReorder(settings, opts);\n      }\n    }\n  }); // API augmentation\n\n  $.fn.dataTable.Api.register('colReorder.reset()', function () {\n    return this.iterator('table', function (ctx) {\n      ctx._colReorder.fnReset();\n    });\n  });\n  $.fn.dataTable.Api.register('colReorder.order()', function (set, original) {\n    if (set) {\n      return this.iterator('table', function (ctx) {\n        ctx._colReorder.fnOrder(set, original);\n      });\n    }\n\n    return this.context.length ? this.context[0]._colReorder.fnOrder() : null;\n  });\n  $.fn.dataTable.Api.register('colReorder.transpose()', function (idx, dir) {\n    return this.context.length && this.context[0]._colReorder ? this.context[0]._colReorder.fnTranspose(idx, dir) : idx;\n  });\n  $.fn.dataTable.Api.register('colReorder.move()', function (from, to, drop, invalidateRows) {\n    if (this.context.length) {\n      this.context[0]._colReorder.s.dt.oInstance.fnColReorder(from, to, drop, invalidateRows);\n    }\n\n    return this;\n  });\n  $.fn.dataTable.Api.register('colReorder.enable()', function (flag) {\n    return this.iterator('table', function (ctx) {\n      if (ctx._colReorder) {\n        ctx._colReorder.fnEnable(flag);\n      }\n    });\n  });\n  $.fn.dataTable.Api.register('colReorder.disable()', function () {\n    return this.iterator('table', function (ctx) {\n      if (ctx._colReorder) {\n        ctx._colReorder.fnDisable();\n      }\n    });\n  });\n  return ColReorder;\n});","/*! Responsive 2.2.3\n * 2014-2018 SpryMedia Ltd - datatables.net/license\n */\n\n/**\n * @summary     Responsive\n * @description Responsive tables plug-in for DataTables\n * @version     2.2.3\n * @file        dataTables.responsive.js\n * @author      SpryMedia Ltd (www.sprymedia.co.uk)\n * @contact     www.sprymedia.co.uk/contact\n * @copyright   Copyright 2014-2018 SpryMedia Ltd.\n *\n * This source file is free software, available under the following license:\n *   MIT license - http://datatables.net/license/mit\n *\n * This source file is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n * or FITNESS FOR A PARTICULAR PURPOSE. See the license files for details.\n *\n * For details please refer to: http://www.datatables.net\n */\n(function (factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD\n    define(['jquery', 'datatables.net'], function ($) {\n      return factory($, window, document);\n    });\n  } else if (typeof exports === 'object') {\n    // CommonJS\n    module.exports = function (root, $) {\n      if (!root) {\n        root = window;\n      }\n\n      if (!$ || !$.fn.dataTable) {\n        $ = require('datatables.net')(root, $).$;\n      }\n\n      return factory($, root, root.document);\n    };\n  } else {\n    // Browser\n    factory(jQuery, window, document);\n  }\n})(function ($, window, document, undefined) {\n  'use strict';\n\n  var DataTable = $.fn.dataTable;\n  /**\n   * Responsive is a plug-in for the DataTables library that makes use of\n   * DataTables' ability to change the visibility of columns, changing the\n   * visibility of columns so the displayed columns fit into the table container.\n   * The end result is that complex tables will be dynamically adjusted to fit\n   * into the viewport, be it on a desktop, tablet or mobile browser.\n   *\n   * Responsive for DataTables has two modes of operation, which can used\n   * individually or combined:\n   *\n   * * Class name based control - columns assigned class names that match the\n   *   breakpoint logic can be shown / hidden as required for each breakpoint.\n   * * Automatic control - columns are automatically hidden when there is no\n   *   room left to display them. Columns removed from the right.\n   *\n   * In additional to column visibility control, Responsive also has built into\n   * options to use DataTables' child row display to show / hide the information\n   * from the table that has been hidden. There are also two modes of operation\n   * for this child row display:\n   *\n   * * Inline - when the control element that the user can use to show / hide\n   *   child rows is displayed inside the first column of the table.\n   * * Column - where a whole column is dedicated to be the show / hide control.\n   *\n   * Initialisation of Responsive is performed by:\n   *\n   * * Adding the class `responsive` or `dt-responsive` to the table. In this case\n   *   Responsive will automatically be initialised with the default configuration\n   *   options when the DataTable is created.\n   * * Using the `responsive` option in the DataTables configuration options. This\n   *   can also be used to specify the configuration options, or simply set to\n   *   `true` to use the defaults.\n   *\n   *  @class\n   *  @param {object} settings DataTables settings object for the host table\n   *  @param {object} [opts] Configuration options\n   *  @requires jQuery 1.7+\n   *  @requires DataTables 1.10.3+\n   *\n   *  @example\n   *      $('#example').DataTable( {\n   *        responsive: true\n   *      } );\n   *    } );\n   */\n\n  var Responsive = function Responsive(settings, opts) {\n    // Sanity check that we are using DataTables 1.10 or newer\n    if (!DataTable.versionCheck || !DataTable.versionCheck('1.10.10')) {\n      throw 'DataTables Responsive requires DataTables 1.10.10 or newer';\n    }\n\n    this.s = {\n      dt: new DataTable.Api(settings),\n      columns: [],\n      current: []\n    }; // Check if responsive has already been initialised on this table\n\n    if (this.s.dt.settings()[0].responsive) {\n      return;\n    } // details is an object, but for simplicity the user can give it as a string\n    // or a boolean\n\n\n    if (opts && typeof opts.details === 'string') {\n      opts.details = {\n        type: opts.details\n      };\n    } else if (opts && opts.details === false) {\n      opts.details = {\n        type: false\n      };\n    } else if (opts && opts.details === true) {\n      opts.details = {\n        type: 'inline'\n      };\n    }\n\n    this.c = $.extend(true, {}, Responsive.defaults, DataTable.defaults.responsive, opts);\n    settings.responsive = this;\n\n    this._constructor();\n  };\n\n  $.extend(Responsive.prototype, {\n    /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n     * Constructor\n     */\n\n    /**\n     * Initialise the Responsive instance\n     *\n     * @private\n     */\n    _constructor: function _constructor() {\n      var that = this;\n      var dt = this.s.dt;\n      var dtPrivateSettings = dt.settings()[0];\n      var oldWindowWidth = $(window).width();\n      dt.settings()[0]._responsive = this; // Use DataTables' throttle function to avoid processor thrashing on\n      // resize\n\n      $(window).on('resize.dtr orientationchange.dtr', DataTable.util.throttle(function () {\n        // iOS has a bug whereby resize can fire when only scrolling\n        // See: http://stackoverflow.com/questions/8898412\n        var width = $(window).width();\n\n        if (width !== oldWindowWidth) {\n          that._resize();\n\n          oldWindowWidth = width;\n        }\n      })); // DataTables doesn't currently trigger an event when a row is added, so\n      // we need to hook into its private API to enforce the hidden rows when\n      // new data is added\n\n      dtPrivateSettings.oApi._fnCallbackReg(dtPrivateSettings, 'aoRowCreatedCallback', function (tr, data, idx) {\n        if ($.inArray(false, that.s.current) !== -1) {\n          $('>td, >th', tr).each(function (i) {\n            var idx = dt.column.index('toData', i);\n\n            if (that.s.current[idx] === false) {\n              $(this).css('display', 'none');\n            }\n          });\n        }\n      }); // Destroy event handler\n\n\n      dt.on('destroy.dtr', function () {\n        dt.off('.dtr');\n        $(dt.table().body()).off('.dtr');\n        $(window).off('resize.dtr orientationchange.dtr'); // Restore the columns that we've hidden\n\n        $.each(that.s.current, function (i, val) {\n          if (val === false) {\n            that._setColumnVis(i, true);\n          }\n        });\n      }); // Reorder the breakpoints array here in case they have been added out\n      // of order\n\n      this.c.breakpoints.sort(function (a, b) {\n        return a.width < b.width ? 1 : a.width > b.width ? -1 : 0;\n      });\n\n      this._classLogic();\n\n      this._resizeAuto(); // Details handler\n\n\n      var details = this.c.details;\n\n      if (details.type !== false) {\n        that._detailsInit(); // DataTables will trigger this event on every column it shows and\n        // hides individually\n\n\n        dt.on('column-visibility.dtr', function () {\n          // Use a small debounce to allow multiple columns to be set together\n          if (that._timer) {\n            clearTimeout(that._timer);\n          }\n\n          that._timer = setTimeout(function () {\n            that._timer = null;\n\n            that._classLogic();\n\n            that._resizeAuto();\n\n            that._resize();\n\n            that._redrawChildren();\n          }, 100);\n        }); // Redraw the details box on each draw which will happen if the data\n        // has changed. This is used until DataTables implements a native\n        // `updated` event for rows\n\n        dt.on('draw.dtr', function () {\n          that._redrawChildren();\n        });\n        $(dt.table().node()).addClass('dtr-' + details.type);\n      }\n\n      dt.on('column-reorder.dtr', function (e, settings, details) {\n        that._classLogic();\n\n        that._resizeAuto();\n\n        that._resize();\n      }); // Change in column sizes means we need to calc\n\n      dt.on('column-sizing.dtr', function () {\n        that._resizeAuto();\n\n        that._resize();\n      }); // On Ajax reload we want to reopen any child rows which are displayed\n      // by responsive\n\n      dt.on('preXhr.dtr', function () {\n        var rowIds = [];\n        dt.rows().every(function () {\n          if (this.child.isShown()) {\n            rowIds.push(this.id(true));\n          }\n        });\n        dt.one('draw.dtr', function () {\n          that._resizeAuto();\n\n          that._resize();\n\n          dt.rows(rowIds).every(function () {\n            that._detailsDisplay(this, false);\n          });\n        });\n      });\n      dt.on('init.dtr', function (e, settings, details) {\n        that._resizeAuto();\n\n        that._resize(); // If columns were hidden, then DataTables needs to adjust the\n        // column sizing\n\n\n        if ($.inArray(false, that.s.current)) {\n          dt.columns.adjust();\n        }\n      }); // First pass - draw the table for the current viewport size\n\n      this._resize();\n    },\n\n    /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n     * Private methods\n     */\n\n    /**\n     * Calculate the visibility for the columns in a table for a given\n     * breakpoint. The result is pre-determined based on the class logic if\n     * class names are used to control all columns, but the width of the table\n     * is also used if there are columns which are to be automatically shown\n     * and hidden.\n     *\n     * @param  {string} breakpoint Breakpoint name to use for the calculation\n     * @return {array} Array of boolean values initiating the visibility of each\n     *   column.\n     *  @private\n     */\n    _columnsVisiblity: function _columnsVisiblity(breakpoint) {\n      var dt = this.s.dt;\n      var columns = this.s.columns;\n      var i, ien; // Create an array that defines the column ordering based first on the\n      // column's priority, and secondly the column index. This allows the\n      // columns to be removed from the right if the priority matches\n\n      var order = columns.map(function (col, idx) {\n        return {\n          columnIdx: idx,\n          priority: col.priority\n        };\n      }).sort(function (a, b) {\n        if (a.priority !== b.priority) {\n          return a.priority - b.priority;\n        }\n\n        return a.columnIdx - b.columnIdx;\n      }); // Class logic - determine which columns are in this breakpoint based\n      // on the classes. If no class control (i.e. `auto`) then `-` is used\n      // to indicate this to the rest of the function\n\n      var display = $.map(columns, function (col, i) {\n        if (dt.column(i).visible() === false) {\n          return 'not-visible';\n        }\n\n        return col.auto && col.minWidth === null ? false : col.auto === true ? '-' : $.inArray(breakpoint, col.includeIn) !== -1;\n      }); // Auto column control - first pass: how much width is taken by the\n      // ones that must be included from the non-auto columns\n\n      var requiredWidth = 0;\n\n      for (i = 0, ien = display.length; i < ien; i++) {\n        if (display[i] === true) {\n          requiredWidth += columns[i].minWidth;\n        }\n      } // Second pass, use up any remaining width for other columns. For\n      // scrolling tables we need to subtract the width of the scrollbar. It\n      // may not be requires which makes this sub-optimal, but it would\n      // require another full redraw to make complete use of those extra few\n      // pixels\n\n\n      var scrolling = dt.settings()[0].oScroll;\n      var bar = scrolling.sY || scrolling.sX ? scrolling.iBarWidth : 0;\n      var widthAvailable = dt.table().container().offsetWidth - bar;\n      var usedWidth = widthAvailable - requiredWidth; // Control column needs to always be included. This makes it sub-\n      // optimal in terms of using the available with, but to stop layout\n      // thrashing or overflow. Also we need to account for the control column\n      // width first so we know how much width is available for the other\n      // columns, since the control column might not be the first one shown\n\n      for (i = 0, ien = display.length; i < ien; i++) {\n        if (columns[i].control) {\n          usedWidth -= columns[i].minWidth;\n        }\n      } // Allow columns to be shown (counting by priority and then right to\n      // left) until we run out of room\n\n\n      var empty = false;\n\n      for (i = 0, ien = order.length; i < ien; i++) {\n        var colIdx = order[i].columnIdx;\n\n        if (display[colIdx] === '-' && !columns[colIdx].control && columns[colIdx].minWidth) {\n          // Once we've found a column that won't fit we don't let any\n          // others display either, or columns might disappear in the\n          // middle of the table\n          if (empty || usedWidth - columns[colIdx].minWidth < 0) {\n            empty = true;\n            display[colIdx] = false;\n          } else {\n            display[colIdx] = true;\n          }\n\n          usedWidth -= columns[colIdx].minWidth;\n        }\n      } // Determine if the 'control' column should be shown (if there is one).\n      // This is the case when there is a hidden column (that is not the\n      // control column). The two loops look inefficient here, but they are\n      // trivial and will fly through. We need to know the outcome from the\n      // first , before the action in the second can be taken\n\n\n      var showControl = false;\n\n      for (i = 0, ien = columns.length; i < ien; i++) {\n        if (!columns[i].control && !columns[i].never && display[i] === false) {\n          showControl = true;\n          break;\n        }\n      }\n\n      for (i = 0, ien = columns.length; i < ien; i++) {\n        if (columns[i].control) {\n          display[i] = showControl;\n        } // Replace not visible string with false from the control column detection above\n\n\n        if (display[i] === 'not-visible') {\n          display[i] = false;\n        }\n      } // Finally we need to make sure that there is at least one column that\n      // is visible\n\n\n      if ($.inArray(true, display) === -1) {\n        display[0] = true;\n      }\n\n      return display;\n    },\n\n    /**\n     * Create the internal `columns` array with information about the columns\n     * for the table. This includes determining which breakpoints the column\n     * will appear in, based upon class names in the column, which makes up the\n     * vast majority of this method.\n     *\n     * @private\n     */\n    _classLogic: function _classLogic() {\n      var that = this;\n      var calc = {};\n      var breakpoints = this.c.breakpoints;\n      var dt = this.s.dt;\n      var columns = dt.columns().eq(0).map(function (i) {\n        var column = this.column(i);\n        var className = column.header().className;\n        var priority = dt.settings()[0].aoColumns[i].responsivePriority;\n\n        if (priority === undefined) {\n          var dataPriority = $(column.header()).data('priority');\n          priority = dataPriority !== undefined ? dataPriority * 1 : 10000;\n        }\n\n        return {\n          className: className,\n          includeIn: [],\n          auto: false,\n          control: false,\n          never: className.match(/\\bnever\\b/) ? true : false,\n          priority: priority\n        };\n      }); // Simply add a breakpoint to `includeIn` array, ensuring that there are\n      // no duplicates\n\n      var add = function add(colIdx, name) {\n        var includeIn = columns[colIdx].includeIn;\n\n        if ($.inArray(name, includeIn) === -1) {\n          includeIn.push(name);\n        }\n      };\n\n      var column = function column(colIdx, name, operator, matched) {\n        var size, i, ien;\n\n        if (!operator) {\n          columns[colIdx].includeIn.push(name);\n        } else if (operator === 'max-') {\n          // Add this breakpoint and all smaller\n          size = that._find(name).width;\n\n          for (i = 0, ien = breakpoints.length; i < ien; i++) {\n            if (breakpoints[i].width <= size) {\n              add(colIdx, breakpoints[i].name);\n            }\n          }\n        } else if (operator === 'min-') {\n          // Add this breakpoint and all larger\n          size = that._find(name).width;\n\n          for (i = 0, ien = breakpoints.length; i < ien; i++) {\n            if (breakpoints[i].width >= size) {\n              add(colIdx, breakpoints[i].name);\n            }\n          }\n        } else if (operator === 'not-') {\n          // Add all but this breakpoint\n          for (i = 0, ien = breakpoints.length; i < ien; i++) {\n            if (breakpoints[i].name.indexOf(matched) === -1) {\n              add(colIdx, breakpoints[i].name);\n            }\n          }\n        }\n      }; // Loop over each column and determine if it has a responsive control\n      // class\n\n\n      columns.each(function (col, i) {\n        var classNames = col.className.split(' ');\n        var hasClass = false; // Split the class name up so multiple rules can be applied if needed\n\n        for (var k = 0, ken = classNames.length; k < ken; k++) {\n          var className = $.trim(classNames[k]);\n\n          if (className === 'all') {\n            // Include in all\n            hasClass = true;\n            col.includeIn = $.map(breakpoints, function (a) {\n              return a.name;\n            });\n            return;\n          } else if (className === 'none' || col.never) {\n            // Include in none (default) and no auto\n            hasClass = true;\n            return;\n          } else if (className === 'control') {\n            // Special column that is only visible, when one of the other\n            // columns is hidden. This is used for the details control\n            hasClass = true;\n            col.control = true;\n            return;\n          }\n\n          $.each(breakpoints, function (j, breakpoint) {\n            // Does this column have a class that matches this breakpoint?\n            var brokenPoint = breakpoint.name.split('-');\n            var re = new RegExp('(min\\\\-|max\\\\-|not\\\\-)?(' + brokenPoint[0] + ')(\\\\-[_a-zA-Z0-9])?');\n            var match = className.match(re);\n\n            if (match) {\n              hasClass = true;\n\n              if (match[2] === brokenPoint[0] && match[3] === '-' + brokenPoint[1]) {\n                // Class name matches breakpoint name fully\n                column(i, breakpoint.name, match[1], match[2] + match[3]);\n              } else if (match[2] === brokenPoint[0] && !match[3]) {\n                // Class name matched primary breakpoint name with no qualifier\n                column(i, breakpoint.name, match[1], match[2]);\n              }\n            }\n          });\n        } // If there was no control class, then automatic sizing is used\n\n\n        if (!hasClass) {\n          col.auto = true;\n        }\n      });\n      this.s.columns = columns;\n    },\n\n    /**\n     * Show the details for the child row\n     *\n     * @param  {DataTables.Api} row    API instance for the row\n     * @param  {boolean}        update Update flag\n     * @private\n     */\n    _detailsDisplay: function _detailsDisplay(row, update) {\n      var that = this;\n      var dt = this.s.dt;\n      var details = this.c.details;\n\n      if (details && details.type !== false) {\n        var res = details.display(row, update, function () {\n          return details.renderer(dt, row[0], that._detailsObj(row[0]));\n        });\n\n        if (res === true || res === false) {\n          $(dt.table().node()).triggerHandler('responsive-display.dt', [dt, row, res, update]);\n        }\n      }\n    },\n\n    /**\n     * Initialisation for the details handler\n     *\n     * @private\n     */\n    _detailsInit: function _detailsInit() {\n      var that = this;\n      var dt = this.s.dt;\n      var details = this.c.details; // The inline type always uses the first child as the target\n\n      if (details.type === 'inline') {\n        details.target = 'td:first-child, th:first-child';\n      } // Keyboard accessibility\n\n\n      dt.on('draw.dtr', function () {\n        that._tabIndexes();\n      });\n\n      that._tabIndexes(); // Initial draw has already happened\n\n\n      $(dt.table().body()).on('keyup.dtr', 'td, th', function (e) {\n        if (e.keyCode === 13 && $(this).data('dtr-keyboard')) {\n          $(this).click();\n        }\n      }); // type.target can be a string jQuery selector or a column index\n\n      var target = details.target;\n      var selector = typeof target === 'string' ? target : 'td, th'; // Click handler to show / hide the details rows when they are available\n\n      $(dt.table().body()).on('click.dtr mousedown.dtr mouseup.dtr', selector, function (e) {\n        // If the table is not collapsed (i.e. there is no hidden columns)\n        // then take no action\n        if (!$(dt.table().node()).hasClass('collapsed')) {\n          return;\n        } // Check that the row is actually a DataTable's controlled node\n\n\n        if ($.inArray($(this).closest('tr').get(0), dt.rows().nodes().toArray()) === -1) {\n          return;\n        } // For column index, we determine if we should act or not in the\n        // handler - otherwise it is already okay\n\n\n        if (typeof target === 'number') {\n          var targetIdx = target < 0 ? dt.columns().eq(0).length + target : target;\n\n          if (dt.cell(this).index().column !== targetIdx) {\n            return;\n          }\n        } // $().closest() includes itself in its check\n\n\n        var row = dt.row($(this).closest('tr')); // Check event type to do an action\n\n        if (e.type === 'click') {\n          // The renderer is given as a function so the caller can execute it\n          // only when they need (i.e. if hiding there is no point is running\n          // the renderer)\n          that._detailsDisplay(row, false);\n        } else if (e.type === 'mousedown') {\n          // For mouse users, prevent the focus ring from showing\n          $(this).css('outline', 'none');\n        } else if (e.type === 'mouseup') {\n          // And then re-allow at the end of the click\n          $(this).blur().css('outline', '');\n        }\n      });\n    },\n\n    /**\n     * Get the details to pass to a renderer for a row\n     * @param  {int} rowIdx Row index\n     * @private\n     */\n    _detailsObj: function _detailsObj(rowIdx) {\n      var that = this;\n      var dt = this.s.dt;\n      return $.map(this.s.columns, function (col, i) {\n        // Never and control columns should not be passed to the renderer\n        if (col.never || col.control) {\n          return;\n        }\n\n        return {\n          title: dt.settings()[0].aoColumns[i].sTitle,\n          data: dt.cell(rowIdx, i).render(that.c.orthogonal),\n          hidden: dt.column(i).visible() && !that.s.current[i],\n          columnIndex: i,\n          rowIndex: rowIdx\n        };\n      });\n    },\n\n    /**\n     * Find a breakpoint object from a name\n     *\n     * @param  {string} name Breakpoint name to find\n     * @return {object}      Breakpoint description object\n     * @private\n     */\n    _find: function _find(name) {\n      var breakpoints = this.c.breakpoints;\n\n      for (var i = 0, ien = breakpoints.length; i < ien; i++) {\n        if (breakpoints[i].name === name) {\n          return breakpoints[i];\n        }\n      }\n    },\n\n    /**\n     * Re-create the contents of the child rows as the display has changed in\n     * some way.\n     *\n     * @private\n     */\n    _redrawChildren: function _redrawChildren() {\n      var that = this;\n      var dt = this.s.dt;\n      dt.rows({\n        page: 'current'\n      }).iterator('row', function (settings, idx) {\n        var row = dt.row(idx);\n\n        that._detailsDisplay(dt.row(idx), true);\n      });\n    },\n\n    /**\n     * Alter the table display for a resized viewport. This involves first\n     * determining what breakpoint the window currently is in, getting the\n     * column visibilities to apply and then setting them.\n     *\n     * @private\n     */\n    _resize: function _resize() {\n      var that = this;\n      var dt = this.s.dt;\n      var width = $(window).width();\n      var breakpoints = this.c.breakpoints;\n      var breakpoint = breakpoints[0].name;\n      var columns = this.s.columns;\n      var i, ien;\n      var oldVis = this.s.current.slice(); // Determine what breakpoint we are currently at\n\n      for (i = breakpoints.length - 1; i >= 0; i--) {\n        if (width <= breakpoints[i].width) {\n          breakpoint = breakpoints[i].name;\n          break;\n        }\n      } // Show the columns for that break point\n\n\n      var columnsVis = this._columnsVisiblity(breakpoint);\n\n      this.s.current = columnsVis; // Set the class before the column visibility is changed so event\n      // listeners know what the state is. Need to determine if there are\n      // any columns that are not visible but can be shown\n\n      var collapsedClass = false;\n\n      for (i = 0, ien = columns.length; i < ien; i++) {\n        if (columnsVis[i] === false && !columns[i].never && !columns[i].control && !dt.column(i).visible() === false) {\n          collapsedClass = true;\n          break;\n        }\n      }\n\n      $(dt.table().node()).toggleClass('collapsed', collapsedClass);\n      var changed = false;\n      var visible = 0;\n      dt.columns().eq(0).each(function (colIdx, i) {\n        if (columnsVis[i] === true) {\n          visible++;\n        }\n\n        if (columnsVis[i] !== oldVis[i]) {\n          changed = true;\n\n          that._setColumnVis(colIdx, columnsVis[i]);\n        }\n      });\n\n      if (changed) {\n        this._redrawChildren(); // Inform listeners of the change\n\n\n        $(dt.table().node()).trigger('responsive-resize.dt', [dt, this.s.current]); // If no records, update the \"No records\" display element\n\n        if (dt.page.info().recordsDisplay === 0) {\n          $('td', dt.table().body()).eq(0).attr('colspan', visible);\n        }\n      }\n    },\n\n    /**\n     * Determine the width of each column in the table so the auto column hiding\n     * has that information to work with. This method is never going to be 100%\n     * perfect since column widths can change slightly per page, but without\n     * seriously compromising performance this is quite effective.\n     *\n     * @private\n     */\n    _resizeAuto: function _resizeAuto() {\n      var dt = this.s.dt;\n      var columns = this.s.columns; // Are we allowed to do auto sizing?\n\n      if (!this.c.auto) {\n        return;\n      } // Are there any columns that actually need auto-sizing, or do they all\n      // have classes defined\n\n\n      if ($.inArray(true, $.map(columns, function (c) {\n        return c.auto;\n      })) === -1) {\n        return;\n      } // Need to restore all children. They will be reinstated by a re-render\n\n\n      if (!$.isEmptyObject(_childNodeStore)) {\n        $.each(_childNodeStore, function (key) {\n          var idx = key.split('-');\n\n          _childNodesRestore(dt, idx[0] * 1, idx[1] * 1);\n        });\n      } // Clone the table with the current data in it\n\n\n      var tableWidth = dt.table().node().offsetWidth;\n      var columnWidths = dt.columns;\n      var clonedTable = dt.table().node().cloneNode(false);\n      var clonedHeader = $(dt.table().header().cloneNode(false)).appendTo(clonedTable);\n      var clonedBody = $(dt.table().body()).clone(false, false).empty().appendTo(clonedTable); // use jQuery because of IE8\n      // Header\n\n      var headerCells = dt.columns().header().filter(function (idx) {\n        return dt.column(idx).visible();\n      }).to$().clone(false).css('display', 'table-cell').css('min-width', 0); // Body rows - we don't need to take account of DataTables' column\n      // visibility since we implement our own here (hence the `display` set)\n\n      $(clonedBody).append($(dt.rows({\n        page: 'current'\n      }).nodes()).clone(false)).find('th, td').css('display', ''); // Footer\n\n      var footer = dt.table().footer();\n\n      if (footer) {\n        var clonedFooter = $(footer.cloneNode(false)).appendTo(clonedTable);\n        var footerCells = dt.columns().footer().filter(function (idx) {\n          return dt.column(idx).visible();\n        }).to$().clone(false).css('display', 'table-cell');\n        $('<tr/>').append(footerCells).appendTo(clonedFooter);\n      }\n\n      $('<tr/>').append(headerCells).appendTo(clonedHeader); // In the inline case extra padding is applied to the first column to\n      // give space for the show / hide icon. We need to use this in the\n      // calculation\n\n      if (this.c.details.type === 'inline') {\n        $(clonedTable).addClass('dtr-inline collapsed');\n      } // It is unsafe to insert elements with the same name into the DOM\n      // multiple times. For example, cloning and inserting a checked radio\n      // clears the chcecked state of the original radio.\n\n\n      $(clonedTable).find('[name]').removeAttr('name'); // A position absolute table would take the table out of the flow of\n      // our container element, bypassing the height and width (Scroller)\n\n      $(clonedTable).css('position', 'relative');\n      var inserted = $('<div/>').css({\n        width: 1,\n        height: 1,\n        overflow: 'hidden',\n        clear: 'both'\n      }).append(clonedTable);\n      inserted.insertBefore(dt.table().node()); // The cloned header now contains the smallest that each column can be\n\n      headerCells.each(function (i) {\n        var idx = dt.column.index('fromVisible', i);\n        columns[idx].minWidth = this.offsetWidth || 0;\n      });\n      inserted.remove();\n    },\n\n    /**\n     * Set a column's visibility.\n     *\n     * We don't use DataTables' column visibility controls in order to ensure\n     * that column visibility can Responsive can no-exist. Since only IE8+ is\n     * supported (and all evergreen browsers of course) the control of the\n     * display attribute works well.\n     *\n     * @param {integer} col      Column index\n     * @param {boolean} showHide Show or hide (true or false)\n     * @private\n     */\n    _setColumnVis: function _setColumnVis(col, showHide) {\n      var dt = this.s.dt;\n      var display = showHide ? '' : 'none'; // empty string will remove the attr\n\n      $(dt.column(col).header()).css('display', display);\n      $(dt.column(col).footer()).css('display', display);\n      dt.column(col).nodes().to$().css('display', display); // If the are child nodes stored, we might need to reinsert them\n\n      if (!$.isEmptyObject(_childNodeStore)) {\n        dt.cells(null, col).indexes().each(function (idx) {\n          _childNodesRestore(dt, idx.row, idx.column);\n        });\n      }\n    },\n\n    /**\n     * Update the cell tab indexes for keyboard accessibility. This is called on\n     * every table draw - that is potentially inefficient, but also the least\n     * complex option given that column visibility can change on the fly. Its a\n     * shame user-focus was removed from CSS 3 UI, as it would have solved this\n     * issue with a single CSS statement.\n     *\n     * @private\n     */\n    _tabIndexes: function _tabIndexes() {\n      var dt = this.s.dt;\n      var cells = dt.cells({\n        page: 'current'\n      }).nodes().to$();\n      var ctx = dt.settings()[0];\n      var target = this.c.details.target;\n      cells.filter('[data-dtr-keyboard]').removeData('[data-dtr-keyboard]');\n\n      if (typeof target === 'number') {\n        dt.cells(null, target, {\n          page: 'current'\n        }).nodes().to$().attr('tabIndex', ctx.iTabIndex).data('dtr-keyboard', 1);\n      } else {\n        // This is a bit of a hack - we need to limit the selected nodes to just\n        // those of this table\n        if (target === 'td:first-child, th:first-child') {\n          target = '>td:first-child, >th:first-child';\n        }\n\n        $(target, dt.rows({\n          page: 'current'\n        }).nodes()).attr('tabIndex', ctx.iTabIndex).data('dtr-keyboard', 1);\n      }\n    }\n  });\n  /**\n   * List of default breakpoints. Each item in the array is an object with two\n   * properties:\n   *\n   * * `name` - the breakpoint name.\n   * * `width` - the breakpoint width\n   *\n   * @name Responsive.breakpoints\n   * @static\n   */\n\n  Responsive.breakpoints = [{\n    name: 'desktop',\n    width: Infinity\n  }, {\n    name: 'tablet-l',\n    width: 1024\n  }, {\n    name: 'tablet-p',\n    width: 768\n  }, {\n    name: 'mobile-l',\n    width: 480\n  }, {\n    name: 'mobile-p',\n    width: 320\n  }];\n  /**\n   * Display methods - functions which define how the hidden data should be shown\n   * in the table.\n   *\n   * @namespace\n   * @name Responsive.defaults\n   * @static\n   */\n\n  Responsive.display = {\n    childRow: function childRow(row, update, render) {\n      if (update) {\n        if ($(row.node()).hasClass('parent')) {\n          row.child(render(), 'child').show();\n          return true;\n        }\n      } else {\n        if (!row.child.isShown()) {\n          row.child(render(), 'child').show();\n          $(row.node()).addClass('parent');\n          return true;\n        } else {\n          row.child(false);\n          $(row.node()).removeClass('parent');\n          return false;\n        }\n      }\n    },\n    childRowImmediate: function childRowImmediate(row, update, render) {\n      if (!update && row.child.isShown() || !row.responsive.hasHidden()) {\n        // User interaction and the row is show, or nothing to show\n        row.child(false);\n        $(row.node()).removeClass('parent');\n        return false;\n      } else {\n        // Display\n        row.child(render(), 'child').show();\n        $(row.node()).addClass('parent');\n        return true;\n      }\n    },\n    // This is a wrapper so the modal options for Bootstrap and jQuery UI can\n    // have options passed into them. This specific one doesn't need to be a\n    // function but it is for consistency in the `modal` name\n    modal: function modal(options) {\n      return function (row, update, render) {\n        if (!update) {\n          // Show a modal\n          var close = function close() {\n            modal.remove(); // will tidy events for us\n\n            $(document).off('keypress.dtr');\n          };\n\n          var modal = $('<div class=\"dtr-modal\"/>').append($('<div class=\"dtr-modal-display\"/>').append($('<div class=\"dtr-modal-content\"/>').append(render())).append($('<div class=\"dtr-modal-close\">&times;</div>').click(function () {\n            close();\n          }))).append($('<div class=\"dtr-modal-background\"/>').click(function () {\n            close();\n          })).appendTo('body');\n          $(document).on('keyup.dtr', function (e) {\n            if (e.keyCode === 27) {\n              e.stopPropagation();\n              close();\n            }\n          });\n        } else {\n          $('div.dtr-modal-content').empty().append(render());\n        }\n\n        if (options && options.header) {\n          $('div.dtr-modal-content').prepend('<h2>' + options.header(row) + '</h2>');\n        }\n      };\n    }\n  };\n  var _childNodeStore = {};\n\n  function _childNodes(dt, row, col) {\n    var name = row + '-' + col;\n\n    if (_childNodeStore[name]) {\n      return _childNodeStore[name];\n    } // https://jsperf.com/childnodes-array-slice-vs-loop\n\n\n    var nodes = [];\n    var children = dt.cell(row, col).node().childNodes;\n\n    for (var i = 0, ien = children.length; i < ien; i++) {\n      nodes.push(children[i]);\n    }\n\n    _childNodeStore[name] = nodes;\n    return nodes;\n  }\n\n  function _childNodesRestore(dt, row, col) {\n    var name = row + '-' + col;\n\n    if (!_childNodeStore[name]) {\n      return;\n    }\n\n    var node = dt.cell(row, col).node();\n    var store = _childNodeStore[name];\n    var parent = store[0].parentNode;\n    var parentChildren = parent.childNodes;\n    var a = [];\n\n    for (var i = 0, ien = parentChildren.length; i < ien; i++) {\n      a.push(parentChildren[i]);\n    }\n\n    for (var j = 0, jen = a.length; j < jen; j++) {\n      node.appendChild(a[j]);\n    }\n\n    _childNodeStore[name] = undefined;\n  }\n  /**\n   * Display methods - functions which define how the hidden data should be shown\n   * in the table.\n   *\n   * @namespace\n   * @name Responsive.defaults\n   * @static\n   */\n\n\n  Responsive.renderer = {\n    listHiddenNodes: function listHiddenNodes() {\n      return function (api, rowIdx, columns) {\n        var ul = $('<ul data-dtr-index=\"' + rowIdx + '\" class=\"dtr-details\"/>');\n        var found = false;\n        var data = $.each(columns, function (i, col) {\n          if (col.hidden) {\n            $('<li data-dtr-index=\"' + col.columnIndex + '\" data-dt-row=\"' + col.rowIndex + '\" data-dt-column=\"' + col.columnIndex + '\">' + '<span class=\"dtr-title\">' + col.title + '</span> ' + '</li>').append($('<span class=\"dtr-data\"/>').append(_childNodes(api, col.rowIndex, col.columnIndex))) // api.cell( col.rowIndex, col.columnIndex ).node().childNodes ) )\n            .appendTo(ul);\n            found = true;\n          }\n        });\n        return found ? ul : false;\n      };\n    },\n    listHidden: function listHidden() {\n      return function (api, rowIdx, columns) {\n        var data = $.map(columns, function (col) {\n          return col.hidden ? '<li data-dtr-index=\"' + col.columnIndex + '\" data-dt-row=\"' + col.rowIndex + '\" data-dt-column=\"' + col.columnIndex + '\">' + '<span class=\"dtr-title\">' + col.title + '</span> ' + '<span class=\"dtr-data\">' + col.data + '</span>' + '</li>' : '';\n        }).join('');\n        return data ? $('<ul data-dtr-index=\"' + rowIdx + '\" class=\"dtr-details\"/>').append(data) : false;\n      };\n    },\n    tableAll: function tableAll(options) {\n      options = $.extend({\n        tableClass: ''\n      }, options);\n      return function (api, rowIdx, columns) {\n        var data = $.map(columns, function (col) {\n          return '<tr data-dt-row=\"' + col.rowIndex + '\" data-dt-column=\"' + col.columnIndex + '\">' + '<td>' + col.title + ':' + '</td> ' + '<td>' + col.data + '</td>' + '</tr>';\n        }).join('');\n        return $('<table class=\"' + options.tableClass + ' dtr-details\" width=\"100%\"/>').append(data);\n      };\n    }\n  };\n  /**\n   * Responsive default settings for initialisation\n   *\n   * @namespace\n   * @name Responsive.defaults\n   * @static\n   */\n\n  Responsive.defaults = {\n    /**\n     * List of breakpoints for the instance. Note that this means that each\n     * instance can have its own breakpoints. Additionally, the breakpoints\n     * cannot be changed once an instance has been creased.\n     *\n     * @type {Array}\n     * @default Takes the value of `Responsive.breakpoints`\n     */\n    breakpoints: Responsive.breakpoints,\n\n    /**\n     * Enable / disable auto hiding calculations. It can help to increase\n     * performance slightly if you disable this option, but all columns would\n     * need to have breakpoint classes assigned to them\n     *\n     * @type {Boolean}\n     * @default  `true`\n     */\n    auto: true,\n\n    /**\n     * Details control. If given as a string value, the `type` property of the\n     * default object is set to that value, and the defaults used for the rest\n     * of the object - this is for ease of implementation.\n     *\n     * The object consists of the following properties:\n     *\n     * * `display` - A function that is used to show and hide the hidden details\n     * * `renderer` - function that is called for display of the child row data.\n     *   The default function will show the data from the hidden columns\n     * * `target` - Used as the selector for what objects to attach the child\n     *   open / close to\n     * * `type` - `false` to disable the details display, `inline` or `column`\n     *   for the two control types\n     *\n     * @type {Object|string}\n     */\n    details: {\n      display: Responsive.display.childRow,\n      renderer: Responsive.renderer.listHidden(),\n      target: 0,\n      type: 'inline'\n    },\n\n    /**\n     * Orthogonal data request option. This is used to define the data type\n     * requested when Responsive gets the data to show in the child row.\n     *\n     * @type {String}\n     */\n    orthogonal: 'display'\n  };\n  /*\n   * API\n   */\n\n  var Api = $.fn.dataTable.Api; // Doesn't do anything - work around for a bug in DT... Not documented\n\n  Api.register('responsive()', function () {\n    return this;\n  });\n  Api.register('responsive.index()', function (li) {\n    li = $(li);\n    return {\n      column: li.data('dtr-index'),\n      row: li.parent().data('dtr-index')\n    };\n  });\n  Api.register('responsive.rebuild()', function () {\n    return this.iterator('table', function (ctx) {\n      if (ctx._responsive) {\n        ctx._responsive._classLogic();\n      }\n    });\n  });\n  Api.register('responsive.recalc()', function () {\n    return this.iterator('table', function (ctx) {\n      if (ctx._responsive) {\n        ctx._responsive._resizeAuto();\n\n        ctx._responsive._resize();\n      }\n    });\n  });\n  Api.register('responsive.hasHidden()', function () {\n    var ctx = this.context[0];\n    return ctx._responsive ? $.inArray(false, ctx._responsive.s.current) !== -1 : false;\n  });\n  Api.registerPlural('columns().responsiveHidden()', 'column().responsiveHidden()', function () {\n    return this.iterator('column', function (settings, column) {\n      return settings._responsive ? settings._responsive.s.current[column] : false;\n    }, 1);\n  });\n  /**\n   * Version information\n   *\n   * @name Responsive.version\n   * @static\n   */\n\n  Responsive.version = '2.2.3';\n  $.fn.dataTable.Responsive = Responsive;\n  $.fn.DataTable.Responsive = Responsive; // Attach a listener to the document which listens for DataTables initialisation\n  // events so we can automatically initialise\n\n  $(document).on('preInit.dt.dtr', function (e, settings, json) {\n    if (e.namespace !== 'dt') {\n      return;\n    }\n\n    if ($(settings.nTable).hasClass('responsive') || $(settings.nTable).hasClass('dt-responsive') || settings.oInit.responsive || DataTable.defaults.responsive) {\n      var init = settings.oInit.responsive;\n\n      if (init !== false) {\n        new Responsive(settings, $.isPlainObject(init) ? init : {});\n      }\n    }\n  });\n  return Responsive;\n});","/*! Select for DataTables 1.2.7\n * 2015-2018 SpryMedia Ltd - datatables.net/license/mit\n */\n\n/**\n * @summary     Select for DataTables\n * @description A collection of API methods, events and buttons for DataTables\n *   that provides selection options of the items in a DataTable\n * @version     1.2.7\n * @file        dataTables.select.js\n * @author      SpryMedia Ltd (www.sprymedia.co.uk)\n * @contact     datatables.net/forums\n * @copyright   Copyright 2015-2018 SpryMedia Ltd.\n *\n * This source file is free software, available under the following license:\n *   MIT license - http://datatables.net/license/mit\n *\n * This source file is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n * or FITNESS FOR A PARTICULAR PURPOSE. See the license files for details.\n *\n * For details please refer to: http://www.datatables.net/extensions/select\n */\n(function (factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD\n    define(['jquery', 'datatables.net'], function ($) {\n      return factory($, window, document);\n    });\n  } else if (typeof exports === 'object') {\n    // CommonJS\n    module.exports = function (root, $) {\n      if (!root) {\n        root = window;\n      }\n\n      if (!$ || !$.fn.dataTable) {\n        $ = require('datatables.net')(root, $).$;\n      }\n\n      return factory($, root, root.document);\n    };\n  } else {\n    // Browser\n    factory(jQuery, window, document);\n  }\n})(function ($, window, document, undefined) {\n  'use strict';\n\n  var DataTable = $.fn.dataTable; // Version information for debugger\n\n  DataTable.select = {};\n  DataTable.select.version = '1.2.7';\n\n  DataTable.select.init = function (dt) {\n    var ctx = dt.settings()[0];\n    var init = ctx.oInit.select;\n    var defaults = DataTable.defaults.select;\n    var opts = init === undefined ? defaults : init; // Set defaults\n\n    var items = 'row';\n    var style = 'api';\n    var blurable = false;\n    var info = true;\n    var selector = 'td, th';\n    var className = 'selected';\n    var setStyle = false;\n    ctx._select = {}; // Initialisation customisations\n\n    if (opts === true) {\n      style = 'os';\n      setStyle = true;\n    } else if (typeof opts === 'string') {\n      style = opts;\n      setStyle = true;\n    } else if ($.isPlainObject(opts)) {\n      if (opts.blurable !== undefined) {\n        blurable = opts.blurable;\n      }\n\n      if (opts.info !== undefined) {\n        info = opts.info;\n      }\n\n      if (opts.items !== undefined) {\n        items = opts.items;\n      }\n\n      if (opts.style !== undefined) {\n        style = opts.style;\n        setStyle = true;\n      }\n\n      if (opts.selector !== undefined) {\n        selector = opts.selector;\n      }\n\n      if (opts.className !== undefined) {\n        className = opts.className;\n      }\n    }\n\n    dt.select.selector(selector);\n    dt.select.items(items);\n    dt.select.style(style);\n    dt.select.blurable(blurable);\n    dt.select.info(info);\n    ctx._select.className = className; // Sort table based on selected rows. Requires Select Datatables extension\n\n    $.fn.dataTable.ext.order['select-checkbox'] = function (settings, col) {\n      return this.api().column(col, {\n        order: 'index'\n      }).nodes().map(function (td) {\n        if (settings._select.items === 'row') {\n          return $(td).parent().hasClass(settings._select.className);\n        } else if (settings._select.items === 'cell') {\n          return $(td).hasClass(settings._select.className);\n        }\n\n        return false;\n      });\n    }; // If the init options haven't enabled select, but there is a selectable\n    // class name, then enable\n\n\n    if (!setStyle && $(dt.table().node()).hasClass('selectable')) {\n      dt.select.style('os');\n    }\n  };\n  /*\n  \n  Select is a collection of API methods, event handlers, event emitters and\n  buttons (for the `Buttons` extension) for DataTables. It provides the following\n  features, with an overview of how they are implemented:\n  \n  ## Selection of rows, columns and cells. Whether an item is selected or not is\n     stored in:\n  \n  * rows: a `_select_selected` property which contains a boolean value of the\n    DataTables' `aoData` object for each row\n  * columns: a `_select_selected` property which contains a boolean value of the\n    DataTables' `aoColumns` object for each column\n  * cells: a `_selected_cells` property which contains an array of boolean values\n    of the `aoData` object for each row. The array is the same length as the\n    columns array, with each element of it representing a cell.\n  \n  This method of using boolean flags allows Select to operate when nodes have not\n  been created for rows / cells (DataTables' defer rendering feature).\n  \n  ## API methods\n  \n  A range of API methods are available for triggering selection and de-selection\n  of rows. Methods are also available to configure the selection events that can\n  be triggered by an end user (such as which items are to be selected). To a large\n  extent, these of API methods *is* Select. It is basically a collection of helper\n  functions that can be used to select items in a DataTable.\n  \n  Configuration of select is held in the object `_select` which is attached to the\n  DataTables settings object on initialisation. Select being available on a table\n  is not optional when Select is loaded, but its default is for selection only to\n  be available via the API - so the end user wouldn't be able to select rows\n  without additional configuration.\n  \n  The `_select` object contains the following properties:\n  \n  ```\n  {\n  \titems:string     - Can be `rows`, `columns` or `cells`. Defines what item \n  \t                   will be selected if the user is allowed to activate row\n  \t                   selection using the mouse.\n  \tstyle:string     - Can be `none`, `single`, `multi` or `os`. Defines the\n  \t                   interaction style when selecting items\n  \tblurable:boolean - If row selection can be cleared by clicking outside of\n  \t                   the table\n  \tinfo:boolean     - If the selection summary should be shown in the table\n  \t                   information elements\n  }\n  ```\n  \n  In addition to the API methods, Select also extends the DataTables selector\n  options for rows, columns and cells adding a `selected` option to the selector\n  options object, allowing the developer to select only selected items or\n  unselected items.\n  \n  ## Mouse selection of items\n  \n  Clicking on items can be used to select items. This is done by a simple event\n  handler that will select the items using the API methods.\n  \n   */\n\n  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n   * Local functions\n   */\n\n  /**\n   * Add one or more cells to the selection when shift clicking in OS selection\n   * style cell selection.\n   *\n   * Cell range is more complicated than row and column as we want to select\n   * in the visible grid rather than by index in sequence. For example, if you\n   * click first in cell 1-1 and then shift click in 2-2 - cells 1-2 and 2-1\n   * should also be selected (and not 1-3, 1-4. etc)\n   * \n   * @param  {DataTable.Api} dt   DataTable\n   * @param  {object}        idx  Cell index to select to\n   * @param  {object}        last Cell index to select from\n   * @private\n   */\n\n\n  function cellRange(dt, idx, last) {\n    var indexes;\n    var columnIndexes;\n    var rowIndexes;\n\n    var selectColumns = function selectColumns(start, end) {\n      if (start > end) {\n        var tmp = end;\n        end = start;\n        start = tmp;\n      }\n\n      var record = false;\n      return dt.columns(':visible').indexes().filter(function (i) {\n        if (i === start) {\n          record = true;\n        }\n\n        if (i === end) {\n          // not else if, as start might === end\n          record = false;\n          return true;\n        }\n\n        return record;\n      });\n    };\n\n    var selectRows = function selectRows(start, end) {\n      var indexes = dt.rows({\n        search: 'applied'\n      }).indexes(); // Which comes first - might need to swap\n\n      if (indexes.indexOf(start) > indexes.indexOf(end)) {\n        var tmp = end;\n        end = start;\n        start = tmp;\n      }\n\n      var record = false;\n      return indexes.filter(function (i) {\n        if (i === start) {\n          record = true;\n        }\n\n        if (i === end) {\n          record = false;\n          return true;\n        }\n\n        return record;\n      });\n    };\n\n    if (!dt.cells({\n      selected: true\n    }).any() && !last) {\n      // select from the top left cell to this one\n      columnIndexes = selectColumns(0, idx.column);\n      rowIndexes = selectRows(0, idx.row);\n    } else {\n      // Get column indexes between old and new\n      columnIndexes = selectColumns(last.column, idx.column);\n      rowIndexes = selectRows(last.row, idx.row);\n    }\n\n    indexes = dt.cells(rowIndexes, columnIndexes).flatten();\n\n    if (!dt.cells(idx, {\n      selected: true\n    }).any()) {\n      // Select range\n      dt.cells(indexes).select();\n    } else {\n      // Deselect range\n      dt.cells(indexes).deselect();\n    }\n  }\n  /**\n   * Disable mouse selection by removing the selectors\n   *\n   * @param {DataTable.Api} dt DataTable to remove events from\n   * @private\n   */\n\n\n  function disableMouseSelection(dt) {\n    var ctx = dt.settings()[0];\n    var selector = ctx._select.selector;\n    $(dt.table().container()).off('mousedown.dtSelect', selector).off('mouseup.dtSelect', selector).off('click.dtSelect', selector);\n    $('body').off('click.dtSelect' + dt.table().node().id);\n  }\n  /**\n   * Attach mouse listeners to the table to allow mouse selection of items\n   *\n   * @param {DataTable.Api} dt DataTable to remove events from\n   * @private\n   */\n\n\n  function enableMouseSelection(dt) {\n    var container = $(dt.table().container());\n    var ctx = dt.settings()[0];\n    var selector = ctx._select.selector;\n    var matchSelection;\n    container.on('mousedown.dtSelect', selector, function (e) {\n      // Disallow text selection for shift clicking on the table so multi\n      // element selection doesn't look terrible!\n      if (e.shiftKey || e.metaKey || e.ctrlKey) {\n        container.css('-moz-user-select', 'none').one('selectstart.dtSelect', selector, function () {\n          return false;\n        });\n      }\n\n      if (window.getSelection) {\n        matchSelection = window.getSelection();\n      }\n    }).on('mouseup.dtSelect', selector, function () {\n      // Allow text selection to occur again, Mozilla style (tested in FF\n      // 35.0.1 - still required)\n      container.css('-moz-user-select', '');\n    }).on('click.dtSelect', selector, function (e) {\n      var items = dt.select.items();\n      var idx; // If text was selected (click and drag), then we shouldn't change\n      // the row's selected state\n\n      if (window.getSelection) {\n        var selection = window.getSelection(); // If the element that contains the selection is not in the table, we can ignore it\n        // This can happen if the developer selects text from the click event\n\n        if (!selection.anchorNode || $(selection.anchorNode).closest('table')[0] === dt.table().node()) {\n          if (selection !== matchSelection) {\n            return;\n          }\n        }\n      }\n\n      var ctx = dt.settings()[0];\n      var wrapperClass = dt.settings()[0].oClasses.sWrapper.replace(/ /g, '.'); // Ignore clicks inside a sub-table\n\n      if ($(e.target).closest('div.' + wrapperClass)[0] != dt.table().container()) {\n        return;\n      }\n\n      var cell = dt.cell($(e.target).closest('td, th')); // Check the cell actually belongs to the host DataTable (so child\n      // rows, etc, are ignored)\n\n      if (!cell.any()) {\n        return;\n      }\n\n      var event = $.Event('user-select.dt');\n      eventTrigger(dt, event, [items, cell, e]);\n\n      if (event.isDefaultPrevented()) {\n        return;\n      }\n\n      var cellIndex = cell.index();\n\n      if (items === 'row') {\n        idx = cellIndex.row;\n        typeSelect(e, dt, ctx, 'row', idx);\n      } else if (items === 'column') {\n        idx = cell.index().column;\n        typeSelect(e, dt, ctx, 'column', idx);\n      } else if (items === 'cell') {\n        idx = cell.index();\n        typeSelect(e, dt, ctx, 'cell', idx);\n      }\n\n      ctx._select_lastCell = cellIndex;\n    }); // Blurable\n\n    $('body').on('click.dtSelect' + dt.table().node().id, function (e) {\n      if (ctx._select.blurable) {\n        // If the click was inside the DataTables container, don't blur\n        if ($(e.target).parents().filter(dt.table().container()).length) {\n          return;\n        } // Ignore elements which have been removed from the DOM (i.e. paging\n        // buttons)\n\n\n        if ($(e.target).parents('html').length === 0) {\n          return;\n        } // Don't blur in Editor form\n\n\n        if ($(e.target).parents('div.DTE').length) {\n          return;\n        }\n\n        clear(ctx, true);\n      }\n    });\n  }\n  /**\n   * Trigger an event on a DataTable\n   *\n   * @param {DataTable.Api} api      DataTable to trigger events on\n   * @param  {boolean}      selected true if selected, false if deselected\n   * @param  {string}       type     Item type acting on\n   * @param  {boolean}      any      Require that there are values before\n   *     triggering\n   * @private\n   */\n\n\n  function eventTrigger(api, type, args, any) {\n    if (any && !api.flatten().length) {\n      return;\n    }\n\n    if (typeof type === 'string') {\n      type = type + '.dt';\n    }\n\n    args.unshift(api);\n    $(api.table().node()).trigger(type, args);\n  }\n  /**\n   * Update the information element of the DataTable showing information about the\n   * items selected. This is done by adding tags to the existing text\n   * \n   * @param {DataTable.Api} api DataTable to update\n   * @private\n   */\n\n\n  function info(api) {\n    var ctx = api.settings()[0];\n\n    if (!ctx._select.info || !ctx.aanFeatures.i) {\n      return;\n    }\n\n    if (api.select.style() === 'api') {\n      return;\n    }\n\n    var rows = api.rows({\n      selected: true\n    }).flatten().length;\n    var columns = api.columns({\n      selected: true\n    }).flatten().length;\n    var cells = api.cells({\n      selected: true\n    }).flatten().length;\n\n    var add = function add(el, name, num) {\n      el.append($('<span class=\"select-item\"/>').append(api.i18n('select.' + name + 's', {\n        _: '%d ' + name + 's selected',\n        0: '',\n        1: '1 ' + name + ' selected'\n      }, num)));\n    }; // Internal knowledge of DataTables to loop over all information elements\n\n\n    $.each(ctx.aanFeatures.i, function (i, el) {\n      el = $(el);\n      var output = $('<span class=\"select-info\"/>');\n      add(output, 'row', rows);\n      add(output, 'column', columns);\n      add(output, 'cell', cells);\n      var exisiting = el.children('span.select-info');\n\n      if (exisiting.length) {\n        exisiting.remove();\n      }\n\n      if (output.text() !== '') {\n        el.append(output);\n      }\n    });\n  }\n  /**\n   * Initialisation of a new table. Attach event handlers and callbacks to allow\n   * Select to operate correctly.\n   *\n   * This will occur _after_ the initial DataTables initialisation, although\n   * before Ajax data is rendered, if there is ajax data\n   *\n   * @param  {DataTable.settings} ctx Settings object to operate on\n   * @private\n   */\n\n\n  function init(ctx) {\n    var api = new DataTable.Api(ctx); // Row callback so that classes can be added to rows and cells if the item\n    // was selected before the element was created. This will happen with the\n    // `deferRender` option enabled.\n    // \n    // This method of attaching to `aoRowCreatedCallback` is a hack until\n    // DataTables has proper events for row manipulation If you are reviewing\n    // this code to create your own plug-ins, please do not do this!\n\n    ctx.aoRowCreatedCallback.push({\n      fn: function fn(row, data, index) {\n        var i, ien;\n        var d = ctx.aoData[index]; // Row\n\n        if (d._select_selected) {\n          $(row).addClass(ctx._select.className);\n        } // Cells and columns - if separated out, we would need to do two\n        // loops, so it makes sense to combine them into a single one\n\n\n        for (i = 0, ien = ctx.aoColumns.length; i < ien; i++) {\n          if (ctx.aoColumns[i]._select_selected || d._selected_cells && d._selected_cells[i]) {\n            $(d.anCells[i]).addClass(ctx._select.className);\n          }\n        }\n      },\n      sName: 'select-deferRender'\n    }); // On Ajax reload we want to reselect all rows which are currently selected,\n    // if there is an rowId (i.e. a unique value to identify each row with)\n\n    api.on('preXhr.dt.dtSelect', function () {\n      // note that column selection doesn't need to be cached and then\n      // reselected, as they are already selected\n      var rows = api.rows({\n        selected: true\n      }).ids(true).filter(function (d) {\n        return d !== undefined;\n      });\n      var cells = api.cells({\n        selected: true\n      }).eq(0).map(function (cellIdx) {\n        var id = api.row(cellIdx.row).id(true);\n        return id ? {\n          row: id,\n          column: cellIdx.column\n        } : undefined;\n      }).filter(function (d) {\n        return d !== undefined;\n      }); // On the next draw, reselect the currently selected items\n\n      api.one('draw.dt.dtSelect', function () {\n        api.rows(rows).select(); // `cells` is not a cell index selector, so it needs a loop\n\n        if (cells.any()) {\n          cells.each(function (id) {\n            api.cells(id.row, id.column).select();\n          });\n        }\n      });\n    }); // Update the table information element with selected item summary\n\n    api.on('draw.dtSelect.dt select.dtSelect.dt deselect.dtSelect.dt info.dt', function () {\n      info(api);\n    }); // Clean up and release\n\n    api.on('destroy.dtSelect', function () {\n      disableMouseSelection(api);\n      api.off('.dtSelect');\n    });\n  }\n  /**\n   * Add one or more items (rows or columns) to the selection when shift clicking\n   * in OS selection style\n   *\n   * @param  {DataTable.Api} dt   DataTable\n   * @param  {string}        type Row or column range selector\n   * @param  {object}        idx  Item index to select to\n   * @param  {object}        last Item index to select from\n   * @private\n   */\n\n\n  function rowColumnRange(dt, type, idx, last) {\n    // Add a range of rows from the last selected row to this one\n    var indexes = dt[type + 's']({\n      search: 'applied'\n    }).indexes();\n    var idx1 = $.inArray(last, indexes);\n    var idx2 = $.inArray(idx, indexes);\n\n    if (!dt[type + 's']({\n      selected: true\n    }).any() && idx1 === -1) {\n      // select from top to here - slightly odd, but both Windows and Mac OS\n      // do this\n      indexes.splice($.inArray(idx, indexes) + 1, indexes.length);\n    } else {\n      // reverse so we can shift click 'up' as well as down\n      if (idx1 > idx2) {\n        var tmp = idx2;\n        idx2 = idx1;\n        idx1 = tmp;\n      }\n\n      indexes.splice(idx2 + 1, indexes.length);\n      indexes.splice(0, idx1);\n    }\n\n    if (!dt[type](idx, {\n      selected: true\n    }).any()) {\n      // Select range\n      dt[type + 's'](indexes).select();\n    } else {\n      // Deselect range - need to keep the clicked on row selected\n      indexes.splice($.inArray(idx, indexes), 1);\n      dt[type + 's'](indexes).deselect();\n    }\n  }\n  /**\n   * Clear all selected items\n   *\n   * @param  {DataTable.settings} ctx Settings object of the host DataTable\n   * @param  {boolean} [force=false] Force the de-selection to happen, regardless\n   *     of selection style\n   * @private\n   */\n\n\n  function clear(ctx, force) {\n    if (force || ctx._select.style === 'single') {\n      var api = new DataTable.Api(ctx);\n      api.rows({\n        selected: true\n      }).deselect();\n      api.columns({\n        selected: true\n      }).deselect();\n      api.cells({\n        selected: true\n      }).deselect();\n    }\n  }\n  /**\n   * Select items based on the current configuration for style and items.\n   *\n   * @param  {object}             e    Mouse event object\n   * @param  {DataTables.Api}     dt   DataTable\n   * @param  {DataTable.settings} ctx  Settings object of the host DataTable\n   * @param  {string}             type Items to select\n   * @param  {int|object}         idx  Index of the item to select\n   * @private\n   */\n\n\n  function typeSelect(e, dt, ctx, type, idx) {\n    var style = dt.select.style();\n    var isSelected = dt[type](idx, {\n      selected: true\n    }).any();\n\n    if (style === 'os') {\n      if (e.ctrlKey || e.metaKey) {\n        // Add or remove from the selection\n        dt[type](idx).select(!isSelected);\n      } else if (e.shiftKey) {\n        if (type === 'cell') {\n          cellRange(dt, idx, ctx._select_lastCell || null);\n        } else {\n          rowColumnRange(dt, type, idx, ctx._select_lastCell ? ctx._select_lastCell[type] : null);\n        }\n      } else {\n        // No cmd or shift click - deselect if selected, or select\n        // this row only\n        var selected = dt[type + 's']({\n          selected: true\n        });\n\n        if (isSelected && selected.flatten().length === 1) {\n          dt[type](idx).deselect();\n        } else {\n          selected.deselect();\n          dt[type](idx).select();\n        }\n      }\n    } else if (style == 'multi+shift') {\n      if (e.shiftKey) {\n        if (type === 'cell') {\n          cellRange(dt, idx, ctx._select_lastCell || null);\n        } else {\n          rowColumnRange(dt, type, idx, ctx._select_lastCell ? ctx._select_lastCell[type] : null);\n        }\n      } else {\n        dt[type](idx).select(!isSelected);\n      }\n    } else {\n      dt[type](idx).select(!isSelected);\n    }\n  }\n  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n   * DataTables selectors\n   */\n  // row and column are basically identical just assigned to different properties\n  // and checking a different array, so we can dynamically create the functions to\n  // reduce the code size\n\n\n  $.each([{\n    type: 'row',\n    prop: 'aoData'\n  }, {\n    type: 'column',\n    prop: 'aoColumns'\n  }], function (i, o) {\n    DataTable.ext.selector[o.type].push(function (settings, opts, indexes) {\n      var selected = opts.selected;\n      var data;\n      var out = [];\n\n      if (selected !== true && selected !== false) {\n        return indexes;\n      }\n\n      for (var i = 0, ien = indexes.length; i < ien; i++) {\n        data = settings[o.prop][indexes[i]];\n\n        if (selected === true && data._select_selected === true || selected === false && !data._select_selected) {\n          out.push(indexes[i]);\n        }\n      }\n\n      return out;\n    });\n  });\n  DataTable.ext.selector.cell.push(function (settings, opts, cells) {\n    var selected = opts.selected;\n    var rowData;\n    var out = [];\n\n    if (selected === undefined) {\n      return cells;\n    }\n\n    for (var i = 0, ien = cells.length; i < ien; i++) {\n      rowData = settings.aoData[cells[i].row];\n\n      if (selected === true && rowData._selected_cells && rowData._selected_cells[cells[i].column] === true || selected === false && (!rowData._selected_cells || !rowData._selected_cells[cells[i].column])) {\n        out.push(cells[i]);\n      }\n    }\n\n    return out;\n  });\n  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n   * DataTables API\n   *\n   * For complete documentation, please refer to the docs/api directory or the\n   * DataTables site\n   */\n  // Local variables to improve compression\n\n  var apiRegister = DataTable.Api.register;\n  var apiRegisterPlural = DataTable.Api.registerPlural;\n  apiRegister('select()', function () {\n    return this.iterator('table', function (ctx) {\n      DataTable.select.init(new DataTable.Api(ctx));\n    });\n  });\n  apiRegister('select.blurable()', function (flag) {\n    if (flag === undefined) {\n      return this.context[0]._select.blurable;\n    }\n\n    return this.iterator('table', function (ctx) {\n      ctx._select.blurable = flag;\n    });\n  });\n  apiRegister('select.info()', function (flag) {\n    if (info === undefined) {\n      return this.context[0]._select.info;\n    }\n\n    return this.iterator('table', function (ctx) {\n      ctx._select.info = flag;\n    });\n  });\n  apiRegister('select.items()', function (items) {\n    if (items === undefined) {\n      return this.context[0]._select.items;\n    }\n\n    return this.iterator('table', function (ctx) {\n      ctx._select.items = items;\n      eventTrigger(new DataTable.Api(ctx), 'selectItems', [items]);\n    });\n  }); // Takes effect from the _next_ selection. None disables future selection, but\n  // does not clear the current selection. Use the `deselect` methods for that\n\n  apiRegister('select.style()', function (style) {\n    if (style === undefined) {\n      return this.context[0]._select.style;\n    }\n\n    return this.iterator('table', function (ctx) {\n      ctx._select.style = style;\n\n      if (!ctx._select_init) {\n        init(ctx);\n      } // Add / remove mouse event handlers. They aren't required when only\n      // API selection is available\n\n\n      var dt = new DataTable.Api(ctx);\n      disableMouseSelection(dt);\n\n      if (style !== 'api') {\n        enableMouseSelection(dt);\n      }\n\n      eventTrigger(new DataTable.Api(ctx), 'selectStyle', [style]);\n    });\n  });\n  apiRegister('select.selector()', function (selector) {\n    if (selector === undefined) {\n      return this.context[0]._select.selector;\n    }\n\n    return this.iterator('table', function (ctx) {\n      disableMouseSelection(new DataTable.Api(ctx));\n      ctx._select.selector = selector;\n\n      if (ctx._select.style !== 'api') {\n        enableMouseSelection(new DataTable.Api(ctx));\n      }\n    });\n  });\n  apiRegisterPlural('rows().select()', 'row().select()', function (select) {\n    var api = this;\n\n    if (select === false) {\n      return this.deselect();\n    }\n\n    this.iterator('row', function (ctx, idx) {\n      clear(ctx);\n      ctx.aoData[idx]._select_selected = true;\n      $(ctx.aoData[idx].nTr).addClass(ctx._select.className);\n    });\n    this.iterator('table', function (ctx, i) {\n      eventTrigger(api, 'select', ['row', api[i]], true);\n    });\n    return this;\n  });\n  apiRegisterPlural('columns().select()', 'column().select()', function (select) {\n    var api = this;\n\n    if (select === false) {\n      return this.deselect();\n    }\n\n    this.iterator('column', function (ctx, idx) {\n      clear(ctx);\n      ctx.aoColumns[idx]._select_selected = true;\n      var column = new DataTable.Api(ctx).column(idx);\n      $(column.header()).addClass(ctx._select.className);\n      $(column.footer()).addClass(ctx._select.className);\n      column.nodes().to$().addClass(ctx._select.className);\n    });\n    this.iterator('table', function (ctx, i) {\n      eventTrigger(api, 'select', ['column', api[i]], true);\n    });\n    return this;\n  });\n  apiRegisterPlural('cells().select()', 'cell().select()', function (select) {\n    var api = this;\n\n    if (select === false) {\n      return this.deselect();\n    }\n\n    this.iterator('cell', function (ctx, rowIdx, colIdx) {\n      clear(ctx);\n      var data = ctx.aoData[rowIdx];\n\n      if (data._selected_cells === undefined) {\n        data._selected_cells = [];\n      }\n\n      data._selected_cells[colIdx] = true;\n\n      if (data.anCells) {\n        $(data.anCells[colIdx]).addClass(ctx._select.className);\n      }\n    });\n    this.iterator('table', function (ctx, i) {\n      eventTrigger(api, 'select', ['cell', api[i]], true);\n    });\n    return this;\n  });\n  apiRegisterPlural('rows().deselect()', 'row().deselect()', function () {\n    var api = this;\n    this.iterator('row', function (ctx, idx) {\n      ctx.aoData[idx]._select_selected = false;\n      $(ctx.aoData[idx].nTr).removeClass(ctx._select.className);\n    });\n    this.iterator('table', function (ctx, i) {\n      eventTrigger(api, 'deselect', ['row', api[i]], true);\n    });\n    return this;\n  });\n  apiRegisterPlural('columns().deselect()', 'column().deselect()', function () {\n    var api = this;\n    this.iterator('column', function (ctx, idx) {\n      ctx.aoColumns[idx]._select_selected = false;\n      var api = new DataTable.Api(ctx);\n      var column = api.column(idx);\n      $(column.header()).removeClass(ctx._select.className);\n      $(column.footer()).removeClass(ctx._select.className); // Need to loop over each cell, rather than just using\n      // `column().nodes()` as cells which are individually selected should\n      // not have the `selected` class removed from them\n\n      api.cells(null, idx).indexes().each(function (cellIdx) {\n        var data = ctx.aoData[cellIdx.row];\n        var cellSelected = data._selected_cells;\n\n        if (data.anCells && (!cellSelected || !cellSelected[cellIdx.column])) {\n          $(data.anCells[cellIdx.column]).removeClass(ctx._select.className);\n        }\n      });\n    });\n    this.iterator('table', function (ctx, i) {\n      eventTrigger(api, 'deselect', ['column', api[i]], true);\n    });\n    return this;\n  });\n  apiRegisterPlural('cells().deselect()', 'cell().deselect()', function () {\n    var api = this;\n    this.iterator('cell', function (ctx, rowIdx, colIdx) {\n      var data = ctx.aoData[rowIdx];\n      data._selected_cells[colIdx] = false; // Remove class only if the cells exist, and the cell is not column\n      // selected, in which case the class should remain (since it is selected\n      // in the column)\n\n      if (data.anCells && !ctx.aoColumns[colIdx]._select_selected) {\n        $(data.anCells[colIdx]).removeClass(ctx._select.className);\n      }\n    });\n    this.iterator('table', function (ctx, i) {\n      eventTrigger(api, 'deselect', ['cell', api[i]], true);\n    });\n    return this;\n  });\n  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n   * Buttons\n   */\n\n  function i18n(label, def) {\n    return function (dt) {\n      return dt.i18n('buttons.' + label, def);\n    };\n  } // Common events with suitable namespaces\n\n\n  function namespacedEvents(config) {\n    var unique = config._eventNamespace;\n    return 'draw.dt.DT' + unique + ' select.dt.DT' + unique + ' deselect.dt.DT' + unique;\n  }\n\n  function enabled(dt, config) {\n    if ($.inArray('rows', config.limitTo) !== -1 && dt.rows({\n      selected: true\n    }).any()) {\n      return true;\n    }\n\n    if ($.inArray('columns', config.limitTo) !== -1 && dt.columns({\n      selected: true\n    }).any()) {\n      return true;\n    }\n\n    if ($.inArray('cells', config.limitTo) !== -1 && dt.cells({\n      selected: true\n    }).any()) {\n      return true;\n    }\n\n    return false;\n  }\n\n  var _buttonNamespace = 0;\n  $.extend(DataTable.ext.buttons, {\n    selected: {\n      text: i18n('selected', 'Selected'),\n      className: 'buttons-selected',\n      limitTo: ['rows', 'columns', 'cells'],\n      init: function init(dt, node, config) {\n        var that = this;\n        config._eventNamespace = '.select' + _buttonNamespace++; // .DT namespace listeners are removed by DataTables automatically\n        // on table destroy\n\n        dt.on(namespacedEvents(config), function () {\n          that.enable(enabled(dt, config));\n        });\n        this.disable();\n      },\n      destroy: function destroy(dt, node, config) {\n        dt.off(config._eventNamespace);\n      }\n    },\n    selectedSingle: {\n      text: i18n('selectedSingle', 'Selected single'),\n      className: 'buttons-selected-single',\n      init: function init(dt, node, config) {\n        var that = this;\n        config._eventNamespace = '.select' + _buttonNamespace++;\n        dt.on(namespacedEvents(config), function () {\n          var count = dt.rows({\n            selected: true\n          }).flatten().length + dt.columns({\n            selected: true\n          }).flatten().length + dt.cells({\n            selected: true\n          }).flatten().length;\n          that.enable(count === 1);\n        });\n        this.disable();\n      },\n      destroy: function destroy(dt, node, config) {\n        dt.off(config._eventNamespace);\n      }\n    },\n    selectAll: {\n      text: i18n('selectAll', 'Select all'),\n      className: 'buttons-select-all',\n      action: function action() {\n        var items = this.select.items();\n        this[items + 's']().select();\n      }\n    },\n    selectNone: {\n      text: i18n('selectNone', 'Deselect all'),\n      className: 'buttons-select-none',\n      action: function action() {\n        clear(this.settings()[0], true);\n      },\n      init: function init(dt, node, config) {\n        var that = this;\n        config._eventNamespace = '.select' + _buttonNamespace++;\n        dt.on(namespacedEvents(config), function () {\n          var count = dt.rows({\n            selected: true\n          }).flatten().length + dt.columns({\n            selected: true\n          }).flatten().length + dt.cells({\n            selected: true\n          }).flatten().length;\n          that.enable(count > 0);\n        });\n        this.disable();\n      },\n      destroy: function destroy(dt, node, config) {\n        dt.off(config._eventNamespace);\n      }\n    }\n  });\n  $.each(['Row', 'Column', 'Cell'], function (i, item) {\n    var lc = item.toLowerCase();\n    DataTable.ext.buttons['select' + item + 's'] = {\n      text: i18n('select' + item + 's', 'Select ' + lc + 's'),\n      className: 'buttons-select-' + lc + 's',\n      action: function action() {\n        this.select.items(lc);\n      },\n      init: function init(dt) {\n        var that = this;\n        dt.on('selectItems.dt.DT', function (e, ctx, items) {\n          that.active(items === lc);\n        });\n      }\n    };\n  });\n  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n   * Initialisation\n   */\n  // DataTables creation - check if select has been defined in the options. Note\n  // this required that the table be in the document! If it isn't then something\n  // needs to trigger this method unfortunately. The next major release of\n  // DataTables will rework the events and address this.\n\n  $(document).on('preInit.dt.dtSelect', function (e, ctx) {\n    if (e.namespace !== 'dt') {\n      return;\n    }\n\n    DataTable.select.init(new DataTable.Api(ctx));\n  });\n  return DataTable.select;\n});","/*!\n * HTML5 export buttons for Buttons and DataTables.\n * 2016 SpryMedia Ltd - datatables.net/license\n *\n * FileSaver.js (1.3.3) - MIT license\n * Copyright © 2016 Eli Grey - http://eligrey.com\n */\n(function (factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD\n    define(['jquery', 'datatables.net', 'datatables.net-buttons'], function ($) {\n      return factory($, window, document);\n    });\n  } else if (typeof exports === 'object') {\n    // CommonJS\n    module.exports = function (root, $, jszip, pdfmake) {\n      if (!root) {\n        root = window;\n      }\n\n      if (!$ || !$.fn.dataTable) {\n        $ = require('datatables.net')(root, $).$;\n      }\n\n      if (!$.fn.dataTable.Buttons) {\n        require('datatables.net-buttons')(root, $);\n      }\n\n      return factory($, root, root.document, jszip, pdfmake);\n    };\n  } else {\n    // Browser\n    factory(jQuery, window, document);\n  }\n})(function ($, window, document, jszip, pdfmake, undefined) {\n  'use strict';\n\n  var DataTable = $.fn.dataTable; // Allow the constructor to pass in JSZip and PDFMake from external requires.\n  // Otherwise, use globally defined variables, if they are available.\n\n  function _jsZip() {\n    return jszip || window.JSZip;\n  }\n\n  function _pdfMake() {\n    return pdfmake || window.pdfMake;\n  }\n\n  DataTable.Buttons.pdfMake = function (_) {\n    if (!_) {\n      return _pdfMake();\n    }\n\n    pdfmake = m_ake;\n  };\n\n  DataTable.Buttons.jszip = function (_) {\n    if (!_) {\n      return _jsZip();\n    }\n\n    jszip = _;\n  };\n  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n   * FileSaver.js dependency\n   */\n\n  /*jslint bitwise: true, indent: 4, laxbreak: true, laxcomma: true, smarttabs: true, plusplus: true */\n\n\n  var _saveAs = function (view) {\n    \"use strict\"; // IE <10 is explicitly unsupported\n\n    if (typeof view === \"undefined\" || typeof navigator !== \"undefined\" && /MSIE [1-9]\\./.test(navigator.userAgent)) {\n      return;\n    }\n\n    var doc = view.document // only get URL when necessary in case Blob.js hasn't overridden it yet\n    ,\n        get_URL = function get_URL() {\n      return view.URL || view.webkitURL || view;\n    },\n        save_link = doc.createElementNS(\"http://www.w3.org/1999/xhtml\", \"a\"),\n        can_use_save_link = \"download\" in save_link,\n        click = function click(node) {\n      var event = new MouseEvent(\"click\");\n      node.dispatchEvent(event);\n    },\n        is_safari = /constructor/i.test(view.HTMLElement) || view.safari,\n        is_chrome_ios = /CriOS\\/[\\d]+/.test(navigator.userAgent),\n        throw_outside = function throw_outside(ex) {\n      (view.setImmediate || view.setTimeout)(function () {\n        throw ex;\n      }, 0);\n    },\n        force_saveable_type = \"application/octet-stream\" // the Blob API is fundamentally broken as there is no \"downloadfinished\" event to subscribe to\n    ,\n        arbitrary_revoke_timeout = 1000 * 40 // in ms\n    ,\n        revoke = function revoke(file) {\n      var revoker = function revoker() {\n        if (typeof file === \"string\") {\n          // file is an object URL\n          get_URL().revokeObjectURL(file);\n        } else {\n          // file is a File\n          file.remove();\n        }\n      };\n\n      setTimeout(revoker, arbitrary_revoke_timeout);\n    },\n        dispatch = function dispatch(filesaver, event_types, event) {\n      event_types = [].concat(event_types);\n      var i = event_types.length;\n\n      while (i--) {\n        var listener = filesaver[\"on\" + event_types[i]];\n\n        if (typeof listener === \"function\") {\n          try {\n            listener.call(filesaver, event || filesaver);\n          } catch (ex) {\n            throw_outside(ex);\n          }\n        }\n      }\n    },\n        auto_bom = function auto_bom(blob) {\n      // prepend BOM for UTF-8 XML and text/* types (including HTML)\n      // note: your browser will automatically convert UTF-16 U+FEFF to EF BB BF\n      if (/^\\s*(?:text\\/\\S*|application\\/xml|\\S*\\/\\S*\\+xml)\\s*;.*charset\\s*=\\s*utf-8/i.test(blob.type)) {\n        return new Blob([String.fromCharCode(0xFEFF), blob], {\n          type: blob.type\n        });\n      }\n\n      return blob;\n    },\n        FileSaver = function FileSaver(blob, name, no_auto_bom) {\n      if (!no_auto_bom) {\n        blob = auto_bom(blob);\n      } // First try a.download, then web filesystem, then object URLs\n\n\n      var filesaver = this,\n          type = blob.type,\n          force = type === force_saveable_type,\n          object_url,\n          dispatch_all = function dispatch_all() {\n        dispatch(filesaver, \"writestart progress write writeend\".split(\" \"));\n      } // on any filesys errors revert to saving with object URLs\n      ,\n          fs_error = function fs_error() {\n        if ((is_chrome_ios || force && is_safari) && view.FileReader) {\n          // Safari doesn't allow downloading of blob urls\n          var reader = new FileReader();\n\n          reader.onloadend = function () {\n            var url = is_chrome_ios ? reader.result : reader.result.replace(/^data:[^;]*;/, 'data:attachment/file;');\n            var popup = view.open(url, '_blank');\n            if (!popup) view.location.href = url;\n            url = undefined; // release reference before dispatching\n\n            filesaver.readyState = filesaver.DONE;\n            dispatch_all();\n          };\n\n          reader.readAsDataURL(blob);\n          filesaver.readyState = filesaver.INIT;\n          return;\n        } // don't create more object URLs than needed\n\n\n        if (!object_url) {\n          object_url = get_URL().createObjectURL(blob);\n        }\n\n        if (force) {\n          view.location.href = object_url;\n        } else {\n          var opened = view.open(object_url, \"_blank\");\n\n          if (!opened) {\n            // Apple does not allow window.open, see https://developer.apple.com/library/safari/documentation/Tools/Conceptual/SafariExtensionGuide/WorkingwithWindowsandTabs/WorkingwithWindowsandTabs.html\n            view.location.href = object_url;\n          }\n        }\n\n        filesaver.readyState = filesaver.DONE;\n        dispatch_all();\n        revoke(object_url);\n      };\n\n      filesaver.readyState = filesaver.INIT;\n\n      if (can_use_save_link) {\n        object_url = get_URL().createObjectURL(blob);\n        setTimeout(function () {\n          save_link.href = object_url;\n          save_link.download = name;\n          click(save_link);\n          dispatch_all();\n          revoke(object_url);\n          filesaver.readyState = filesaver.DONE;\n        });\n        return;\n      }\n\n      fs_error();\n    },\n        FS_proto = FileSaver.prototype,\n        saveAs = function saveAs(blob, name, no_auto_bom) {\n      return new FileSaver(blob, name || blob.name || \"download\", no_auto_bom);\n    }; // IE 10+ (native saveAs)\n\n\n    if (typeof navigator !== \"undefined\" && navigator.msSaveOrOpenBlob) {\n      return function (blob, name, no_auto_bom) {\n        name = name || blob.name || \"download\";\n\n        if (!no_auto_bom) {\n          blob = auto_bom(blob);\n        }\n\n        return navigator.msSaveOrOpenBlob(blob, name);\n      };\n    }\n\n    FS_proto.abort = function () {};\n\n    FS_proto.readyState = FS_proto.INIT = 0;\n    FS_proto.WRITING = 1;\n    FS_proto.DONE = 2;\n    FS_proto.error = FS_proto.onwritestart = FS_proto.onprogress = FS_proto.onwrite = FS_proto.onabort = FS_proto.onerror = FS_proto.onwriteend = null;\n    return saveAs;\n  }(typeof self !== \"undefined\" && self || typeof window !== \"undefined\" && window || this.content); // Expose file saver on the DataTables API. Can't attach to `DataTables.Buttons`\n  // since this file can be loaded before Button's core!\n\n\n  DataTable.fileSave = _saveAs;\n  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n   * Local (private) functions\n   */\n\n  /**\n   * Get the sheet name for Excel exports.\n   *\n   * @param {object}\tconfig Button configuration\n   */\n\n  var _sheetname = function _sheetname(config) {\n    var sheetName = 'Sheet1';\n\n    if (config.sheetName) {\n      sheetName = config.sheetName.replace(/[\\[\\]\\*\\/\\\\\\?\\:]/g, '');\n    }\n\n    return sheetName;\n  };\n  /**\n   * Get the newline character(s)\n   *\n   * @param {object}\tconfig Button configuration\n   * @return {string}\t\t\t\tNewline character\n   */\n\n\n  var _newLine = function _newLine(config) {\n    return config.newline ? config.newline : navigator.userAgent.match(/Windows/) ? '\\r\\n' : '\\n';\n  };\n  /**\n   * Combine the data from the `buttons.exportData` method into a string that\n   * will be used in the export file.\n   *\n   * @param\t{DataTable.Api} dt\t\t DataTables API instance\n   * @param\t{object}\t\t\t\tconfig Button configuration\n   * @return {object}\t\t\t\t\t\t\t The data to export\n   */\n\n\n  var _exportData = function _exportData(dt, config) {\n    var newLine = _newLine(config);\n\n    var data = dt.buttons.exportData(config.exportOptions);\n    var boundary = config.fieldBoundary;\n    var separator = config.fieldSeparator;\n    var reBoundary = new RegExp(boundary, 'g');\n    var escapeChar = config.escapeChar !== undefined ? config.escapeChar : '\\\\';\n\n    var join = function join(a) {\n      var s = ''; // If there is a field boundary, then we might need to escape it in\n      // the source data\n\n      for (var i = 0, ien = a.length; i < ien; i++) {\n        if (i > 0) {\n          s += separator;\n        }\n\n        s += boundary ? boundary + ('' + a[i]).replace(reBoundary, escapeChar + boundary) + boundary : a[i];\n      }\n\n      return s;\n    };\n\n    var header = config.header ? join(data.header) + newLine : '';\n    var footer = config.footer && data.footer ? newLine + join(data.footer) : '';\n    var body = [];\n\n    for (var i = 0, ien = data.body.length; i < ien; i++) {\n      body.push(join(data.body[i]));\n    }\n\n    return {\n      str: header + body.join(newLine) + footer,\n      rows: body.length\n    };\n  };\n  /**\n   * Older versions of Safari (prior to tech preview 18) don't support the\n   * download option required.\n   *\n   * @return {Boolean} `true` if old Safari\n   */\n\n\n  var _isDuffSafari = function _isDuffSafari() {\n    var safari = navigator.userAgent.indexOf('Safari') !== -1 && navigator.userAgent.indexOf('Chrome') === -1 && navigator.userAgent.indexOf('Opera') === -1;\n\n    if (!safari) {\n      return false;\n    }\n\n    var version = navigator.userAgent.match(/AppleWebKit\\/(\\d+\\.\\d+)/);\n\n    if (version && version.length > 1 && version[1] * 1 < 603.1) {\n      return true;\n    }\n\n    return false;\n  };\n  /**\n   * Convert from numeric position to letter for column names in Excel\n   * @param  {int} n Column number\n   * @return {string} Column letter(s) name\n   */\n\n\n  function createCellPos(n) {\n    var ordA = 'A'.charCodeAt(0);\n    var ordZ = 'Z'.charCodeAt(0);\n    var len = ordZ - ordA + 1;\n    var s = \"\";\n\n    while (n >= 0) {\n      s = String.fromCharCode(n % len + ordA) + s;\n      n = Math.floor(n / len) - 1;\n    }\n\n    return s;\n  }\n\n  try {\n    var _serialiser = new XMLSerializer();\n\n    var _ieExcel;\n  } catch (t) {}\n  /**\n   * Recursively add XML files from an object's structure to a ZIP file. This\n   * allows the XSLX file to be easily defined with an object's structure matching\n   * the files structure.\n   *\n   * @param {JSZip} zip ZIP package\n   * @param {object} obj Object to add (recursive)\n   */\n\n\n  function _addToZip(zip, obj) {\n    if (_ieExcel === undefined) {\n      // Detect if we are dealing with IE's _awful_ serialiser by seeing if it\n      // drop attributes\n      _ieExcel = _serialiser.serializeToString($.parseXML(excelStrings['xl/worksheets/sheet1.xml'])).indexOf('xmlns:r') === -1;\n    }\n\n    $.each(obj, function (name, val) {\n      if ($.isPlainObject(val)) {\n        var newDir = zip.folder(name);\n\n        _addToZip(newDir, val);\n      } else {\n        if (_ieExcel) {\n          // IE's XML serialiser will drop some name space attributes from\n          // from the root node, so we need to save them. Do this by\n          // replacing the namespace nodes with a regular attribute that\n          // we convert back when serialised. Edge does not have this\n          // issue\n          var worksheet = val.childNodes[0];\n          var i, ien;\n          var attrs = [];\n\n          for (i = worksheet.attributes.length - 1; i >= 0; i--) {\n            var attrName = worksheet.attributes[i].nodeName;\n            var attrValue = worksheet.attributes[i].nodeValue;\n\n            if (attrName.indexOf(':') !== -1) {\n              attrs.push({\n                name: attrName,\n                value: attrValue\n              });\n              worksheet.removeAttribute(attrName);\n            }\n          }\n\n          for (i = 0, ien = attrs.length; i < ien; i++) {\n            var attr = val.createAttribute(attrs[i].name.replace(':', '_dt_b_namespace_token_'));\n            attr.value = attrs[i].value;\n            worksheet.setAttributeNode(attr);\n          }\n        }\n\n        var str = _serialiser.serializeToString(val); // Fix IE's XML\n\n\n        if (_ieExcel) {\n          // IE doesn't include the XML declaration\n          if (str.indexOf('<?xml') === -1) {\n            str = '<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>' + str;\n          } // Return namespace attributes to being as such\n\n\n          str = str.replace(/_dt_b_namespace_token_/g, ':'); // Remove testing name space that IE puts into the space preserve attr\n\n          str = str.replace(/xmlns:NS[\\d]+=\"\" NS[\\d]+:/g, '');\n        } // Safari, IE and Edge will put empty name space attributes onto\n        // various elements making them useless. This strips them out\n\n\n        str = str.replace(/<([^<>]*?) xmlns=\"\"([^<>]*?)>/g, '<$1 $2>');\n        zip.file(name, str);\n      }\n    });\n  }\n  /**\n   * Create an XML node and add any children, attributes, etc without needing to\n   * be verbose in the DOM.\n   *\n   * @param  {object} doc      XML document\n   * @param  {string} nodeName Node name\n   * @param  {object} opts     Options - can be `attr` (attributes), `children`\n   *   (child nodes) and `text` (text content)\n   * @return {node}            Created node\n   */\n\n\n  function _createNode(doc, nodeName, opts) {\n    var tempNode = doc.createElement(nodeName);\n\n    if (opts) {\n      if (opts.attr) {\n        $(tempNode).attr(opts.attr);\n      }\n\n      if (opts.children) {\n        $.each(opts.children, function (key, value) {\n          tempNode.appendChild(value);\n        });\n      }\n\n      if (opts.text !== null && opts.text !== undefined) {\n        tempNode.appendChild(doc.createTextNode(opts.text));\n      }\n    }\n\n    return tempNode;\n  }\n  /**\n   * Get the width for an Excel column based on the contents of that column\n   * @param  {object} data Data for export\n   * @param  {int}    col  Column index\n   * @return {int}         Column width\n   */\n\n\n  function _excelColWidth(data, col) {\n    var max = data.header[col].length;\n    var len, lineSplit, str;\n\n    if (data.footer && data.footer[col].length > max) {\n      max = data.footer[col].length;\n    }\n\n    for (var i = 0, ien = data.body.length; i < ien; i++) {\n      var point = data.body[i][col];\n      str = point !== null && point !== undefined ? point.toString() : ''; // If there is a newline character, workout the width of the column\n      // based on the longest line in the string\n\n      if (str.indexOf('\\n') !== -1) {\n        lineSplit = str.split('\\n');\n        lineSplit.sort(function (a, b) {\n          return b.length - a.length;\n        });\n        len = lineSplit[0].length;\n      } else {\n        len = str.length;\n      }\n\n      if (len > max) {\n        max = len;\n      } // Max width rather than having potentially massive column widths\n\n\n      if (max > 40) {\n        return 54; // 40 * 1.35\n      }\n    }\n\n    max *= 1.35; // And a min width\n\n    return max > 6 ? max : 6;\n  } // Excel - Pre-defined strings to build a basic XLSX file\n\n\n  var excelStrings = {\n    \"_rels/.rels\": '<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>' + '<Relationships xmlns=\"http://schemas.openxmlformats.org/package/2006/relationships\">' + '<Relationship Id=\"rId1\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument\" Target=\"xl/workbook.xml\"/>' + '</Relationships>',\n    \"xl/_rels/workbook.xml.rels\": '<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>' + '<Relationships xmlns=\"http://schemas.openxmlformats.org/package/2006/relationships\">' + '<Relationship Id=\"rId1\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/worksheet\" Target=\"worksheets/sheet1.xml\"/>' + '<Relationship Id=\"rId2\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/styles\" Target=\"styles.xml\"/>' + '</Relationships>',\n    \"[Content_Types].xml\": '<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>' + '<Types xmlns=\"http://schemas.openxmlformats.org/package/2006/content-types\">' + '<Default Extension=\"xml\" ContentType=\"application/xml\" />' + '<Default Extension=\"rels\" ContentType=\"application/vnd.openxmlformats-package.relationships+xml\" />' + '<Default Extension=\"jpeg\" ContentType=\"image/jpeg\" />' + '<Override PartName=\"/xl/workbook.xml\" ContentType=\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml\" />' + '<Override PartName=\"/xl/worksheets/sheet1.xml\" ContentType=\"application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml\" />' + '<Override PartName=\"/xl/styles.xml\" ContentType=\"application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml\" />' + '</Types>',\n    \"xl/workbook.xml\": '<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>' + '<workbook xmlns=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\" xmlns:r=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships\">' + '<fileVersion appName=\"xl\" lastEdited=\"5\" lowestEdited=\"5\" rupBuild=\"24816\"/>' + '<workbookPr showInkAnnotation=\"0\" autoCompressPictures=\"0\"/>' + '<bookViews>' + '<workbookView xWindow=\"0\" yWindow=\"0\" windowWidth=\"25600\" windowHeight=\"19020\" tabRatio=\"500\"/>' + '</bookViews>' + '<sheets>' + '<sheet name=\"Sheet1\" sheetId=\"1\" r:id=\"rId1\"/>' + '</sheets>' + '<definedNames/>' + '</workbook>',\n    \"xl/worksheets/sheet1.xml\": '<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>' + '<worksheet xmlns=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\" xmlns:r=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships\" xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\" mc:Ignorable=\"x14ac\" xmlns:x14ac=\"http://schemas.microsoft.com/office/spreadsheetml/2009/9/ac\">' + '<sheetData/>' + '<mergeCells count=\"0\"/>' + '</worksheet>',\n    \"xl/styles.xml\": '<?xml version=\"1.0\" encoding=\"UTF-8\"?>' + '<styleSheet xmlns=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\" xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\" mc:Ignorable=\"x14ac\" xmlns:x14ac=\"http://schemas.microsoft.com/office/spreadsheetml/2009/9/ac\">' + '<numFmts count=\"6\">' + '<numFmt numFmtId=\"164\" formatCode=\"#,##0.00_-\\ [$$-45C]\"/>' + '<numFmt numFmtId=\"165\" formatCode=\"&quot;£&quot;#,##0.00\"/>' + '<numFmt numFmtId=\"166\" formatCode=\"[$€-2]\\ #,##0.00\"/>' + '<numFmt numFmtId=\"167\" formatCode=\"0.0%\"/>' + '<numFmt numFmtId=\"168\" formatCode=\"#,##0;(#,##0)\"/>' + '<numFmt numFmtId=\"169\" formatCode=\"#,##0.00;(#,##0.00)\"/>' + '</numFmts>' + '<fonts count=\"5\" x14ac:knownFonts=\"1\">' + '<font>' + '<sz val=\"11\" />' + '<name val=\"Calibri\" />' + '</font>' + '<font>' + '<sz val=\"11\" />' + '<name val=\"Calibri\" />' + '<color rgb=\"FFFFFFFF\" />' + '</font>' + '<font>' + '<sz val=\"11\" />' + '<name val=\"Calibri\" />' + '<b />' + '</font>' + '<font>' + '<sz val=\"11\" />' + '<name val=\"Calibri\" />' + '<i />' + '</font>' + '<font>' + '<sz val=\"11\" />' + '<name val=\"Calibri\" />' + '<u />' + '</font>' + '</fonts>' + '<fills count=\"6\">' + '<fill>' + '<patternFill patternType=\"none\" />' + '</fill>' + '<fill>' + // Excel appears to use this as a dotted background regardless of values but\n    '<patternFill patternType=\"none\" />' + // to be valid to the schema, use a patternFill\n    '</fill>' + '<fill>' + '<patternFill patternType=\"solid\">' + '<fgColor rgb=\"FFD9D9D9\" />' + '<bgColor indexed=\"64\" />' + '</patternFill>' + '</fill>' + '<fill>' + '<patternFill patternType=\"solid\">' + '<fgColor rgb=\"FFD99795\" />' + '<bgColor indexed=\"64\" />' + '</patternFill>' + '</fill>' + '<fill>' + '<patternFill patternType=\"solid\">' + '<fgColor rgb=\"ffc6efce\" />' + '<bgColor indexed=\"64\" />' + '</patternFill>' + '</fill>' + '<fill>' + '<patternFill patternType=\"solid\">' + '<fgColor rgb=\"ffc6cfef\" />' + '<bgColor indexed=\"64\" />' + '</patternFill>' + '</fill>' + '</fills>' + '<borders count=\"2\">' + '<border>' + '<left />' + '<right />' + '<top />' + '<bottom />' + '<diagonal />' + '</border>' + '<border diagonalUp=\"false\" diagonalDown=\"false\">' + '<left style=\"thin\">' + '<color auto=\"1\" />' + '</left>' + '<right style=\"thin\">' + '<color auto=\"1\" />' + '</right>' + '<top style=\"thin\">' + '<color auto=\"1\" />' + '</top>' + '<bottom style=\"thin\">' + '<color auto=\"1\" />' + '</bottom>' + '<diagonal />' + '</border>' + '</borders>' + '<cellStyleXfs count=\"1\">' + '<xf numFmtId=\"0\" fontId=\"0\" fillId=\"0\" borderId=\"0\" />' + '</cellStyleXfs>' + '<cellXfs count=\"67\">' + '<xf numFmtId=\"0\" fontId=\"0\" fillId=\"0\" borderId=\"0\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"1\" fillId=\"0\" borderId=\"0\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"2\" fillId=\"0\" borderId=\"0\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"3\" fillId=\"0\" borderId=\"0\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"4\" fillId=\"0\" borderId=\"0\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"0\" fillId=\"2\" borderId=\"0\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"1\" fillId=\"2\" borderId=\"0\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"2\" fillId=\"2\" borderId=\"0\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"3\" fillId=\"2\" borderId=\"0\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"4\" fillId=\"2\" borderId=\"0\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"0\" fillId=\"3\" borderId=\"0\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"1\" fillId=\"3\" borderId=\"0\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"2\" fillId=\"3\" borderId=\"0\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"3\" fillId=\"3\" borderId=\"0\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"4\" fillId=\"3\" borderId=\"0\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"0\" fillId=\"4\" borderId=\"0\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"1\" fillId=\"4\" borderId=\"0\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"2\" fillId=\"4\" borderId=\"0\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"3\" fillId=\"4\" borderId=\"0\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"4\" fillId=\"4\" borderId=\"0\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"0\" fillId=\"5\" borderId=\"0\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"1\" fillId=\"5\" borderId=\"0\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"2\" fillId=\"5\" borderId=\"0\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"3\" fillId=\"5\" borderId=\"0\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"4\" fillId=\"5\" borderId=\"0\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"0\" fillId=\"0\" borderId=\"1\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"1\" fillId=\"0\" borderId=\"1\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"2\" fillId=\"0\" borderId=\"1\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"3\" fillId=\"0\" borderId=\"1\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"4\" fillId=\"0\" borderId=\"1\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"0\" fillId=\"2\" borderId=\"1\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"1\" fillId=\"2\" borderId=\"1\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"2\" fillId=\"2\" borderId=\"1\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"3\" fillId=\"2\" borderId=\"1\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"4\" fillId=\"2\" borderId=\"1\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"0\" fillId=\"3\" borderId=\"1\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"1\" fillId=\"3\" borderId=\"1\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"2\" fillId=\"3\" borderId=\"1\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"3\" fillId=\"3\" borderId=\"1\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"4\" fillId=\"3\" borderId=\"1\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"0\" fillId=\"4\" borderId=\"1\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"1\" fillId=\"4\" borderId=\"1\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"2\" fillId=\"4\" borderId=\"1\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"3\" fillId=\"4\" borderId=\"1\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"4\" fillId=\"4\" borderId=\"1\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"0\" fillId=\"5\" borderId=\"1\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"1\" fillId=\"5\" borderId=\"1\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"2\" fillId=\"5\" borderId=\"1\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"3\" fillId=\"5\" borderId=\"1\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"4\" fillId=\"5\" borderId=\"1\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"0\" fillId=\"0\" borderId=\"0\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\" xfId=\"0\" applyAlignment=\"1\">' + '<alignment horizontal=\"left\"/>' + '</xf>' + '<xf numFmtId=\"0\" fontId=\"0\" fillId=\"0\" borderId=\"0\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\" xfId=\"0\" applyAlignment=\"1\">' + '<alignment horizontal=\"center\"/>' + '</xf>' + '<xf numFmtId=\"0\" fontId=\"0\" fillId=\"0\" borderId=\"0\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\" xfId=\"0\" applyAlignment=\"1\">' + '<alignment horizontal=\"right\"/>' + '</xf>' + '<xf numFmtId=\"0\" fontId=\"0\" fillId=\"0\" borderId=\"0\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\" xfId=\"0\" applyAlignment=\"1\">' + '<alignment horizontal=\"fill\"/>' + '</xf>' + '<xf numFmtId=\"0\" fontId=\"0\" fillId=\"0\" borderId=\"0\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\" xfId=\"0\" applyAlignment=\"1\">' + '<alignment textRotation=\"90\"/>' + '</xf>' + '<xf numFmtId=\"0\" fontId=\"0\" fillId=\"0\" borderId=\"0\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\" xfId=\"0\" applyAlignment=\"1\">' + '<alignment wrapText=\"1\"/>' + '</xf>' + '<xf numFmtId=\"9\"   fontId=\"0\" fillId=\"0\" borderId=\"0\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\" xfId=\"0\" applyNumberFormat=\"1\"/>' + '<xf numFmtId=\"164\" fontId=\"0\" fillId=\"0\" borderId=\"0\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\" xfId=\"0\" applyNumberFormat=\"1\"/>' + '<xf numFmtId=\"165\" fontId=\"0\" fillId=\"0\" borderId=\"0\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\" xfId=\"0\" applyNumberFormat=\"1\"/>' + '<xf numFmtId=\"166\" fontId=\"0\" fillId=\"0\" borderId=\"0\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\" xfId=\"0\" applyNumberFormat=\"1\"/>' + '<xf numFmtId=\"167\" fontId=\"0\" fillId=\"0\" borderId=\"0\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\" xfId=\"0\" applyNumberFormat=\"1\"/>' + '<xf numFmtId=\"168\" fontId=\"0\" fillId=\"0\" borderId=\"0\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\" xfId=\"0\" applyNumberFormat=\"1\"/>' + '<xf numFmtId=\"169\" fontId=\"0\" fillId=\"0\" borderId=\"0\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\" xfId=\"0\" applyNumberFormat=\"1\"/>' + '<xf numFmtId=\"3\" fontId=\"0\" fillId=\"0\" borderId=\"0\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\" xfId=\"0\" applyNumberFormat=\"1\"/>' + '<xf numFmtId=\"4\" fontId=\"0\" fillId=\"0\" borderId=\"0\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\" xfId=\"0\" applyNumberFormat=\"1\"/>' + '<xf numFmtId=\"1\" fontId=\"0\" fillId=\"0\" borderId=\"0\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\" xfId=\"0\" applyNumberFormat=\"1\"/>' + '<xf numFmtId=\"2\" fontId=\"0\" fillId=\"0\" borderId=\"0\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\" xfId=\"0\" applyNumberFormat=\"1\"/>' + '</cellXfs>' + '<cellStyles count=\"1\">' + '<cellStyle name=\"Normal\" xfId=\"0\" builtinId=\"0\" />' + '</cellStyles>' + '<dxfs count=\"0\" />' + '<tableStyles count=\"0\" defaultTableStyle=\"TableStyleMedium9\" defaultPivotStyle=\"PivotStyleMedium4\" />' + '</styleSheet>'\n  }; // Note we could use 3 `for` loops for the styles, but when gzipped there is\n  // virtually no difference in size, since the above can be easily compressed\n  // Pattern matching for special number formats. Perhaps this should be exposed\n  // via an API in future?\n  // Ref: section 3.8.30 - built in formatters in open spreadsheet\n  //   https://www.ecma-international.org/news/TC45_current_work/Office%20Open%20XML%20Part%204%20-%20Markup%20Language%20Reference.pdf\n\n  var _excelSpecials = [{\n    match: /^\\-?\\d+\\.\\d%$/,\n    style: 60,\n    fmt: function fmt(d) {\n      return d / 100;\n    }\n  }, // Precent with d.p.\n  {\n    match: /^\\-?\\d+\\.?\\d*%$/,\n    style: 56,\n    fmt: function fmt(d) {\n      return d / 100;\n    }\n  }, // Percent\n  {\n    match: /^\\-?\\$[\\d,]+.?\\d*$/,\n    style: 57\n  }, // Dollars\n  {\n    match: /^\\-?£[\\d,]+.?\\d*$/,\n    style: 58\n  }, // Pounds\n  {\n    match: /^\\-?€[\\d,]+.?\\d*$/,\n    style: 59\n  }, // Euros\n  {\n    match: /^\\-?\\d+$/,\n    style: 65\n  }, // Numbers without thousand separators\n  {\n    match: /^\\-?\\d+\\.\\d{2}$/,\n    style: 66\n  }, // Numbers 2 d.p. without thousands separators\n  {\n    match: /^\\([\\d,]+\\)$/,\n    style: 61,\n    fmt: function fmt(d) {\n      return -1 * d.replace(/[\\(\\)]/g, '');\n    }\n  }, // Negative numbers indicated by brackets\n  {\n    match: /^\\([\\d,]+\\.\\d{2}\\)$/,\n    style: 62,\n    fmt: function fmt(d) {\n      return -1 * d.replace(/[\\(\\)]/g, '');\n    }\n  }, // Negative numbers indicated by brackets - 2d.p.\n  {\n    match: /^\\-?[\\d,]+$/,\n    style: 63\n  }, // Numbers with thousand separators\n  {\n    match: /^\\-?[\\d,]+\\.\\d{2}$/,\n    style: 64 // Numbers with 2 d.p. and thousands separators\n\n  }];\n  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n   * Buttons\n   */\n  //\n  // Copy to clipboard\n  //\n\n  DataTable.ext.buttons.copyHtml5 = {\n    className: 'buttons-copy buttons-html5',\n    text: function text(dt) {\n      return dt.i18n('buttons.copy', 'Copy');\n    },\n    action: function action(e, dt, button, config) {\n      this.processing(true);\n      var that = this;\n\n      var exportData = _exportData(dt, config);\n\n      var info = dt.buttons.exportInfo(config);\n\n      var newline = _newLine(config);\n\n      var output = exportData.str;\n      var hiddenDiv = $('<div/>').css({\n        height: 1,\n        width: 1,\n        overflow: 'hidden',\n        position: 'fixed',\n        top: 0,\n        left: 0\n      });\n\n      if (info.title) {\n        output = info.title + newline + newline + output;\n      }\n\n      if (info.messageTop) {\n        output = info.messageTop + newline + newline + output;\n      }\n\n      if (info.messageBottom) {\n        output = output + newline + newline + info.messageBottom;\n      }\n\n      if (config.customize) {\n        output = config.customize(output, config, dt);\n      }\n\n      var textarea = $('<textarea readonly/>').val(output).appendTo(hiddenDiv); // For browsers that support the copy execCommand, try to use it\n\n      if (document.queryCommandSupported('copy')) {\n        hiddenDiv.appendTo(dt.table().container());\n        textarea[0].focus();\n        textarea[0].select();\n\n        try {\n          var successful = document.execCommand('copy');\n          hiddenDiv.remove();\n\n          if (successful) {\n            dt.buttons.info(dt.i18n('buttons.copyTitle', 'Copy to clipboard'), dt.i18n('buttons.copySuccess', {\n              1: 'Copied one row to clipboard',\n              _: 'Copied %d rows to clipboard'\n            }, exportData.rows), 2000);\n            this.processing(false);\n            return;\n          }\n        } catch (t) {}\n      } // Otherwise we show the text box and instruct the user to use it\n\n\n      var message = $('<span>' + dt.i18n('buttons.copyKeys', \"Press <i>ctrl</i> or <i>\\u2318</i> + <i>C</i> to copy the table data<br>to your system clipboard.<br><br>\" + 'To cancel, click this message or press escape.') + '</span>').append(hiddenDiv);\n      dt.buttons.info(dt.i18n('buttons.copyTitle', 'Copy to clipboard'), message, 0); // Select the text so when the user activates their system clipboard\n      // it will copy that text\n\n      textarea[0].focus();\n      textarea[0].select(); // Event to hide the message when the user is done\n\n      var container = $(message).closest('.dt-button-info');\n\n      var close = function close() {\n        container.off('click.buttons-copy');\n        $(document).off('.buttons-copy');\n        dt.buttons.info(false);\n      };\n\n      container.on('click.buttons-copy', close);\n      $(document).on('keydown.buttons-copy', function (e) {\n        if (e.keyCode === 27) {\n          // esc\n          close();\n          that.processing(false);\n        }\n      }).on('copy.buttons-copy cut.buttons-copy', function () {\n        close();\n        that.processing(false);\n      });\n    },\n    exportOptions: {},\n    fieldSeparator: '\\t',\n    fieldBoundary: '',\n    header: true,\n    footer: false,\n    title: '*',\n    messageTop: '*',\n    messageBottom: '*'\n  }; //\n  // CSV export\n  //\n\n  DataTable.ext.buttons.csvHtml5 = {\n    bom: false,\n    className: 'buttons-csv buttons-html5',\n    available: function available() {\n      return window.FileReader !== undefined && window.Blob;\n    },\n    text: function text(dt) {\n      return dt.i18n('buttons.csv', 'CSV');\n    },\n    action: function action(e, dt, button, config) {\n      this.processing(true); // Set the text\n\n      var output = _exportData(dt, config).str;\n\n      var info = dt.buttons.exportInfo(config);\n      var charset = config.charset;\n\n      if (config.customize) {\n        output = config.customize(output, config, dt);\n      }\n\n      if (charset !== false) {\n        if (!charset) {\n          charset = document.characterSet || document.charset;\n        }\n\n        if (charset) {\n          charset = ';charset=' + charset;\n        }\n      } else {\n        charset = '';\n      }\n\n      if (config.bom) {\n        output = \"\\uFEFF\" + output;\n      }\n\n      _saveAs(new Blob([output], {\n        type: 'text/csv' + charset\n      }), info.filename, true);\n\n      this.processing(false);\n    },\n    filename: '*',\n    extension: '.csv',\n    exportOptions: {},\n    fieldSeparator: ',',\n    fieldBoundary: '\"',\n    escapeChar: '\"',\n    charset: null,\n    header: true,\n    footer: false\n  }; //\n  // Excel (xlsx) export\n  //\n\n  DataTable.ext.buttons.excelHtml5 = {\n    className: 'buttons-excel buttons-html5',\n    available: function available() {\n      return window.FileReader !== undefined && _jsZip() !== undefined && !_isDuffSafari() && _serialiser;\n    },\n    text: function text(dt) {\n      return dt.i18n('buttons.excel', 'Excel');\n    },\n    action: function action(e, dt, button, config) {\n      this.processing(true);\n      var that = this;\n      var rowPos = 0;\n      var dataStartRow, dataEndRow;\n\n      var getXml = function getXml(type) {\n        var str = excelStrings[type]; //str = str.replace( /xmlns:/g, 'xmlns_' ).replace( /mc:/g, 'mc_' );\n\n        return $.parseXML(str);\n      };\n\n      var rels = getXml('xl/worksheets/sheet1.xml');\n      var relsGet = rels.getElementsByTagName(\"sheetData\")[0];\n      var xlsx = {\n        _rels: {\n          \".rels\": getXml('_rels/.rels')\n        },\n        xl: {\n          _rels: {\n            \"workbook.xml.rels\": getXml('xl/_rels/workbook.xml.rels')\n          },\n          \"workbook.xml\": getXml('xl/workbook.xml'),\n          \"styles.xml\": getXml('xl/styles.xml'),\n          \"worksheets\": {\n            \"sheet1.xml\": rels\n          }\n        },\n        \"[Content_Types].xml\": getXml('[Content_Types].xml')\n      };\n      var data = dt.buttons.exportData(config.exportOptions);\n      var currentRow, rowNode;\n\n      var addRow = function addRow(row) {\n        currentRow = rowPos + 1;\n        rowNode = _createNode(rels, \"row\", {\n          attr: {\n            r: currentRow\n          }\n        });\n\n        for (var i = 0, ien = row.length; i < ien; i++) {\n          // Concat both the Cell Columns as a letter and the Row of the cell.\n          var cellId = createCellPos(i) + '' + currentRow;\n          var cell = null; // For null, undefined of blank cell, continue so it doesn't create the _createNode\n\n          if (row[i] === null || row[i] === undefined || row[i] === '') {\n            if (config.createEmptyCells === true) {\n              row[i] = '';\n            } else {\n              continue;\n            }\n          }\n\n          var originalContent = row[i];\n          row[i] = $.trim(row[i]); // Special number formatting options\n\n          for (var j = 0, jen = _excelSpecials.length; j < jen; j++) {\n            var special = _excelSpecials[j]; // TODO Need to provide the ability for the specials to say\n            // if they are returning a string, since at the moment it is\n            // assumed to be a number\n\n            if (row[i].match && !row[i].match(/^0\\d+/) && row[i].match(special.match)) {\n              var val = row[i].replace(/[^\\d\\.\\-]/g, '');\n\n              if (special.fmt) {\n                val = special.fmt(val);\n              }\n\n              cell = _createNode(rels, 'c', {\n                attr: {\n                  r: cellId,\n                  s: special.style\n                },\n                children: [_createNode(rels, 'v', {\n                  text: val\n                })]\n              });\n              break;\n            }\n          }\n\n          if (!cell) {\n            if (typeof row[i] === 'number' || row[i].match && row[i].match(/^-?\\d+(\\.\\d+)?$/) && !row[i].match(/^0\\d+/)) {\n              // Detect numbers - don't match numbers with leading zeros\n              // or a negative anywhere but the start\n              cell = _createNode(rels, 'c', {\n                attr: {\n                  t: 'n',\n                  r: cellId\n                },\n                children: [_createNode(rels, 'v', {\n                  text: row[i]\n                })]\n              });\n            } else {\n              // String output - replace non standard characters for text output\n              var text = !originalContent.replace ? originalContent : originalContent.replace(/[\\x00-\\x09\\x0B\\x0C\\x0E-\\x1F\\x7F-\\x9F]/g, '');\n              cell = _createNode(rels, 'c', {\n                attr: {\n                  t: 'inlineStr',\n                  r: cellId\n                },\n                children: {\n                  row: _createNode(rels, 'is', {\n                    children: {\n                      row: _createNode(rels, 't', {\n                        text: text,\n                        attr: {\n                          'xml:space': 'preserve'\n                        }\n                      })\n                    }\n                  })\n                }\n              });\n            }\n          }\n\n          rowNode.appendChild(cell);\n        }\n\n        relsGet.appendChild(rowNode);\n        rowPos++;\n      };\n\n      if (config.customizeData) {\n        config.customizeData(data);\n      }\n\n      var mergeCells = function mergeCells(row, colspan) {\n        var mergeCells = $('mergeCells', rels);\n        mergeCells[0].appendChild(_createNode(rels, 'mergeCell', {\n          attr: {\n            ref: 'A' + row + ':' + createCellPos(colspan) + row\n          }\n        }));\n        mergeCells.attr('count', parseFloat(mergeCells.attr('count')) + 1);\n        $('row:eq(' + (row - 1) + ') c', rels).attr('s', '51'); // centre\n      }; // Title and top messages\n\n\n      var exportInfo = dt.buttons.exportInfo(config);\n\n      if (exportInfo.title) {\n        addRow([exportInfo.title], rowPos);\n        mergeCells(rowPos, data.header.length - 1);\n      }\n\n      if (exportInfo.messageTop) {\n        addRow([exportInfo.messageTop], rowPos);\n        mergeCells(rowPos, data.header.length - 1);\n      } // Table itself\n\n\n      if (config.header) {\n        addRow(data.header, rowPos);\n        $('row:last c', rels).attr('s', '2'); // bold\n      }\n\n      dataStartRow = rowPos;\n\n      for (var n = 0, ie = data.body.length; n < ie; n++) {\n        addRow(data.body[n], rowPos);\n      }\n\n      dataEndRow = rowPos;\n\n      if (config.footer && data.footer) {\n        addRow(data.footer, rowPos);\n        $('row:last c', rels).attr('s', '2'); // bold\n      } // Below the table\n\n\n      if (exportInfo.messageBottom) {\n        addRow([exportInfo.messageBottom], rowPos);\n        mergeCells(rowPos, data.header.length - 1);\n      } // Set column widths\n\n\n      var cols = _createNode(rels, 'cols');\n\n      $('worksheet', rels).prepend(cols);\n\n      for (var i = 0, ien = data.header.length; i < ien; i++) {\n        cols.appendChild(_createNode(rels, 'col', {\n          attr: {\n            min: i + 1,\n            max: i + 1,\n            width: _excelColWidth(data, i),\n            customWidth: 1\n          }\n        }));\n      } // Auto filter for columns\n\n\n      $('mergeCells', rels).before(_createNode(rels, 'autoFilter', {\n        attr: {\n          ref: 'A' + dataStartRow + ':' + createCellPos(data.header.length - 1) + dataEndRow\n        }\n      })); // Workbook modifications\n\n      var workbook = xlsx.xl['workbook.xml'];\n      $('sheets sheet', workbook).attr('name', _sheetname(config));\n\n      if (config.autoFilter) {\n        $('definedNames', workbook).append(_createNode(workbook, 'definedName', {\n          attr: {\n            name: '_xlnm._FilterDatabase',\n            localSheetId: '0',\n            hidden: 1\n          },\n          text: _sheetname(config) + '!$A$' + dataStartRow + ':' + createCellPos(data.header.length - 1) + dataEndRow\n        }));\n      } // Let the developer customise the document if they want to\n\n\n      if (config.customize) {\n        config.customize(xlsx, config, dt);\n      } // Excel doesn't like an empty mergeCells tag\n\n\n      if ($('mergeCells', rels).children().length === 0) {\n        $('mergeCells', rels).remove();\n      }\n\n      var jszip = _jsZip();\n\n      var zip = new jszip();\n      var zipConfig = {\n        type: 'blob',\n        mimeType: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\n      };\n\n      _addToZip(zip, xlsx);\n\n      if (zip.generateAsync) {\n        // JSZip 3+\n        zip.generateAsync(zipConfig).then(function (blob) {\n          _saveAs(blob, exportInfo.filename);\n\n          that.processing(false);\n        });\n      } else {\n        // JSZip 2.5\n        _saveAs(zip.generate(zipConfig), exportInfo.filename);\n\n        this.processing(false);\n      }\n    },\n    filename: '*',\n    extension: '.xlsx',\n    exportOptions: {},\n    header: true,\n    footer: false,\n    title: '*',\n    messageTop: '*',\n    messageBottom: '*',\n    createEmptyCells: false,\n    autoFilter: false,\n    sheetName: ''\n  }; //\n  // PDF export - using pdfMake - http://pdfmake.org\n  //\n\n  DataTable.ext.buttons.pdfHtml5 = {\n    className: 'buttons-pdf buttons-html5',\n    available: function available() {\n      return window.FileReader !== undefined && _pdfMake();\n    },\n    text: function text(dt) {\n      return dt.i18n('buttons.pdf', 'PDF');\n    },\n    action: function action(e, dt, button, config) {\n      this.processing(true);\n      var that = this;\n      var data = dt.buttons.exportData(config.exportOptions);\n      var info = dt.buttons.exportInfo(config);\n      var rows = [];\n\n      if (config.header) {\n        rows.push($.map(data.header, function (d) {\n          return {\n            text: typeof d === 'string' ? d : d + '',\n            style: 'tableHeader'\n          };\n        }));\n      }\n\n      for (var i = 0, ien = data.body.length; i < ien; i++) {\n        rows.push($.map(data.body[i], function (d) {\n          if (d === null || d === undefined) {\n            d = '';\n          }\n\n          return {\n            text: typeof d === 'string' ? d : d + '',\n            style: i % 2 ? 'tableBodyEven' : 'tableBodyOdd'\n          };\n        }));\n      }\n\n      if (config.footer && data.footer) {\n        rows.push($.map(data.footer, function (d) {\n          return {\n            text: typeof d === 'string' ? d : d + '',\n            style: 'tableFooter'\n          };\n        }));\n      }\n\n      var doc = {\n        pageSize: config.pageSize,\n        pageOrientation: config.orientation,\n        content: [{\n          table: {\n            headerRows: 1,\n            body: rows\n          },\n          layout: 'noBorders'\n        }],\n        styles: {\n          tableHeader: {\n            bold: true,\n            fontSize: 11,\n            color: 'white',\n            fillColor: '#2d4154',\n            alignment: 'center'\n          },\n          tableBodyEven: {},\n          tableBodyOdd: {\n            fillColor: '#f3f3f3'\n          },\n          tableFooter: {\n            bold: true,\n            fontSize: 11,\n            color: 'white',\n            fillColor: '#2d4154'\n          },\n          title: {\n            alignment: 'center',\n            fontSize: 15\n          },\n          message: {}\n        },\n        defaultStyle: {\n          fontSize: 10\n        }\n      };\n\n      if (info.messageTop) {\n        doc.content.unshift({\n          text: info.messageTop,\n          style: 'message',\n          margin: [0, 0, 0, 12]\n        });\n      }\n\n      if (info.messageBottom) {\n        doc.content.push({\n          text: info.messageBottom,\n          style: 'message',\n          margin: [0, 0, 0, 12]\n        });\n      }\n\n      if (info.title) {\n        doc.content.unshift({\n          text: info.title,\n          style: 'title',\n          margin: [0, 0, 0, 12]\n        });\n      }\n\n      if (config.customize) {\n        config.customize(doc, config, dt);\n      }\n\n      var pdf = _pdfMake().createPdf(doc);\n\n      if (config.download === 'open' && !_isDuffSafari()) {\n        pdf.open();\n      } else {\n        pdf.download(info.filename);\n      }\n\n      this.processing(false);\n    },\n    title: '*',\n    filename: '*',\n    extension: '.pdf',\n    exportOptions: {},\n    orientation: 'portrait',\n    pageSize: 'A4',\n    header: true,\n    footer: false,\n    messageTop: '*',\n    messageBottom: '*',\n    customize: null,\n    download: 'download'\n  };\n  return DataTable.Buttons;\n});"],"sourceRoot":""}